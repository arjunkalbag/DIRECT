
/Users/student/Desktop/IoT/NfcTest/target/5.3.0/argon/NfcTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b88  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8ba4  000b8ba4  00008ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e5bc  000b8bc8  0000e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c4  2003e62c  2003e62c  0001e62c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8c38  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8c3c  000b8c3c  00018c3c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8c42  000b8c42  00018c42  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8c66  000b8c66  00018c66  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00149c8b  00000000  00000000  00018c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000164f9  00000000  00000000  001628f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00048a1b  00000000  00000000  00178dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003590  00000000  00000000  001c1809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bc38  00000000  00000000  001c4d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f8f6  00000000  00000000  001d09d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004f8ac  00000000  00000000  002102c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00142a8e  00000000  00000000  0025fb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009d14  00000000  00000000  003a2604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f004 f989 	bl	b8368 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f004 f991 	bl	b8384 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e5bc 	.word	0x2003e5bc
   b406c:	000b8bc8 	.word	0x000b8bc8
   b4070:	2003e62c 	.word	0x2003e62c
   b4074:	2003e62c 	.word	0x2003e62c
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 ff2b 	bl	b7edc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b8b7c 	.word	0x000b8b7c
   b40a0:	000b8ba4 	.word	0x000b8ba4

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8f2 	b.w	b428c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 ffef 	bl	b508c <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 becb 	b.w	b7e4c <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f002 beaf 	b.w	b6e18 <malloc>

000b40ba <_Znaj>:
   b40ba:	f002 bead 	b.w	b6e18 <malloc>

000b40be <_ZdaPv>:
   b40be:	f002 beb3 	b.w	b6e28 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f002 beb1 	b.w	b6e28 <free>

000b40c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c6:	7800      	ldrb	r0, [r0, #0]
   b40c8:	fab0 f080 	clz	r0, r0
   b40cc:	0940      	lsrs	r0, r0, #5
   b40ce:	4770      	bx	lr

000b40d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40d0:	2301      	movs	r3, #1
   b40d2:	7003      	strb	r3, [r0, #0]
   b40d4:	4770      	bx	lr

000b40d6 <_Z8callbackPcPhj>:
    }
}

void callback(char *CapstoneNode, byte *payload, unsigned int length)
{
}
   b40d6:	4770      	bx	lr

000b40d8 <_Z15dump_byte_arrayPhh>:
{
   b40d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        Serial.print(buffer[i] < 0x10 ? " 0" : " ");
   b40dc:	f8df 8038 	ldr.w	r8, [pc, #56]	; b4118 <_Z15dump_byte_arrayPhh+0x40>
   b40e0:	4f0c      	ldr	r7, [pc, #48]	; (b4114 <_Z15dump_byte_arrayPhh+0x3c>)
   b40e2:	4604      	mov	r4, r0
   b40e4:	1845      	adds	r5, r0, r1
    for (byte i = 0; i < bufferSize; i++)
   b40e6:	42a5      	cmp	r5, r4
   b40e8:	d011      	beq.n	b410e <_Z15dump_byte_arrayPhh+0x36>
        Serial.print(buffer[i] < 0x10 ? " 0" : " ");
   b40ea:	f003 fe29 	bl	b7d40 <_Z16_fetch_usbserialv>
   b40ee:	4626      	mov	r6, r4
   b40f0:	f814 1b01 	ldrb.w	r1, [r4], #1
   b40f4:	290f      	cmp	r1, #15
   b40f6:	bf94      	ite	ls
   b40f8:	4641      	movls	r1, r8
   b40fa:	4639      	movhi	r1, r7
   b40fc:	f003 f8c8 	bl	b7290 <_ZN5Print5printEPKc>
        Serial.print(buffer[i], HEX);
   b4100:	f003 fe1e 	bl	b7d40 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4104:	7831      	ldrb	r1, [r6, #0]
   b4106:	2210      	movs	r2, #16
   b4108:	f003 f8e5 	bl	b72d6 <_ZN5Print11printNumberEmh>
    for (byte i = 0; i < bufferSize; i++)
   b410c:	e7eb      	b.n	b40e6 <_Z15dump_byte_arrayPhh+0xe>
}
   b410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4112:	bf00      	nop
   b4114:	000b8588 	.word	0x000b8588
   b4118:	000b84e0 	.word	0x000b84e0

000b411c <_Z8cardScanv>:

void cardScan()
{
   b411c:	b510      	push	{r4, lr}
    // HACK: This is necessary to make card reading more consistent. Otherwise, when the card gets
    // stuck reading previously, it won't be able to read anymore.
    digitalWrite(RST_PIN, LOW);
   b411e:	2100      	movs	r1, #0
   b4120:	2005      	movs	r0, #5
   b4122:	f003 ff5c 	bl	b7fde <digitalWrite>
    delay(1);
   b4126:	2001      	movs	r0, #1
   b4128:	f002 feae 	bl	b6e88 <delay>
    digitalWrite(RST_PIN, HIGH);
   b412c:	2101      	movs	r1, #1
   b412e:	2005      	movs	r0, #5
   b4130:	f003 ff55 	bl	b7fde <digitalWrite>

    Serial.println("Card Present");
    Serial.print(F("Card UID:"));
    dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
   b4134:	4c26      	ldr	r4, [pc, #152]	; (b41d0 <_Z8cardScanv+0xb4>)
    Serial.println("Card Present");
   b4136:	f003 fe03 	bl	b7d40 <_Z16_fetch_usbserialv>
   b413a:	4926      	ldr	r1, [pc, #152]	; (b41d4 <_Z8cardScanv+0xb8>)
   b413c:	f003 f8bf 	bl	b72be <_ZN5Print7printlnEPKc>
    Serial.print(F("Card UID:"));
   b4140:	f003 fdfe 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4144:	4924      	ldr	r1, [pc, #144]	; (b41d8 <_Z8cardScanv+0xbc>)
   b4146:	f003 f8aa 	bl	b729e <_ZN5Print5printEPK19__FlashStringHelper>
    dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
   b414a:	7921      	ldrb	r1, [r4, #4]
   b414c:	1d60      	adds	r0, r4, #5
   b414e:	f7ff ffc3 	bl	b40d8 <_Z15dump_byte_arrayPhh>
    Serial.println();
   b4152:	f003 fdf5 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4156:	f003 f8a6 	bl	b72a6 <_ZN5Print7printlnEv>
    byte choice = mfrc522.uid.uidByte[1];
   b415a:	79a3      	ldrb	r3, [r4, #6]

    switch (choice)
   b415c:	2b8b      	cmp	r3, #139	; 0x8b
   b415e:	d01f      	beq.n	b41a0 <_Z8cardScanv+0x84>
   b4160:	d804      	bhi.n	b416c <_Z8cardScanv+0x50>
   b4162:	2b47      	cmp	r3, #71	; 0x47
   b4164:	d00a      	beq.n	b417c <_Z8cardScanv+0x60>
   b4166:	2b7b      	cmp	r3, #123	; 0x7b
   b4168:	d024      	beq.n	b41b4 <_Z8cardScanv+0x98>
        digitalWrite(light2, LOW);
        digitalWrite(light3, LOW);
        digitalWrite(light4, HIGH);
        break;
    }
}
   b416a:	bd10      	pop	{r4, pc}
    switch (choice)
   b416c:	2bf1      	cmp	r3, #241	; 0xf1
   b416e:	d1fc      	bne.n	b416a <_Z8cardScanv+0x4e>
        digitalWrite(light1, LOW);
   b4170:	2100      	movs	r1, #0
   b4172:	2006      	movs	r0, #6
   b4174:	f003 ff33 	bl	b7fde <digitalWrite>
        digitalWrite(light2, HIGH);
   b4178:	2101      	movs	r1, #1
   b417a:	e004      	b.n	b4186 <_Z8cardScanv+0x6a>
        digitalWrite(light1, HIGH);
   b417c:	2101      	movs	r1, #1
   b417e:	2006      	movs	r0, #6
   b4180:	f003 ff2d 	bl	b7fde <digitalWrite>
        digitalWrite(light2, LOW);
   b4184:	2100      	movs	r1, #0
        digitalWrite(light2, HIGH);
   b4186:	2007      	movs	r0, #7
   b4188:	f003 ff29 	bl	b7fde <digitalWrite>
        digitalWrite(light3, LOW);
   b418c:	2100      	movs	r1, #0
   b418e:	2008      	movs	r0, #8
   b4190:	f003 ff25 	bl	b7fde <digitalWrite>
        digitalWrite(light4, LOW);
   b4194:	2100      	movs	r1, #0
}
   b4196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(light4, HIGH);
   b419a:	2003      	movs	r0, #3
   b419c:	f003 bf1f 	b.w	b7fde <digitalWrite>
        digitalWrite(light1, LOW);
   b41a0:	2100      	movs	r1, #0
   b41a2:	2006      	movs	r0, #6
   b41a4:	f003 ff1b 	bl	b7fde <digitalWrite>
        digitalWrite(light2, LOW);
   b41a8:	2100      	movs	r1, #0
   b41aa:	2007      	movs	r0, #7
   b41ac:	f003 ff17 	bl	b7fde <digitalWrite>
        digitalWrite(light3, HIGH);
   b41b0:	2101      	movs	r1, #1
   b41b2:	e7ec      	b.n	b418e <_Z8cardScanv+0x72>
        digitalWrite(light1, LOW);
   b41b4:	2100      	movs	r1, #0
   b41b6:	2006      	movs	r0, #6
   b41b8:	f003 ff11 	bl	b7fde <digitalWrite>
        digitalWrite(light2, LOW);
   b41bc:	2100      	movs	r1, #0
   b41be:	2007      	movs	r0, #7
   b41c0:	f003 ff0d 	bl	b7fde <digitalWrite>
        digitalWrite(light3, LOW);
   b41c4:	2100      	movs	r1, #0
   b41c6:	2008      	movs	r0, #8
   b41c8:	f003 ff09 	bl	b7fde <digitalWrite>
        digitalWrite(light4, HIGH);
   b41cc:	2101      	movs	r1, #1
   b41ce:	e7e2      	b.n	b4196 <_Z8cardScanv+0x7a>
   b41d0:	2003e698 	.word	0x2003e698
   b41d4:	000b84e3 	.word	0x000b84e3
   b41d8:	000b84f0 	.word	0x000b84f0

000b41dc <_Z8selfTestv>:
        GreenChange();
    }
}

void selfTest()
{
   b41dc:	b510      	push	{r4, lr}
    Serial.println(F("*****************************"));
   b41de:	f003 fdaf 	bl	b7d40 <_Z16_fetch_usbserialv>
   b41e2:	4921      	ldr	r1, [pc, #132]	; (b4268 <_Z8selfTestv+0x8c>)
   b41e4:	f003 f875 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("MFRC522 Digital self test"));
   b41e8:	f003 fdaa 	bl	b7d40 <_Z16_fetch_usbserialv>
   b41ec:	491f      	ldr	r1, [pc, #124]	; (b426c <_Z8selfTestv+0x90>)
   b41ee:	f003 f870 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("*****************************"));
   b41f2:	f003 fda5 	bl	b7d40 <_Z16_fetch_usbserialv>
   b41f6:	491c      	ldr	r1, [pc, #112]	; (b4268 <_Z8selfTestv+0x8c>)
   b41f8:	f003 f86b 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    mfrc522.PCD_DumpVersionToSerial(); // Show version of PCD - MFRC522 Card Reader
   b41fc:	481c      	ldr	r0, [pc, #112]	; (b4270 <_Z8selfTestv+0x94>)
   b41fe:	f001 fcd9 	bl	b5bb4 <_ZN7MFRC52223PCD_DumpVersionToSerialEv>
    Serial.println(F("-----------------------------"));
   b4202:	f003 fd9d 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4206:	491b      	ldr	r1, [pc, #108]	; (b4274 <_Z8selfTestv+0x98>)
   b4208:	f003 f863 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Only known versions supported"));
   b420c:	f003 fd98 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4210:	4919      	ldr	r1, [pc, #100]	; (b4278 <_Z8selfTestv+0x9c>)
   b4212:	f003 f85e 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("-----------------------------"));
   b4216:	f003 fd93 	bl	b7d40 <_Z16_fetch_usbserialv>
   b421a:	4916      	ldr	r1, [pc, #88]	; (b4274 <_Z8selfTestv+0x98>)
   b421c:	f003 f859 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println(F("Performing test..."));
   b4220:	f003 fd8e 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4224:	4915      	ldr	r1, [pc, #84]	; (b427c <_Z8selfTestv+0xa0>)
   b4226:	f003 f854 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    bool result = mfrc522.PCD_PerformSelfTest(); // perform the test
   b422a:	4811      	ldr	r0, [pc, #68]	; (b4270 <_Z8selfTestv+0x94>)
   b422c:	f001 fe58 	bl	b5ee0 <_ZN7MFRC52219PCD_PerformSelfTestEv>
   b4230:	4604      	mov	r4, r0
    Serial.println(F("-----------------------------"));
   b4232:	f003 fd85 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4236:	490f      	ldr	r1, [pc, #60]	; (b4274 <_Z8selfTestv+0x98>)
   b4238:	f003 f84b 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.print(F("Result: "));
   b423c:	f003 fd80 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4240:	490f      	ldr	r1, [pc, #60]	; (b4280 <_Z8selfTestv+0xa4>)
   b4242:	f003 f82c 	bl	b729e <_ZN5Print5printEPK19__FlashStringHelper>
    if (result)
   b4246:	b154      	cbz	r4, b425e <_Z8selfTestv+0x82>
        Serial.println(F("OK"));
   b4248:	f003 fd7a 	bl	b7d40 <_Z16_fetch_usbserialv>
   b424c:	490d      	ldr	r1, [pc, #52]	; (b4284 <_Z8selfTestv+0xa8>)
    else
        Serial.println(F("DEFECT or UNKNOWN"));
   b424e:	f003 f840 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    Serial.println();
   b4252:	f003 fd75 	bl	b7d40 <_Z16_fetch_usbserialv>
}
   b4256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println();
   b425a:	f003 b824 	b.w	b72a6 <_ZN5Print7printlnEv>
        Serial.println(F("DEFECT or UNKNOWN"));
   b425e:	f003 fd6f 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4262:	4909      	ldr	r1, [pc, #36]	; (b4288 <_Z8selfTestv+0xac>)
   b4264:	e7f3      	b.n	b424e <_Z8selfTestv+0x72>
   b4266:	bf00      	nop
   b4268:	000b84fa 	.word	0x000b84fa
   b426c:	000b8518 	.word	0x000b8518
   b4270:	2003e698 	.word	0x2003e698
   b4274:	000b8532 	.word	0x000b8532
   b4278:	000b8550 	.word	0x000b8550
   b427c:	000b856e 	.word	0x000b856e
   b4280:	000b8581 	.word	0x000b8581
   b4284:	000b858a 	.word	0x000b858a
   b4288:	000b858d 	.word	0x000b858d

000b428c <setup>:
{
   b428c:	b513      	push	{r0, r1, r4, lr}
    pinMode(SS_PIN, INPUT);
   b428e:	2100      	movs	r1, #0
   b4290:	200e      	movs	r0, #14
   b4292:	f003 fe93 	bl	b7fbc <pinMode>
    pinMode(RST_PIN, INPUT);
   b4296:	2100      	movs	r1, #0
   b4298:	2005      	movs	r0, #5
   b429a:	f003 fe8f 	bl	b7fbc <pinMode>
    pinMode(light1, OUTPUT);
   b429e:	2101      	movs	r1, #1
   b42a0:	2006      	movs	r0, #6
   b42a2:	f003 fe8b 	bl	b7fbc <pinMode>
    pinMode(light2, OUTPUT);
   b42a6:	2101      	movs	r1, #1
   b42a8:	2007      	movs	r0, #7
   b42aa:	f003 fe87 	bl	b7fbc <pinMode>
    pinMode(light3, OUTPUT);
   b42ae:	2101      	movs	r1, #1
   b42b0:	2008      	movs	r0, #8
   b42b2:	f003 fe83 	bl	b7fbc <pinMode>
    pinMode(light4, OUTPUT);
   b42b6:	2101      	movs	r1, #1
   b42b8:	2003      	movs	r0, #3
   b42ba:	f003 fe7f 	bl	b7fbc <pinMode>
    pinMode(LIGHT, OUTPUT);
   b42be:	2101      	movs	r1, #1
   b42c0:	2004      	movs	r0, #4
   b42c2:	f003 fe7b 	bl	b7fbc <pinMode>
    strip.begin();
   b42c6:	4815      	ldr	r0, [pc, #84]	; (b431c <setup+0x90>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b42c8:	4c15      	ldr	r4, [pc, #84]	; (b4320 <setup+0x94>)
   b42ca:	f002 f90a 	bl	b64e2 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
   b42ce:	4813      	ldr	r0, [pc, #76]	; (b431c <setup+0x90>)
   b42d0:	f002 f940 	bl	b6554 <_ZN17Adafruit_NeoPixel4showEv>
    Serial.begin(9600);
   b42d4:	f003 fd34 	bl	b7d40 <_Z16_fetch_usbserialv>
   b42d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42dc:	f003 fd24 	bl	b7d28 <_ZN9USBSerial5beginEl>
   b42e0:	7821      	ldrb	r1, [r4, #0]
   b42e2:	f3bf 8f5b 	dmb	ish
   b42e6:	f011 0101 	ands.w	r1, r1, #1
   b42ea:	d10b      	bne.n	b4304 <setup+0x78>
   b42ec:	4620      	mov	r0, r4
   b42ee:	9101      	str	r1, [sp, #4]
   b42f0:	f7ff fee9 	bl	b40c6 <__cxa_guard_acquire>
   b42f4:	9901      	ldr	r1, [sp, #4]
   b42f6:	b128      	cbz	r0, b4304 <setup+0x78>
   b42f8:	480a      	ldr	r0, [pc, #40]	; (b4324 <setup+0x98>)
   b42fa:	f003 f847 	bl	b738c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b42fe:	4620      	mov	r0, r4
   b4300:	f7ff fee6 	bl	b40d0 <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4304:	4807      	ldr	r0, [pc, #28]	; (b4324 <setup+0x98>)
   b4306:	f003 f84b 	bl	b73a0 <_ZN8SPIClass5beginEv>
    mfrc522.PCD_Init(); // Init MFRC522 card
   b430a:	4807      	ldr	r0, [pc, #28]	; (b4328 <setup+0x9c>)
   b430c:	f001 fd8a 	bl	b5e24 <_ZN7MFRC5228PCD_InitEv>
}
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    selfTest();
   b4316:	f7ff bf61 	b.w	b41dc <_Z8selfTestv>
   b431a:	bf00      	nop
   b431c:	2003e6ac 	.word	0x2003e6ac
   b4320:	2003e62c 	.word	0x2003e62c
   b4324:	2003e630 	.word	0x2003e630
   b4328:	2003e698 	.word	0x2003e698

000b432c <_Z9colorWipemh>:
    colorWipe(strip.Color(1, 31, 1), WAIT_TIME);
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME);
    // back to green
}
void colorWipe(uint32_t c, uint8_t wait)
{
   b432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   b4330:	4f0c      	ldr	r7, [pc, #48]	; (b4364 <_Z9colorWipemh+0x38>)
{
   b4332:	4606      	mov	r6, r0
   b4334:	460d      	mov	r5, r1
   b4336:	2400      	movs	r4, #0
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   b4338:	480a      	ldr	r0, [pc, #40]	; (b4364 <_Z9colorWipemh+0x38>)
   b433a:	f002 faff 	bl	b693c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   b433e:	fa1f f884 	uxth.w	r8, r4
   b4342:	4540      	cmp	r0, r8
   b4344:	d90c      	bls.n	b4360 <_Z9colorWipemh+0x34>
    {
        strip.setPixelColor(i, c);
   b4346:	4632      	mov	r2, r6
   b4348:	4641      	mov	r1, r8
   b434a:	4638      	mov	r0, r7
   b434c:	f002 faae 	bl	b68ac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.show();
   b4350:	4638      	mov	r0, r7
   b4352:	f002 f8ff 	bl	b6554 <_ZN17Adafruit_NeoPixel4showEv>
        delay(wait);
   b4356:	4628      	mov	r0, r5
   b4358:	f002 fd96 	bl	b6e88 <delay>
    for (uint16_t i = 0; i < strip.numPixels(); i++)
   b435c:	3401      	adds	r4, #1
   b435e:	e7eb      	b.n	b4338 <_Z9colorWipemh+0xc>
    }
   b4360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4364:	2003e6ac 	.word	0x2003e6ac

000b4368 <_Z10BlueChangev>:
    colorWipe(strip.Color(0, 0, 60), WAIT_TIME); // blue
   b4368:	2100      	movs	r1, #0
{
   b436a:	b508      	push	{r3, lr}
    colorWipe(strip.Color(0, 0, 60), WAIT_TIME); // blue
   b436c:	223c      	movs	r2, #60	; 0x3c
   b436e:	4608      	mov	r0, r1
   b4370:	f002 fadf 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4374:	210a      	movs	r1, #10
   b4376:	f7ff ffd9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(1, 3, 60), WAIT_TIME);
   b437a:	223c      	movs	r2, #60	; 0x3c
   b437c:	2103      	movs	r1, #3
   b437e:	2001      	movs	r0, #1
   b4380:	f002 fad7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4384:	210a      	movs	r1, #10
   b4386:	f7ff ffd1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(2, 7, 60), WAIT_TIME);
   b438a:	223c      	movs	r2, #60	; 0x3c
   b438c:	2107      	movs	r1, #7
   b438e:	2002      	movs	r0, #2
   b4390:	f002 facf 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4394:	210a      	movs	r1, #10
   b4396:	f7ff ffc9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(3, 11, 60), WAIT_TIME);
   b439a:	223c      	movs	r2, #60	; 0x3c
   b439c:	210b      	movs	r1, #11
   b439e:	2003      	movs	r0, #3
   b43a0:	f002 fac7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b43a4:	210a      	movs	r1, #10
   b43a6:	f7ff ffc1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(4, 15, 60), WAIT_TIME);
   b43aa:	223c      	movs	r2, #60	; 0x3c
   b43ac:	210f      	movs	r1, #15
   b43ae:	2004      	movs	r0, #4
   b43b0:	f002 fabf 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b43b4:	210a      	movs	r1, #10
   b43b6:	f7ff ffb9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(5, 19, 60), WAIT_TIME);
   b43ba:	223c      	movs	r2, #60	; 0x3c
   b43bc:	2113      	movs	r1, #19
   b43be:	2005      	movs	r0, #5
   b43c0:	f002 fab7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b43c4:	210a      	movs	r1, #10
   b43c6:	f7ff ffb1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(6, 22, 60), WAIT_TIME); // blue/lightblue
   b43ca:	223c      	movs	r2, #60	; 0x3c
   b43cc:	2116      	movs	r1, #22
   b43ce:	2006      	movs	r0, #6
   b43d0:	f002 faaf 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b43d4:	210a      	movs	r1, #10
   b43d6:	f7ff ffa9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(7, 26, 60), WAIT_TIME);
   b43da:	223c      	movs	r2, #60	; 0x3c
   b43dc:	211a      	movs	r1, #26
   b43de:	2007      	movs	r0, #7
   b43e0:	f002 faa7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b43e4:	210a      	movs	r1, #10
   b43e6:	f7ff ffa1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(8, 30, 60), WAIT_TIME);
   b43ea:	223c      	movs	r2, #60	; 0x3c
   b43ec:	211e      	movs	r1, #30
   b43ee:	2008      	movs	r0, #8
   b43f0:	f002 fa9f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b43f4:	210a      	movs	r1, #10
   b43f6:	f7ff ff99 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(9, 34, 60), WAIT_TIME);
   b43fa:	223c      	movs	r2, #60	; 0x3c
   b43fc:	2122      	movs	r1, #34	; 0x22
   b43fe:	2009      	movs	r0, #9
   b4400:	f002 fa97 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4404:	210a      	movs	r1, #10
   b4406:	f7ff ff91 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(10, 37, 60), WAIT_TIME);
   b440a:	223c      	movs	r2, #60	; 0x3c
   b440c:	2125      	movs	r1, #37	; 0x25
   b440e:	200a      	movs	r0, #10
   b4410:	f002 fa8f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4414:	210a      	movs	r1, #10
   b4416:	f7ff ff89 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(11, 41, 60), WAIT_TIME);
   b441a:	223c      	movs	r2, #60	; 0x3c
   b441c:	2129      	movs	r1, #41	; 0x29
   b441e:	200b      	movs	r0, #11
   b4420:	f002 fa87 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4424:	210a      	movs	r1, #10
   b4426:	f7ff ff81 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(12, 45, 60), WAIT_TIME); // light blue
   b442a:	223c      	movs	r2, #60	; 0x3c
   b442c:	212d      	movs	r1, #45	; 0x2d
   b442e:	200c      	movs	r0, #12
   b4430:	f002 fa7f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4434:	210a      	movs	r1, #10
   b4436:	f7ff ff79 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(11, 41, 60), WAIT_TIME);
   b443a:	223c      	movs	r2, #60	; 0x3c
   b443c:	2129      	movs	r1, #41	; 0x29
   b443e:	200b      	movs	r0, #11
   b4440:	f002 fa77 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4444:	210a      	movs	r1, #10
   b4446:	f7ff ff71 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(10, 37, 60), WAIT_TIME);
   b444a:	223c      	movs	r2, #60	; 0x3c
   b444c:	2125      	movs	r1, #37	; 0x25
   b444e:	200a      	movs	r0, #10
   b4450:	f002 fa6f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4454:	210a      	movs	r1, #10
   b4456:	f7ff ff69 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(9, 34, 60), WAIT_TIME);
   b445a:	223c      	movs	r2, #60	; 0x3c
   b445c:	2122      	movs	r1, #34	; 0x22
   b445e:	2009      	movs	r0, #9
   b4460:	f002 fa67 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4464:	210a      	movs	r1, #10
   b4466:	f7ff ff61 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(8, 30, 60), WAIT_TIME);
   b446a:	223c      	movs	r2, #60	; 0x3c
   b446c:	211e      	movs	r1, #30
   b446e:	2008      	movs	r0, #8
   b4470:	f002 fa5f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4474:	210a      	movs	r1, #10
   b4476:	f7ff ff59 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(7, 26, 60), WAIT_TIME);
   b447a:	223c      	movs	r2, #60	; 0x3c
   b447c:	211a      	movs	r1, #26
   b447e:	2007      	movs	r0, #7
   b4480:	f002 fa57 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4484:	210a      	movs	r1, #10
   b4486:	f7ff ff51 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(6, 22, 60), WAIT_TIME); // lightblue/blue
   b448a:	223c      	movs	r2, #60	; 0x3c
   b448c:	2116      	movs	r1, #22
   b448e:	2006      	movs	r0, #6
   b4490:	f002 fa4f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4494:	210a      	movs	r1, #10
   b4496:	f7ff ff49 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(5, 19, 60), WAIT_TIME);
   b449a:	223c      	movs	r2, #60	; 0x3c
   b449c:	2113      	movs	r1, #19
   b449e:	2005      	movs	r0, #5
   b44a0:	f002 fa47 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b44a4:	210a      	movs	r1, #10
   b44a6:	f7ff ff41 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(4, 15, 60), WAIT_TIME);
   b44aa:	223c      	movs	r2, #60	; 0x3c
   b44ac:	210f      	movs	r1, #15
   b44ae:	2004      	movs	r0, #4
   b44b0:	f002 fa3f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b44b4:	210a      	movs	r1, #10
   b44b6:	f7ff ff39 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(3, 11, 60), WAIT_TIME);
   b44ba:	223c      	movs	r2, #60	; 0x3c
   b44bc:	210b      	movs	r1, #11
   b44be:	2003      	movs	r0, #3
   b44c0:	f002 fa37 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b44c4:	210a      	movs	r1, #10
   b44c6:	f7ff ff31 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(2, 7, 60), WAIT_TIME);
   b44ca:	223c      	movs	r2, #60	; 0x3c
   b44cc:	2107      	movs	r1, #7
   b44ce:	2002      	movs	r0, #2
   b44d0:	f002 fa2f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b44d4:	210a      	movs	r1, #10
   b44d6:	f7ff ff29 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(1, 3, 60), WAIT_TIME);
   b44da:	223c      	movs	r2, #60	; 0x3c
   b44dc:	2103      	movs	r1, #3
   b44de:	2001      	movs	r0, #1
   b44e0:	f002 fa27 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b44e4:	210a      	movs	r1, #10
   b44e6:	f7ff ff21 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 60), WAIT_TIME); // blue
   b44ea:	2100      	movs	r1, #0
   b44ec:	223c      	movs	r2, #60	; 0x3c
   b44ee:	4608      	mov	r0, r1
   b44f0:	f002 fa1f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b44f4:	210a      	movs	r1, #10
   b44f6:	f7ff ff19 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 57), WAIT_TIME);
   b44fa:	2100      	movs	r1, #0
   b44fc:	2239      	movs	r2, #57	; 0x39
   b44fe:	4608      	mov	r0, r1
   b4500:	f002 fa17 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4504:	210a      	movs	r1, #10
   b4506:	f7ff ff11 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 55), WAIT_TIME);
   b450a:	2100      	movs	r1, #0
   b450c:	2237      	movs	r2, #55	; 0x37
   b450e:	4608      	mov	r0, r1
   b4510:	f002 fa0f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4514:	210a      	movs	r1, #10
   b4516:	f7ff ff09 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 52), WAIT_TIME);
   b451a:	2100      	movs	r1, #0
   b451c:	2234      	movs	r2, #52	; 0x34
   b451e:	4608      	mov	r0, r1
   b4520:	f002 fa07 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4524:	210a      	movs	r1, #10
   b4526:	f7ff ff01 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 49), WAIT_TIME);
   b452a:	2100      	movs	r1, #0
   b452c:	2231      	movs	r2, #49	; 0x31
   b452e:	4608      	mov	r0, r1
   b4530:	f002 f9ff 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4534:	210a      	movs	r1, #10
   b4536:	f7ff fef9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 47), WAIT_TIME);
   b453a:	2100      	movs	r1, #0
   b453c:	222f      	movs	r2, #47	; 0x2f
   b453e:	4608      	mov	r0, r1
   b4540:	f002 f9f7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4544:	210a      	movs	r1, #10
   b4546:	f7ff fef1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 45), WAIT_TIME); // blue/navy
   b454a:	2100      	movs	r1, #0
   b454c:	222d      	movs	r2, #45	; 0x2d
   b454e:	4608      	mov	r0, r1
   b4550:	f002 f9ef 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4554:	210a      	movs	r1, #10
   b4556:	f7ff fee9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 42), WAIT_TIME);
   b455a:	2100      	movs	r1, #0
   b455c:	222a      	movs	r2, #42	; 0x2a
   b455e:	4608      	mov	r0, r1
   b4560:	f002 f9e7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4564:	210a      	movs	r1, #10
   b4566:	f7ff fee1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 40), WAIT_TIME);
   b456a:	2100      	movs	r1, #0
   b456c:	2228      	movs	r2, #40	; 0x28
   b456e:	4608      	mov	r0, r1
   b4570:	f002 f9df 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4574:	210a      	movs	r1, #10
   b4576:	f7ff fed9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 37), WAIT_TIME);
   b457a:	2100      	movs	r1, #0
   b457c:	2225      	movs	r2, #37	; 0x25
   b457e:	4608      	mov	r0, r1
   b4580:	f002 f9d7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4584:	210a      	movs	r1, #10
   b4586:	f7ff fed1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 35), WAIT_TIME);
   b458a:	2100      	movs	r1, #0
   b458c:	2223      	movs	r2, #35	; 0x23
   b458e:	4608      	mov	r0, r1
   b4590:	f002 f9cf 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4594:	210a      	movs	r1, #10
   b4596:	f7ff fec9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 32), WAIT_TIME);
   b459a:	2100      	movs	r1, #0
   b459c:	2220      	movs	r2, #32
   b459e:	4608      	mov	r0, r1
   b45a0:	f002 f9c7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45a4:	210a      	movs	r1, #10
   b45a6:	f7ff fec1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 30), WAIT_TIME); // navyblue
   b45aa:	2100      	movs	r1, #0
   b45ac:	221e      	movs	r2, #30
   b45ae:	4608      	mov	r0, r1
   b45b0:	f002 f9bf 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45b4:	210a      	movs	r1, #10
   b45b6:	f7ff feb9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 32), WAIT_TIME);
   b45ba:	2100      	movs	r1, #0
   b45bc:	2220      	movs	r2, #32
   b45be:	4608      	mov	r0, r1
   b45c0:	f002 f9b7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45c4:	210a      	movs	r1, #10
   b45c6:	f7ff feb1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 35), WAIT_TIME);
   b45ca:	2100      	movs	r1, #0
   b45cc:	2223      	movs	r2, #35	; 0x23
   b45ce:	4608      	mov	r0, r1
   b45d0:	f002 f9af 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45d4:	210a      	movs	r1, #10
   b45d6:	f7ff fea9 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 37), WAIT_TIME);
   b45da:	2100      	movs	r1, #0
   b45dc:	2225      	movs	r2, #37	; 0x25
   b45de:	4608      	mov	r0, r1
   b45e0:	f002 f9a7 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45e4:	210a      	movs	r1, #10
   b45e6:	f7ff fea1 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 40), WAIT_TIME);
   b45ea:	2100      	movs	r1, #0
   b45ec:	2228      	movs	r2, #40	; 0x28
   b45ee:	4608      	mov	r0, r1
   b45f0:	f002 f99f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b45f4:	210a      	movs	r1, #10
   b45f6:	f7ff fe99 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 42), WAIT_TIME);
   b45fa:	2100      	movs	r1, #0
   b45fc:	222a      	movs	r2, #42	; 0x2a
   b45fe:	4608      	mov	r0, r1
   b4600:	f002 f997 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4604:	210a      	movs	r1, #10
   b4606:	f7ff fe91 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 45), WAIT_TIME); // navy/blue
   b460a:	2100      	movs	r1, #0
   b460c:	222d      	movs	r2, #45	; 0x2d
   b460e:	4608      	mov	r0, r1
   b4610:	f002 f98f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4614:	210a      	movs	r1, #10
   b4616:	f7ff fe89 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 47), WAIT_TIME);
   b461a:	2100      	movs	r1, #0
   b461c:	222f      	movs	r2, #47	; 0x2f
   b461e:	4608      	mov	r0, r1
   b4620:	f002 f987 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4624:	210a      	movs	r1, #10
   b4626:	f7ff fe81 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 49), WAIT_TIME);
   b462a:	2100      	movs	r1, #0
   b462c:	2231      	movs	r2, #49	; 0x31
   b462e:	4608      	mov	r0, r1
   b4630:	f002 f97f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4634:	210a      	movs	r1, #10
   b4636:	f7ff fe79 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 52), WAIT_TIME);
   b463a:	2100      	movs	r1, #0
   b463c:	2234      	movs	r2, #52	; 0x34
   b463e:	4608      	mov	r0, r1
   b4640:	f002 f977 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4644:	210a      	movs	r1, #10
   b4646:	f7ff fe71 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 55), WAIT_TIME);
   b464a:	2100      	movs	r1, #0
   b464c:	2237      	movs	r2, #55	; 0x37
   b464e:	4608      	mov	r0, r1
   b4650:	f002 f96f 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4654:	210a      	movs	r1, #10
   b4656:	f7ff fe69 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 0, 57), WAIT_TIME);
   b465a:	2100      	movs	r1, #0
   b465c:	4608      	mov	r0, r1
   b465e:	2239      	movs	r2, #57	; 0x39
   b4660:	f002 f967 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
}
   b4664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    colorWipe(strip.Color(0, 0, 57), WAIT_TIME);
   b4668:	210a      	movs	r1, #10
   b466a:	f7ff be5f 	b.w	b432c <_Z9colorWipemh>

000b466e <_Z9RedChangev>:
    colorWipe(strip.Color(60, 0, 0), WAIT_TIME); // red
   b466e:	2200      	movs	r2, #0
{
   b4670:	b508      	push	{r3, lr}
    colorWipe(strip.Color(60, 0, 0), WAIT_TIME); // red
   b4672:	4611      	mov	r1, r2
   b4674:	203c      	movs	r0, #60	; 0x3c
   b4676:	f002 f95c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b467a:	210a      	movs	r1, #10
   b467c:	f7ff fe56 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 1, 1), WAIT_TIME);
   b4680:	2201      	movs	r2, #1
   b4682:	4611      	mov	r1, r2
   b4684:	203c      	movs	r0, #60	; 0x3c
   b4686:	f002 f954 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b468a:	210a      	movs	r1, #10
   b468c:	f7ff fe4e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 2, 2), WAIT_TIME);
   b4690:	2202      	movs	r2, #2
   b4692:	4611      	mov	r1, r2
   b4694:	203c      	movs	r0, #60	; 0x3c
   b4696:	f002 f94c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b469a:	210a      	movs	r1, #10
   b469c:	f7ff fe46 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 3, 3), WAIT_TIME);
   b46a0:	2203      	movs	r2, #3
   b46a2:	4611      	mov	r1, r2
   b46a4:	203c      	movs	r0, #60	; 0x3c
   b46a6:	f002 f944 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b46aa:	210a      	movs	r1, #10
   b46ac:	f7ff fe3e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 4, 4), WAIT_TIME);
   b46b0:	2204      	movs	r2, #4
   b46b2:	4611      	mov	r1, r2
   b46b4:	203c      	movs	r0, #60	; 0x3c
   b46b6:	f002 f93c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b46ba:	210a      	movs	r1, #10
   b46bc:	f7ff fe36 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 5, 5), WAIT_TIME);
   b46c0:	2205      	movs	r2, #5
   b46c2:	4611      	mov	r1, r2
   b46c4:	203c      	movs	r0, #60	; 0x3c
   b46c6:	f002 f934 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b46ca:	210a      	movs	r1, #10
   b46cc:	f7ff fe2e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 6, 6), WAIT_TIME); // red/pink
   b46d0:	2206      	movs	r2, #6
   b46d2:	4611      	mov	r1, r2
   b46d4:	203c      	movs	r0, #60	; 0x3c
   b46d6:	f002 f92c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b46da:	210a      	movs	r1, #10
   b46dc:	f7ff fe26 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 7, 7), WAIT_TIME);
   b46e0:	2207      	movs	r2, #7
   b46e2:	4611      	mov	r1, r2
   b46e4:	203c      	movs	r0, #60	; 0x3c
   b46e6:	f002 f924 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b46ea:	210a      	movs	r1, #10
   b46ec:	f7ff fe1e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 8, 8), WAIT_TIME);
   b46f0:	2208      	movs	r2, #8
   b46f2:	4611      	mov	r1, r2
   b46f4:	203c      	movs	r0, #60	; 0x3c
   b46f6:	f002 f91c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b46fa:	210a      	movs	r1, #10
   b46fc:	f7ff fe16 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 9, 9), WAIT_TIME);
   b4700:	2209      	movs	r2, #9
   b4702:	4611      	mov	r1, r2
   b4704:	203c      	movs	r0, #60	; 0x3c
   b4706:	f002 f914 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b470a:	210a      	movs	r1, #10
   b470c:	f7ff fe0e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 10, 10), WAIT_TIME);
   b4710:	220a      	movs	r2, #10
   b4712:	4611      	mov	r1, r2
   b4714:	203c      	movs	r0, #60	; 0x3c
   b4716:	f002 f90c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b471a:	210a      	movs	r1, #10
   b471c:	f7ff fe06 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 11, 11), WAIT_TIME);
   b4720:	220b      	movs	r2, #11
   b4722:	4611      	mov	r1, r2
   b4724:	203c      	movs	r0, #60	; 0x3c
   b4726:	f002 f904 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b472a:	210a      	movs	r1, #10
   b472c:	f7ff fdfe 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 12, 12), WAIT_TIME); // pink
   b4730:	220c      	movs	r2, #12
   b4732:	4611      	mov	r1, r2
   b4734:	203c      	movs	r0, #60	; 0x3c
   b4736:	f002 f8fc 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b473a:	210a      	movs	r1, #10
   b473c:	f7ff fdf6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 11, 11), WAIT_TIME);
   b4740:	220b      	movs	r2, #11
   b4742:	4611      	mov	r1, r2
   b4744:	203c      	movs	r0, #60	; 0x3c
   b4746:	f002 f8f4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b474a:	210a      	movs	r1, #10
   b474c:	f7ff fdee 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 10, 10), WAIT_TIME);
   b4750:	220a      	movs	r2, #10
   b4752:	4611      	mov	r1, r2
   b4754:	203c      	movs	r0, #60	; 0x3c
   b4756:	f002 f8ec 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b475a:	210a      	movs	r1, #10
   b475c:	f7ff fde6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 9, 9), WAIT_TIME);
   b4760:	2209      	movs	r2, #9
   b4762:	4611      	mov	r1, r2
   b4764:	203c      	movs	r0, #60	; 0x3c
   b4766:	f002 f8e4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b476a:	210a      	movs	r1, #10
   b476c:	f7ff fdde 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 8, 8), WAIT_TIME);
   b4770:	2208      	movs	r2, #8
   b4772:	4611      	mov	r1, r2
   b4774:	203c      	movs	r0, #60	; 0x3c
   b4776:	f002 f8dc 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b477a:	210a      	movs	r1, #10
   b477c:	f7ff fdd6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 7, 7), WAIT_TIME);
   b4780:	2207      	movs	r2, #7
   b4782:	4611      	mov	r1, r2
   b4784:	203c      	movs	r0, #60	; 0x3c
   b4786:	f002 f8d4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b478a:	210a      	movs	r1, #10
   b478c:	f7ff fdce 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 6, 6), WAIT_TIME); // pink/red
   b4790:	2206      	movs	r2, #6
   b4792:	4611      	mov	r1, r2
   b4794:	203c      	movs	r0, #60	; 0x3c
   b4796:	f002 f8cc 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b479a:	210a      	movs	r1, #10
   b479c:	f7ff fdc6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 5, 5), WAIT_TIME);
   b47a0:	2205      	movs	r2, #5
   b47a2:	4611      	mov	r1, r2
   b47a4:	203c      	movs	r0, #60	; 0x3c
   b47a6:	f002 f8c4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b47aa:	210a      	movs	r1, #10
   b47ac:	f7ff fdbe 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 4, 4), WAIT_TIME);
   b47b0:	2204      	movs	r2, #4
   b47b2:	4611      	mov	r1, r2
   b47b4:	203c      	movs	r0, #60	; 0x3c
   b47b6:	f002 f8bc 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b47ba:	210a      	movs	r1, #10
   b47bc:	f7ff fdb6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 3, 3), WAIT_TIME);
   b47c0:	2203      	movs	r2, #3
   b47c2:	4611      	mov	r1, r2
   b47c4:	203c      	movs	r0, #60	; 0x3c
   b47c6:	f002 f8b4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b47ca:	210a      	movs	r1, #10
   b47cc:	f7ff fdae 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 2, 2), WAIT_TIME);
   b47d0:	2202      	movs	r2, #2
   b47d2:	4611      	mov	r1, r2
   b47d4:	203c      	movs	r0, #60	; 0x3c
   b47d6:	f002 f8ac 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b47da:	210a      	movs	r1, #10
   b47dc:	f7ff fda6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 1, 1), WAIT_TIME);
   b47e0:	2201      	movs	r2, #1
   b47e2:	4611      	mov	r1, r2
   b47e4:	203c      	movs	r0, #60	; 0x3c
   b47e6:	f002 f8a4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b47ea:	210a      	movs	r1, #10
   b47ec:	f7ff fd9e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 0, 0), WAIT_TIME); // red
   b47f0:	2200      	movs	r2, #0
   b47f2:	4611      	mov	r1, r2
   b47f4:	203c      	movs	r0, #60	; 0x3c
   b47f6:	f002 f89c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b47fa:	210a      	movs	r1, #10
   b47fc:	f7ff fd96 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(57, 0, 0), WAIT_TIME);
   b4800:	2200      	movs	r2, #0
   b4802:	4611      	mov	r1, r2
   b4804:	2039      	movs	r0, #57	; 0x39
   b4806:	f002 f894 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b480a:	210a      	movs	r1, #10
   b480c:	f7ff fd8e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(55, 0, 0), WAIT_TIME);
   b4810:	2200      	movs	r2, #0
   b4812:	4611      	mov	r1, r2
   b4814:	2037      	movs	r0, #55	; 0x37
   b4816:	f002 f88c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b481a:	210a      	movs	r1, #10
   b481c:	f7ff fd86 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(52, 0, 0), WAIT_TIME);
   b4820:	2200      	movs	r2, #0
   b4822:	4611      	mov	r1, r2
   b4824:	2034      	movs	r0, #52	; 0x34
   b4826:	f002 f884 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b482a:	210a      	movs	r1, #10
   b482c:	f7ff fd7e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(49, 0, 0), WAIT_TIME);
   b4830:	2200      	movs	r2, #0
   b4832:	4611      	mov	r1, r2
   b4834:	2031      	movs	r0, #49	; 0x31
   b4836:	f002 f87c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b483a:	210a      	movs	r1, #10
   b483c:	f7ff fd76 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(47, 0, 0), WAIT_TIME);
   b4840:	2200      	movs	r2, #0
   b4842:	4611      	mov	r1, r2
   b4844:	202f      	movs	r0, #47	; 0x2f
   b4846:	f002 f874 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b484a:	210a      	movs	r1, #10
   b484c:	f7ff fd6e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(45, 0, 0), WAIT_TIME); // red/maroon
   b4850:	2200      	movs	r2, #0
   b4852:	4611      	mov	r1, r2
   b4854:	202d      	movs	r0, #45	; 0x2d
   b4856:	f002 f86c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b485a:	210a      	movs	r1, #10
   b485c:	f7ff fd66 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(42, 0, 0), WAIT_TIME);
   b4860:	2200      	movs	r2, #0
   b4862:	4611      	mov	r1, r2
   b4864:	202a      	movs	r0, #42	; 0x2a
   b4866:	f002 f864 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b486a:	210a      	movs	r1, #10
   b486c:	f7ff fd5e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(40, 0, 0), WAIT_TIME);
   b4870:	2200      	movs	r2, #0
   b4872:	4611      	mov	r1, r2
   b4874:	2028      	movs	r0, #40	; 0x28
   b4876:	f002 f85c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b487a:	210a      	movs	r1, #10
   b487c:	f7ff fd56 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(37, 0, 0), WAIT_TIME);
   b4880:	2200      	movs	r2, #0
   b4882:	4611      	mov	r1, r2
   b4884:	2025      	movs	r0, #37	; 0x25
   b4886:	f002 f854 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b488a:	210a      	movs	r1, #10
   b488c:	f7ff fd4e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(35, 0, 0), WAIT_TIME);
   b4890:	2200      	movs	r2, #0
   b4892:	4611      	mov	r1, r2
   b4894:	2023      	movs	r0, #35	; 0x23
   b4896:	f002 f84c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b489a:	210a      	movs	r1, #10
   b489c:	f7ff fd46 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(32, 0, 0), WAIT_TIME);
   b48a0:	2200      	movs	r2, #0
   b48a2:	4611      	mov	r1, r2
   b48a4:	2020      	movs	r0, #32
   b48a6:	f002 f844 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b48aa:	210a      	movs	r1, #10
   b48ac:	f7ff fd3e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(30, 0, 0), WAIT_TIME); // maroon
   b48b0:	2200      	movs	r2, #0
   b48b2:	4611      	mov	r1, r2
   b48b4:	201e      	movs	r0, #30
   b48b6:	f002 f83c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b48ba:	210a      	movs	r1, #10
   b48bc:	f7ff fd36 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(32, 0, 0), WAIT_TIME);
   b48c0:	2200      	movs	r2, #0
   b48c2:	4611      	mov	r1, r2
   b48c4:	2020      	movs	r0, #32
   b48c6:	f002 f834 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b48ca:	210a      	movs	r1, #10
   b48cc:	f7ff fd2e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(35, 0, 0), WAIT_TIME);
   b48d0:	2200      	movs	r2, #0
   b48d2:	4611      	mov	r1, r2
   b48d4:	2023      	movs	r0, #35	; 0x23
   b48d6:	f002 f82c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b48da:	210a      	movs	r1, #10
   b48dc:	f7ff fd26 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(37, 0, 0), WAIT_TIME);
   b48e0:	2200      	movs	r2, #0
   b48e2:	4611      	mov	r1, r2
   b48e4:	2025      	movs	r0, #37	; 0x25
   b48e6:	f002 f824 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b48ea:	210a      	movs	r1, #10
   b48ec:	f7ff fd1e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(40, 0, 0), WAIT_TIME);
   b48f0:	2200      	movs	r2, #0
   b48f2:	4611      	mov	r1, r2
   b48f4:	2028      	movs	r0, #40	; 0x28
   b48f6:	f002 f81c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b48fa:	210a      	movs	r1, #10
   b48fc:	f7ff fd16 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(42, 0, 0), WAIT_TIME);
   b4900:	2200      	movs	r2, #0
   b4902:	4611      	mov	r1, r2
   b4904:	202a      	movs	r0, #42	; 0x2a
   b4906:	f002 f814 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b490a:	210a      	movs	r1, #10
   b490c:	f7ff fd0e 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(45, 0, 0), WAIT_TIME); // maroon/red
   b4910:	2200      	movs	r2, #0
   b4912:	4611      	mov	r1, r2
   b4914:	202d      	movs	r0, #45	; 0x2d
   b4916:	f002 f80c 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b491a:	210a      	movs	r1, #10
   b491c:	f7ff fd06 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(47, 0, 0), WAIT_TIME);
   b4920:	2200      	movs	r2, #0
   b4922:	4611      	mov	r1, r2
   b4924:	202f      	movs	r0, #47	; 0x2f
   b4926:	f002 f804 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b492a:	210a      	movs	r1, #10
   b492c:	f7ff fcfe 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(49, 0, 0), WAIT_TIME);
   b4930:	2200      	movs	r2, #0
   b4932:	4611      	mov	r1, r2
   b4934:	2031      	movs	r0, #49	; 0x31
   b4936:	f001 fffc 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b493a:	210a      	movs	r1, #10
   b493c:	f7ff fcf6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(52, 0, 0), WAIT_TIME);
   b4940:	2200      	movs	r2, #0
   b4942:	4611      	mov	r1, r2
   b4944:	2034      	movs	r0, #52	; 0x34
   b4946:	f001 fff4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b494a:	210a      	movs	r1, #10
   b494c:	f7ff fcee 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(55, 0, 0), WAIT_TIME);
   b4950:	2200      	movs	r2, #0
   b4952:	4611      	mov	r1, r2
   b4954:	2037      	movs	r0, #55	; 0x37
   b4956:	f001 ffec 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b495a:	210a      	movs	r1, #10
   b495c:	f7ff fce6 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(57, 0, 0), WAIT_TIME);
   b4960:	2200      	movs	r2, #0
   b4962:	4611      	mov	r1, r2
   b4964:	2039      	movs	r0, #57	; 0x39
   b4966:	f001 ffe4 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
}
   b496a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    colorWipe(strip.Color(57, 0, 0), WAIT_TIME);
   b496e:	210a      	movs	r1, #10
   b4970:	f7ff bcdc 	b.w	b432c <_Z9colorWipemh>

000b4974 <_Z12PurpleChangev>:
{
   b4974:	b508      	push	{r3, lr}
    colorWipe(strip.Color(36, 24, 48), WAIT_TIME); // purple
   b4976:	2230      	movs	r2, #48	; 0x30
   b4978:	2118      	movs	r1, #24
   b497a:	2024      	movs	r0, #36	; 0x24
   b497c:	f001 ffd9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4980:	210a      	movs	r1, #10
   b4982:	f7ff fcd3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(35, 22, 46), WAIT_TIME);
   b4986:	222e      	movs	r2, #46	; 0x2e
   b4988:	2116      	movs	r1, #22
   b498a:	2023      	movs	r0, #35	; 0x23
   b498c:	f001 ffd1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4990:	210a      	movs	r1, #10
   b4992:	f7ff fccb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(35, 20, 44), WAIT_TIME);
   b4996:	222c      	movs	r2, #44	; 0x2c
   b4998:	2114      	movs	r1, #20
   b499a:	2023      	movs	r0, #35	; 0x23
   b499c:	f001 ffc9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b49a0:	210a      	movs	r1, #10
   b49a2:	f7ff fcc3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(34, 18, 43), WAIT_TIME);
   b49a6:	222b      	movs	r2, #43	; 0x2b
   b49a8:	2112      	movs	r1, #18
   b49aa:	2022      	movs	r0, #34	; 0x22
   b49ac:	f001 ffc1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b49b0:	210a      	movs	r1, #10
   b49b2:	f7ff fcbb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(34, 16, 41), WAIT_TIME);
   b49b6:	2229      	movs	r2, #41	; 0x29
   b49b8:	2110      	movs	r1, #16
   b49ba:	2022      	movs	r0, #34	; 0x22
   b49bc:	f001 ffb9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b49c0:	210a      	movs	r1, #10
   b49c2:	f7ff fcb3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(33, 14, 40), WAIT_TIME);
   b49c6:	2228      	movs	r2, #40	; 0x28
   b49c8:	210e      	movs	r1, #14
   b49ca:	2021      	movs	r0, #33	; 0x21
   b49cc:	f001 ffb1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b49d0:	210a      	movs	r1, #10
   b49d2:	f7ff fcab 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(33, 12, 39), WAIT_TIME); // purple/violet
   b49d6:	2227      	movs	r2, #39	; 0x27
   b49d8:	210c      	movs	r1, #12
   b49da:	2021      	movs	r0, #33	; 0x21
   b49dc:	f001 ffa9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b49e0:	210a      	movs	r1, #10
   b49e2:	f7ff fca3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(32, 10, 37), WAIT_TIME);
   b49e6:	2225      	movs	r2, #37	; 0x25
   b49e8:	210a      	movs	r1, #10
   b49ea:	2020      	movs	r0, #32
   b49ec:	f001 ffa1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b49f0:	210a      	movs	r1, #10
   b49f2:	f7ff fc9b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(32, 8, 36), WAIT_TIME);
   b49f6:	2224      	movs	r2, #36	; 0x24
   b49f8:	2108      	movs	r1, #8
   b49fa:	2020      	movs	r0, #32
   b49fc:	f001 ff99 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a00:	210a      	movs	r1, #10
   b4a02:	f7ff fc93 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(31, 6, 34), WAIT_TIME);
   b4a06:	2222      	movs	r2, #34	; 0x22
   b4a08:	2106      	movs	r1, #6
   b4a0a:	201f      	movs	r0, #31
   b4a0c:	f001 ff91 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a10:	210a      	movs	r1, #10
   b4a12:	f7ff fc8b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(31, 4, 33), WAIT_TIME);
   b4a16:	2221      	movs	r2, #33	; 0x21
   b4a18:	2104      	movs	r1, #4
   b4a1a:	201f      	movs	r0, #31
   b4a1c:	f001 ff89 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a20:	210a      	movs	r1, #10
   b4a22:	f7ff fc83 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(30, 2, 31), WAIT_TIME);
   b4a26:	221f      	movs	r2, #31
   b4a28:	2102      	movs	r1, #2
   b4a2a:	201e      	movs	r0, #30
   b4a2c:	f001 ff81 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a30:	210a      	movs	r1, #10
   b4a32:	f7ff fc7b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(30, 0, 30), WAIT_TIME); // violet
   b4a36:	221e      	movs	r2, #30
   b4a38:	4610      	mov	r0, r2
   b4a3a:	2100      	movs	r1, #0
   b4a3c:	f001 ff79 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a40:	210a      	movs	r1, #10
   b4a42:	f7ff fc73 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(30, 2, 31), WAIT_TIME);
   b4a46:	221f      	movs	r2, #31
   b4a48:	2102      	movs	r1, #2
   b4a4a:	201e      	movs	r0, #30
   b4a4c:	f001 ff71 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a50:	210a      	movs	r1, #10
   b4a52:	f7ff fc6b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(31, 4, 33), WAIT_TIME);
   b4a56:	2221      	movs	r2, #33	; 0x21
   b4a58:	2104      	movs	r1, #4
   b4a5a:	201f      	movs	r0, #31
   b4a5c:	f001 ff69 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a60:	210a      	movs	r1, #10
   b4a62:	f7ff fc63 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(31, 6, 34), WAIT_TIME);
   b4a66:	2222      	movs	r2, #34	; 0x22
   b4a68:	2106      	movs	r1, #6
   b4a6a:	201f      	movs	r0, #31
   b4a6c:	f001 ff61 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a70:	210a      	movs	r1, #10
   b4a72:	f7ff fc5b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(32, 8, 36), WAIT_TIME);
   b4a76:	2224      	movs	r2, #36	; 0x24
   b4a78:	2108      	movs	r1, #8
   b4a7a:	2020      	movs	r0, #32
   b4a7c:	f001 ff59 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a80:	210a      	movs	r1, #10
   b4a82:	f7ff fc53 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(32, 10, 37), WAIT_TIME);
   b4a86:	2225      	movs	r2, #37	; 0x25
   b4a88:	210a      	movs	r1, #10
   b4a8a:	2020      	movs	r0, #32
   b4a8c:	f001 ff51 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4a90:	210a      	movs	r1, #10
   b4a92:	f7ff fc4b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(33, 12, 39), WAIT_TIME); // violet/purple
   b4a96:	2227      	movs	r2, #39	; 0x27
   b4a98:	210c      	movs	r1, #12
   b4a9a:	2021      	movs	r0, #33	; 0x21
   b4a9c:	f001 ff49 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4aa0:	210a      	movs	r1, #10
   b4aa2:	f7ff fc43 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(33, 14, 40), WAIT_TIME);
   b4aa6:	2228      	movs	r2, #40	; 0x28
   b4aa8:	210e      	movs	r1, #14
   b4aaa:	2021      	movs	r0, #33	; 0x21
   b4aac:	f001 ff41 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ab0:	210a      	movs	r1, #10
   b4ab2:	f7ff fc3b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(34, 16, 41), WAIT_TIME);
   b4ab6:	2229      	movs	r2, #41	; 0x29
   b4ab8:	2110      	movs	r1, #16
   b4aba:	2022      	movs	r0, #34	; 0x22
   b4abc:	f001 ff39 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ac0:	210a      	movs	r1, #10
   b4ac2:	f7ff fc33 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(34, 18, 43), WAIT_TIME);
   b4ac6:	222b      	movs	r2, #43	; 0x2b
   b4ac8:	2112      	movs	r1, #18
   b4aca:	2022      	movs	r0, #34	; 0x22
   b4acc:	f001 ff31 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ad0:	210a      	movs	r1, #10
   b4ad2:	f7ff fc2b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(35, 20, 44), WAIT_TIME);
   b4ad6:	222c      	movs	r2, #44	; 0x2c
   b4ad8:	2114      	movs	r1, #20
   b4ada:	2023      	movs	r0, #35	; 0x23
   b4adc:	f001 ff29 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ae0:	210a      	movs	r1, #10
   b4ae2:	f7ff fc23 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(35, 22, 46), WAIT_TIME);
   b4ae6:	222e      	movs	r2, #46	; 0x2e
   b4ae8:	2116      	movs	r1, #22
   b4aea:	2023      	movs	r0, #35	; 0x23
   b4aec:	f001 ff21 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4af0:	210a      	movs	r1, #10
   b4af2:	f7ff fc1b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(36, 24, 48), WAIT_TIME); // purple
   b4af6:	2230      	movs	r2, #48	; 0x30
   b4af8:	2118      	movs	r1, #24
   b4afa:	2024      	movs	r0, #36	; 0x24
   b4afc:	f001 ff19 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b00:	210a      	movs	r1, #10
   b4b02:	f7ff fc13 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(38, 22, 49), WAIT_TIME);
   b4b06:	2231      	movs	r2, #49	; 0x31
   b4b08:	2116      	movs	r1, #22
   b4b0a:	2026      	movs	r0, #38	; 0x26
   b4b0c:	f001 ff11 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b10:	210a      	movs	r1, #10
   b4b12:	f7ff fc0b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(40, 20, 50), WAIT_TIME);
   b4b16:	2232      	movs	r2, #50	; 0x32
   b4b18:	2114      	movs	r1, #20
   b4b1a:	2028      	movs	r0, #40	; 0x28
   b4b1c:	f001 ff09 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b20:	210a      	movs	r1, #10
   b4b22:	f7ff fc03 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(42, 18, 51), WAIT_TIME);
   b4b26:	2233      	movs	r2, #51	; 0x33
   b4b28:	2112      	movs	r1, #18
   b4b2a:	202a      	movs	r0, #42	; 0x2a
   b4b2c:	f001 ff01 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b30:	210a      	movs	r1, #10
   b4b32:	f7ff fbfb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(44, 16, 52), WAIT_TIME);
   b4b36:	2234      	movs	r2, #52	; 0x34
   b4b38:	2110      	movs	r1, #16
   b4b3a:	202c      	movs	r0, #44	; 0x2c
   b4b3c:	f001 fef9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b40:	210a      	movs	r1, #10
   b4b42:	f7ff fbf3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(46, 14, 53), WAIT_TIME);
   b4b46:	2235      	movs	r2, #53	; 0x35
   b4b48:	210e      	movs	r1, #14
   b4b4a:	202e      	movs	r0, #46	; 0x2e
   b4b4c:	f001 fef1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b50:	210a      	movs	r1, #10
   b4b52:	f7ff fbeb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(48, 12, 54), WAIT_TIME); // purple/magenta
   b4b56:	2236      	movs	r2, #54	; 0x36
   b4b58:	210c      	movs	r1, #12
   b4b5a:	2030      	movs	r0, #48	; 0x30
   b4b5c:	f001 fee9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b60:	210a      	movs	r1, #10
   b4b62:	f7ff fbe3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(50, 10, 55), WAIT_TIME);
   b4b66:	2237      	movs	r2, #55	; 0x37
   b4b68:	210a      	movs	r1, #10
   b4b6a:	2032      	movs	r0, #50	; 0x32
   b4b6c:	f001 fee1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b70:	210a      	movs	r1, #10
   b4b72:	f7ff fbdb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(52, 8, 56), WAIT_TIME);
   b4b76:	2238      	movs	r2, #56	; 0x38
   b4b78:	2108      	movs	r1, #8
   b4b7a:	2034      	movs	r0, #52	; 0x34
   b4b7c:	f001 fed9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b80:	210a      	movs	r1, #10
   b4b82:	f7ff fbd3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(54, 6, 57), WAIT_TIME);
   b4b86:	2239      	movs	r2, #57	; 0x39
   b4b88:	2106      	movs	r1, #6
   b4b8a:	2036      	movs	r0, #54	; 0x36
   b4b8c:	f001 fed1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4b90:	210a      	movs	r1, #10
   b4b92:	f7ff fbcb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(56, 4, 58), WAIT_TIME);
   b4b96:	223a      	movs	r2, #58	; 0x3a
   b4b98:	2104      	movs	r1, #4
   b4b9a:	2038      	movs	r0, #56	; 0x38
   b4b9c:	f001 fec9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ba0:	210a      	movs	r1, #10
   b4ba2:	f7ff fbc3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(58, 2, 59), WAIT_TIME);
   b4ba6:	223b      	movs	r2, #59	; 0x3b
   b4ba8:	2102      	movs	r1, #2
   b4baa:	203a      	movs	r0, #58	; 0x3a
   b4bac:	f001 fec1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4bb0:	210a      	movs	r1, #10
   b4bb2:	f7ff fbbb 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(60, 0, 60), WAIT_TIME); // magenta
   b4bb6:	223c      	movs	r2, #60	; 0x3c
   b4bb8:	4610      	mov	r0, r2
   b4bba:	2100      	movs	r1, #0
   b4bbc:	f001 feb9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4bc0:	210a      	movs	r1, #10
   b4bc2:	f7ff fbb3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(58, 2, 59), WAIT_TIME);
   b4bc6:	223b      	movs	r2, #59	; 0x3b
   b4bc8:	2102      	movs	r1, #2
   b4bca:	203a      	movs	r0, #58	; 0x3a
   b4bcc:	f001 feb1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4bd0:	210a      	movs	r1, #10
   b4bd2:	f7ff fbab 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(56, 4, 58), WAIT_TIME);
   b4bd6:	223a      	movs	r2, #58	; 0x3a
   b4bd8:	2104      	movs	r1, #4
   b4bda:	2038      	movs	r0, #56	; 0x38
   b4bdc:	f001 fea9 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4be0:	210a      	movs	r1, #10
   b4be2:	f7ff fba3 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(54, 6, 57), WAIT_TIME);
   b4be6:	2239      	movs	r2, #57	; 0x39
   b4be8:	2106      	movs	r1, #6
   b4bea:	2036      	movs	r0, #54	; 0x36
   b4bec:	f001 fea1 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4bf0:	210a      	movs	r1, #10
   b4bf2:	f7ff fb9b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(52, 8, 56), WAIT_TIME);
   b4bf6:	2238      	movs	r2, #56	; 0x38
   b4bf8:	2108      	movs	r1, #8
   b4bfa:	2034      	movs	r0, #52	; 0x34
   b4bfc:	f001 fe99 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c00:	210a      	movs	r1, #10
   b4c02:	f7ff fb93 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(50, 10, 55), WAIT_TIME);
   b4c06:	2237      	movs	r2, #55	; 0x37
   b4c08:	210a      	movs	r1, #10
   b4c0a:	2032      	movs	r0, #50	; 0x32
   b4c0c:	f001 fe91 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c10:	210a      	movs	r1, #10
   b4c12:	f7ff fb8b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(48, 12, 54), WAIT_TIME); // magenta/purple
   b4c16:	2236      	movs	r2, #54	; 0x36
   b4c18:	210c      	movs	r1, #12
   b4c1a:	2030      	movs	r0, #48	; 0x30
   b4c1c:	f001 fe89 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c20:	210a      	movs	r1, #10
   b4c22:	f7ff fb83 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(46, 14, 53), WAIT_TIME);
   b4c26:	2235      	movs	r2, #53	; 0x35
   b4c28:	210e      	movs	r1, #14
   b4c2a:	202e      	movs	r0, #46	; 0x2e
   b4c2c:	f001 fe81 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c30:	210a      	movs	r1, #10
   b4c32:	f7ff fb7b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(44, 16, 52), WAIT_TIME);
   b4c36:	2234      	movs	r2, #52	; 0x34
   b4c38:	2110      	movs	r1, #16
   b4c3a:	202c      	movs	r0, #44	; 0x2c
   b4c3c:	f001 fe79 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c40:	210a      	movs	r1, #10
   b4c42:	f7ff fb73 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(42, 18, 51), WAIT_TIME);
   b4c46:	2233      	movs	r2, #51	; 0x33
   b4c48:	2112      	movs	r1, #18
   b4c4a:	202a      	movs	r0, #42	; 0x2a
   b4c4c:	f001 fe71 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c50:	210a      	movs	r1, #10
   b4c52:	f7ff fb6b 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(40, 20, 50), WAIT_TIME);
   b4c56:	2232      	movs	r2, #50	; 0x32
   b4c58:	2114      	movs	r1, #20
   b4c5a:	2028      	movs	r0, #40	; 0x28
   b4c5c:	f001 fe69 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c60:	210a      	movs	r1, #10
   b4c62:	f7ff fb63 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(38, 22, 49), WAIT_TIME);
   b4c66:	2116      	movs	r1, #22
   b4c68:	2231      	movs	r2, #49	; 0x31
   b4c6a:	2026      	movs	r0, #38	; 0x26
   b4c6c:	f001 fe61 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
}
   b4c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    colorWipe(strip.Color(38, 22, 49), WAIT_TIME);
   b4c74:	210a      	movs	r1, #10
   b4c76:	f7ff bb59 	b.w	b432c <_Z9colorWipemh>

000b4c7a <_Z11GreenChangev>:
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME); // green
   b4c7a:	2200      	movs	r2, #0
{
   b4c7c:	b508      	push	{r3, lr}
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME); // green
   b4c7e:	4610      	mov	r0, r2
   b4c80:	211e      	movs	r1, #30
   b4c82:	f001 fe56 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c86:	210a      	movs	r1, #10
   b4c88:	f7ff fb50 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 32, 0), WAIT_TIME);
   b4c8c:	2200      	movs	r2, #0
   b4c8e:	4610      	mov	r0, r2
   b4c90:	2120      	movs	r1, #32
   b4c92:	f001 fe4e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4c96:	210a      	movs	r1, #10
   b4c98:	f7ff fb48 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 35, 0), WAIT_TIME);
   b4c9c:	2200      	movs	r2, #0
   b4c9e:	4610      	mov	r0, r2
   b4ca0:	2123      	movs	r1, #35	; 0x23
   b4ca2:	f001 fe46 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ca6:	210a      	movs	r1, #10
   b4ca8:	f7ff fb40 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 37, 0), WAIT_TIME);
   b4cac:	2200      	movs	r2, #0
   b4cae:	4610      	mov	r0, r2
   b4cb0:	2125      	movs	r1, #37	; 0x25
   b4cb2:	f001 fe3e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4cb6:	210a      	movs	r1, #10
   b4cb8:	f7ff fb38 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 40, 0), WAIT_TIME);
   b4cbc:	2200      	movs	r2, #0
   b4cbe:	4610      	mov	r0, r2
   b4cc0:	2128      	movs	r1, #40	; 0x28
   b4cc2:	f001 fe36 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4cc6:	210a      	movs	r1, #10
   b4cc8:	f7ff fb30 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 42, 0), WAIT_TIME);
   b4ccc:	2200      	movs	r2, #0
   b4cce:	4610      	mov	r0, r2
   b4cd0:	212a      	movs	r1, #42	; 0x2a
   b4cd2:	f001 fe2e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4cd6:	210a      	movs	r1, #10
   b4cd8:	f7ff fb28 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 45, 0), WAIT_TIME); // green/lime
   b4cdc:	2200      	movs	r2, #0
   b4cde:	4610      	mov	r0, r2
   b4ce0:	212d      	movs	r1, #45	; 0x2d
   b4ce2:	f001 fe26 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ce6:	210a      	movs	r1, #10
   b4ce8:	f7ff fb20 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 47, 0), WAIT_TIME);
   b4cec:	2200      	movs	r2, #0
   b4cee:	4610      	mov	r0, r2
   b4cf0:	212f      	movs	r1, #47	; 0x2f
   b4cf2:	f001 fe1e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4cf6:	210a      	movs	r1, #10
   b4cf8:	f7ff fb18 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 49, 0), WAIT_TIME);
   b4cfc:	2200      	movs	r2, #0
   b4cfe:	4610      	mov	r0, r2
   b4d00:	2131      	movs	r1, #49	; 0x31
   b4d02:	f001 fe16 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d06:	210a      	movs	r1, #10
   b4d08:	f7ff fb10 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 52, 0), WAIT_TIME);
   b4d0c:	2200      	movs	r2, #0
   b4d0e:	4610      	mov	r0, r2
   b4d10:	2134      	movs	r1, #52	; 0x34
   b4d12:	f001 fe0e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d16:	210a      	movs	r1, #10
   b4d18:	f7ff fb08 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 55, 0), WAIT_TIME);
   b4d1c:	2200      	movs	r2, #0
   b4d1e:	4610      	mov	r0, r2
   b4d20:	2137      	movs	r1, #55	; 0x37
   b4d22:	f001 fe06 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d26:	210a      	movs	r1, #10
   b4d28:	f7ff fb00 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 57, 0), WAIT_TIME);
   b4d2c:	2200      	movs	r2, #0
   b4d2e:	4610      	mov	r0, r2
   b4d30:	2139      	movs	r1, #57	; 0x39
   b4d32:	f001 fdfe 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d36:	210a      	movs	r1, #10
   b4d38:	f7ff faf8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 60, 0), WAIT_TIME); // lime
   b4d3c:	2200      	movs	r2, #0
   b4d3e:	4610      	mov	r0, r2
   b4d40:	213c      	movs	r1, #60	; 0x3c
   b4d42:	f001 fdf6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d46:	210a      	movs	r1, #10
   b4d48:	f7ff faf0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 57, 0), WAIT_TIME);
   b4d4c:	2200      	movs	r2, #0
   b4d4e:	4610      	mov	r0, r2
   b4d50:	2139      	movs	r1, #57	; 0x39
   b4d52:	f001 fdee 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d56:	210a      	movs	r1, #10
   b4d58:	f7ff fae8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 55, 0), WAIT_TIME);
   b4d5c:	2200      	movs	r2, #0
   b4d5e:	4610      	mov	r0, r2
   b4d60:	2137      	movs	r1, #55	; 0x37
   b4d62:	f001 fde6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d66:	210a      	movs	r1, #10
   b4d68:	f7ff fae0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 52, 0), WAIT_TIME);
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	4610      	mov	r0, r2
   b4d70:	2134      	movs	r1, #52	; 0x34
   b4d72:	f001 fdde 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d76:	210a      	movs	r1, #10
   b4d78:	f7ff fad8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 49, 0), WAIT_TIME);
   b4d7c:	2200      	movs	r2, #0
   b4d7e:	4610      	mov	r0, r2
   b4d80:	2131      	movs	r1, #49	; 0x31
   b4d82:	f001 fdd6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d86:	210a      	movs	r1, #10
   b4d88:	f7ff fad0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 47, 0), WAIT_TIME);
   b4d8c:	2200      	movs	r2, #0
   b4d8e:	4610      	mov	r0, r2
   b4d90:	212f      	movs	r1, #47	; 0x2f
   b4d92:	f001 fdce 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4d96:	210a      	movs	r1, #10
   b4d98:	f7ff fac8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 45, 0), WAIT_TIME); // lime/green
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	4610      	mov	r0, r2
   b4da0:	212d      	movs	r1, #45	; 0x2d
   b4da2:	f001 fdc6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4da6:	210a      	movs	r1, #10
   b4da8:	f7ff fac0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 42, 0), WAIT_TIME);
   b4dac:	2200      	movs	r2, #0
   b4dae:	4610      	mov	r0, r2
   b4db0:	212a      	movs	r1, #42	; 0x2a
   b4db2:	f001 fdbe 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4db6:	210a      	movs	r1, #10
   b4db8:	f7ff fab8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 40, 0), WAIT_TIME);
   b4dbc:	2200      	movs	r2, #0
   b4dbe:	4610      	mov	r0, r2
   b4dc0:	2128      	movs	r1, #40	; 0x28
   b4dc2:	f001 fdb6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4dc6:	210a      	movs	r1, #10
   b4dc8:	f7ff fab0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 37, 0), WAIT_TIME);
   b4dcc:	2200      	movs	r2, #0
   b4dce:	4610      	mov	r0, r2
   b4dd0:	2125      	movs	r1, #37	; 0x25
   b4dd2:	f001 fdae 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4dd6:	210a      	movs	r1, #10
   b4dd8:	f7ff faa8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 35, 0), WAIT_TIME);
   b4ddc:	2200      	movs	r2, #0
   b4dde:	4610      	mov	r0, r2
   b4de0:	2123      	movs	r1, #35	; 0x23
   b4de2:	f001 fda6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4de6:	210a      	movs	r1, #10
   b4de8:	f7ff faa0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 32, 0), WAIT_TIME);
   b4dec:	2200      	movs	r2, #0
   b4dee:	4610      	mov	r0, r2
   b4df0:	2120      	movs	r1, #32
   b4df2:	f001 fd9e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4df6:	210a      	movs	r1, #10
   b4df8:	f7ff fa98 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME); // green
   b4dfc:	2200      	movs	r2, #0
   b4dfe:	4610      	mov	r0, r2
   b4e00:	211e      	movs	r1, #30
   b4e02:	f001 fd96 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e06:	210a      	movs	r1, #10
   b4e08:	f7ff fa90 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME);
   b4e0c:	2200      	movs	r2, #0
   b4e0e:	4610      	mov	r0, r2
   b4e10:	211e      	movs	r1, #30
   b4e12:	f001 fd8e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e16:	210a      	movs	r1, #10
   b4e18:	f7ff fa88 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(1, 31, 1), WAIT_TIME);
   b4e1c:	2201      	movs	r2, #1
   b4e1e:	4610      	mov	r0, r2
   b4e20:	211f      	movs	r1, #31
   b4e22:	f001 fd86 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e26:	210a      	movs	r1, #10
   b4e28:	f7ff fa80 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(1, 31, 1), WAIT_TIME);
   b4e2c:	2201      	movs	r2, #1
   b4e2e:	4610      	mov	r0, r2
   b4e30:	211f      	movs	r1, #31
   b4e32:	f001 fd7e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e36:	210a      	movs	r1, #10
   b4e38:	f7ff fa78 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(2, 32, 2), WAIT_TIME);
   b4e3c:	2202      	movs	r2, #2
   b4e3e:	4610      	mov	r0, r2
   b4e40:	2120      	movs	r1, #32
   b4e42:	f001 fd76 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e46:	210a      	movs	r1, #10
   b4e48:	f7ff fa70 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(2, 32, 2), WAIT_TIME);
   b4e4c:	2202      	movs	r2, #2
   b4e4e:	4610      	mov	r0, r2
   b4e50:	2120      	movs	r1, #32
   b4e52:	f001 fd6e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e56:	210a      	movs	r1, #10
   b4e58:	f7ff fa68 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(3, 33, 3), WAIT_TIME); // green/seagreen
   b4e5c:	2203      	movs	r2, #3
   b4e5e:	4610      	mov	r0, r2
   b4e60:	2121      	movs	r1, #33	; 0x21
   b4e62:	f001 fd66 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e66:	210a      	movs	r1, #10
   b4e68:	f7ff fa60 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(3, 33, 3), WAIT_TIME);
   b4e6c:	2203      	movs	r2, #3
   b4e6e:	4610      	mov	r0, r2
   b4e70:	2121      	movs	r1, #33	; 0x21
   b4e72:	f001 fd5e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e76:	210a      	movs	r1, #10
   b4e78:	f7ff fa58 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(4, 34, 4), WAIT_TIME);
   b4e7c:	2204      	movs	r2, #4
   b4e7e:	4610      	mov	r0, r2
   b4e80:	2122      	movs	r1, #34	; 0x22
   b4e82:	f001 fd56 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e86:	210a      	movs	r1, #10
   b4e88:	f7ff fa50 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(4, 34, 4), WAIT_TIME);
   b4e8c:	2204      	movs	r2, #4
   b4e8e:	4610      	mov	r0, r2
   b4e90:	2122      	movs	r1, #34	; 0x22
   b4e92:	f001 fd4e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4e96:	210a      	movs	r1, #10
   b4e98:	f7ff fa48 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(5, 35, 5), WAIT_TIME);
   b4e9c:	2205      	movs	r2, #5
   b4e9e:	4610      	mov	r0, r2
   b4ea0:	2123      	movs	r1, #35	; 0x23
   b4ea2:	f001 fd46 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ea6:	210a      	movs	r1, #10
   b4ea8:	f7ff fa40 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(5, 35, 5), WAIT_TIME);
   b4eac:	2205      	movs	r2, #5
   b4eae:	4610      	mov	r0, r2
   b4eb0:	2123      	movs	r1, #35	; 0x23
   b4eb2:	f001 fd3e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4eb6:	210a      	movs	r1, #10
   b4eb8:	f7ff fa38 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(6, 36, 6), WAIT_TIME); // seagreen
   b4ebc:	2206      	movs	r2, #6
   b4ebe:	4610      	mov	r0, r2
   b4ec0:	2124      	movs	r1, #36	; 0x24
   b4ec2:	f001 fd36 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ec6:	210a      	movs	r1, #10
   b4ec8:	f7ff fa30 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(5, 35, 5), WAIT_TIME);
   b4ecc:	2205      	movs	r2, #5
   b4ece:	4610      	mov	r0, r2
   b4ed0:	2123      	movs	r1, #35	; 0x23
   b4ed2:	f001 fd2e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ed6:	210a      	movs	r1, #10
   b4ed8:	f7ff fa28 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(5, 35, 5), WAIT_TIME);
   b4edc:	2205      	movs	r2, #5
   b4ede:	4610      	mov	r0, r2
   b4ee0:	2123      	movs	r1, #35	; 0x23
   b4ee2:	f001 fd26 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ee6:	210a      	movs	r1, #10
   b4ee8:	f7ff fa20 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(4, 34, 4), WAIT_TIME);
   b4eec:	2204      	movs	r2, #4
   b4eee:	4610      	mov	r0, r2
   b4ef0:	2122      	movs	r1, #34	; 0x22
   b4ef2:	f001 fd1e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4ef6:	210a      	movs	r1, #10
   b4ef8:	f7ff fa18 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(4, 34, 4), WAIT_TIME);
   b4efc:	2204      	movs	r2, #4
   b4efe:	4610      	mov	r0, r2
   b4f00:	2122      	movs	r1, #34	; 0x22
   b4f02:	f001 fd16 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f06:	210a      	movs	r1, #10
   b4f08:	f7ff fa10 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(3, 33, 3), WAIT_TIME);
   b4f0c:	2203      	movs	r2, #3
   b4f0e:	4610      	mov	r0, r2
   b4f10:	2121      	movs	r1, #33	; 0x21
   b4f12:	f001 fd0e 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f16:	210a      	movs	r1, #10
   b4f18:	f7ff fa08 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(3, 33, 3), WAIT_TIME); // seagreen/green
   b4f1c:	2203      	movs	r2, #3
   b4f1e:	4610      	mov	r0, r2
   b4f20:	2121      	movs	r1, #33	; 0x21
   b4f22:	f001 fd06 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f26:	210a      	movs	r1, #10
   b4f28:	f7ff fa00 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(2, 32, 2), WAIT_TIME);
   b4f2c:	2202      	movs	r2, #2
   b4f2e:	4610      	mov	r0, r2
   b4f30:	2120      	movs	r1, #32
   b4f32:	f001 fcfe 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f36:	210a      	movs	r1, #10
   b4f38:	f7ff f9f8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(2, 32, 2), WAIT_TIME);
   b4f3c:	2202      	movs	r2, #2
   b4f3e:	4610      	mov	r0, r2
   b4f40:	2120      	movs	r1, #32
   b4f42:	f001 fcf6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f46:	210a      	movs	r1, #10
   b4f48:	f7ff f9f0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(1, 31, 1), WAIT_TIME);
   b4f4c:	2201      	movs	r2, #1
   b4f4e:	4610      	mov	r0, r2
   b4f50:	211f      	movs	r1, #31
   b4f52:	f001 fcee 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f56:	210a      	movs	r1, #10
   b4f58:	f7ff f9e8 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(1, 31, 1), WAIT_TIME);
   b4f5c:	2201      	movs	r2, #1
   b4f5e:	4610      	mov	r0, r2
   b4f60:	211f      	movs	r1, #31
   b4f62:	f001 fce6 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   b4f66:	210a      	movs	r1, #10
   b4f68:	f7ff f9e0 	bl	b432c <_Z9colorWipemh>
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME);
   b4f6c:	2200      	movs	r2, #0
   b4f6e:	211e      	movs	r1, #30
   b4f70:	4610      	mov	r0, r2
   b4f72:	f001 fcde 	bl	b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>
}
   b4f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    colorWipe(strip.Color(0, 30, 0), WAIT_TIME);
   b4f7a:	210a      	movs	r1, #10
   b4f7c:	f7ff b9d6 	b.w	b432c <_Z9colorWipemh>

000b4f80 <_Z9lightFuncv>:
{
   b4f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int LightOne = digitalRead(light1);
   b4f82:	2006      	movs	r0, #6
   b4f84:	f003 f844 	bl	b8010 <digitalRead>
   b4f88:	4607      	mov	r7, r0
    int LightTwo = digitalRead(light2);
   b4f8a:	2007      	movs	r0, #7
   b4f8c:	f003 f840 	bl	b8010 <digitalRead>
   b4f90:	4606      	mov	r6, r0
    int LightThree = digitalRead(light3);
   b4f92:	2008      	movs	r0, #8
   b4f94:	f003 f83c 	bl	b8010 <digitalRead>
   b4f98:	4605      	mov	r5, r0
    int LightFour = digitalRead(light4);
   b4f9a:	2003      	movs	r0, #3
   b4f9c:	f003 f838 	bl	b8010 <digitalRead>
    if (LightOne == true)
   b4fa0:	2f01      	cmp	r7, #1
    int LightFour = digitalRead(light4);
   b4fa2:	4604      	mov	r4, r0
    if (LightOne == true)
   b4fa4:	d10b      	bne.n	b4fbe <_Z9lightFuncv+0x3e>
        client.publish("CapstoneNode", "Light 1!");
   b4fa6:	4a1c      	ldr	r2, [pc, #112]	; (b5018 <_Z9lightFuncv+0x98>)
   b4fa8:	491c      	ldr	r1, [pc, #112]	; (b501c <_Z9lightFuncv+0x9c>)
   b4faa:	481d      	ldr	r0, [pc, #116]	; (b5020 <_Z9lightFuncv+0xa0>)
   b4fac:	f000 fba1 	bl	b56f2 <_ZN4MQTT7publishEPKcS1_>
        Serial.println("L1");
   b4fb0:	f002 fec6 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4fb4:	491b      	ldr	r1, [pc, #108]	; (b5024 <_Z9lightFuncv+0xa4>)
   b4fb6:	f002 f982 	bl	b72be <_ZN5Print7printlnEPKc>
        PurpleChange();
   b4fba:	f7ff fcdb 	bl	b4974 <_Z12PurpleChangev>
    if (LightTwo == true)
   b4fbe:	2e01      	cmp	r6, #1
   b4fc0:	d10b      	bne.n	b4fda <_Z9lightFuncv+0x5a>
        client.publish("CapstoneNode", "Light 2!");
   b4fc2:	4a19      	ldr	r2, [pc, #100]	; (b5028 <_Z9lightFuncv+0xa8>)
   b4fc4:	4915      	ldr	r1, [pc, #84]	; (b501c <_Z9lightFuncv+0x9c>)
   b4fc6:	4816      	ldr	r0, [pc, #88]	; (b5020 <_Z9lightFuncv+0xa0>)
   b4fc8:	f000 fb93 	bl	b56f2 <_ZN4MQTT7publishEPKcS1_>
        Serial.println("L2");
   b4fcc:	f002 feb8 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4fd0:	4916      	ldr	r1, [pc, #88]	; (b502c <_Z9lightFuncv+0xac>)
   b4fd2:	f002 f974 	bl	b72be <_ZN5Print7printlnEPKc>
        RedChange();
   b4fd6:	f7ff fb4a 	bl	b466e <_Z9RedChangev>
    if (LightThree == true)
   b4fda:	2d01      	cmp	r5, #1
   b4fdc:	d10b      	bne.n	b4ff6 <_Z9lightFuncv+0x76>
        client.publish("CapstoneNode", "Light 3!");
   b4fde:	4a14      	ldr	r2, [pc, #80]	; (b5030 <_Z9lightFuncv+0xb0>)
   b4fe0:	490e      	ldr	r1, [pc, #56]	; (b501c <_Z9lightFuncv+0x9c>)
   b4fe2:	480f      	ldr	r0, [pc, #60]	; (b5020 <_Z9lightFuncv+0xa0>)
   b4fe4:	f000 fb85 	bl	b56f2 <_ZN4MQTT7publishEPKcS1_>
        Serial.println("L3");
   b4fe8:	f002 feaa 	bl	b7d40 <_Z16_fetch_usbserialv>
   b4fec:	4911      	ldr	r1, [pc, #68]	; (b5034 <_Z9lightFuncv+0xb4>)
   b4fee:	f002 f966 	bl	b72be <_ZN5Print7printlnEPKc>
        BlueChange();
   b4ff2:	f7ff f9b9 	bl	b4368 <_Z10BlueChangev>
    if (LightFour == true)
   b4ff6:	2c01      	cmp	r4, #1
   b4ff8:	d10d      	bne.n	b5016 <_Z9lightFuncv+0x96>
        client.publish("CapstoneNode", "Light 4!");
   b4ffa:	4a0f      	ldr	r2, [pc, #60]	; (b5038 <_Z9lightFuncv+0xb8>)
   b4ffc:	4907      	ldr	r1, [pc, #28]	; (b501c <_Z9lightFuncv+0x9c>)
   b4ffe:	4808      	ldr	r0, [pc, #32]	; (b5020 <_Z9lightFuncv+0xa0>)
   b5000:	f000 fb77 	bl	b56f2 <_ZN4MQTT7publishEPKcS1_>
        Serial.println("L4");
   b5004:	f002 fe9c 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5008:	490c      	ldr	r1, [pc, #48]	; (b503c <_Z9lightFuncv+0xbc>)
   b500a:	f002 f958 	bl	b72be <_ZN5Print7printlnEPKc>
}
   b500e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        GreenChange();
   b5012:	f7ff be32 	b.w	b4c7a <_Z11GreenChangev>
}
   b5016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5018:	000b859f 	.word	0x000b859f
   b501c:	000b85a8 	.word	0x000b85a8
   b5020:	2003e638 	.word	0x2003e638
   b5024:	000b85b5 	.word	0x000b85b5
   b5028:	000b85b8 	.word	0x000b85b8
   b502c:	000b85c1 	.word	0x000b85c1
   b5030:	000b85c4 	.word	0x000b85c4
   b5034:	000b85cd 	.word	0x000b85cd
   b5038:	000b85d0 	.word	0x000b85d0
   b503c:	000b85d9 	.word	0x000b85d9

000b5040 <_GLOBAL__sub_I_CNCT>:
   b5040:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b5042:	2100      	movs	r1, #0
   b5044:	2001      	movs	r0, #1
   b5046:	f001 fe5b 	bl	b6d00 <system_thread_set_state>
Adafruit_NeoPixel strip(PIXEL_COUNT, LIGHT, PIXEL_TYPE);
   b504a:	2302      	movs	r3, #2
   b504c:	2204      	movs	r2, #4
   b504e:	2110      	movs	r1, #16
   b5050:	4809      	ldr	r0, [pc, #36]	; (b5078 <_GLOBAL__sub_I_CNCT+0x38>)
   b5052:	f001 fa6d 	bl	b6530 <_ZN17Adafruit_NeoPixelC1Ethh>
MFRC522 mfrc522(SS_PIN, RST_PIN); // Create MFRC522 instance.
   b5056:	2205      	movs	r2, #5
   b5058:	210e      	movs	r1, #14
   b505a:	4808      	ldr	r0, [pc, #32]	; (b507c <_GLOBAL__sub_I_CNCT+0x3c>)
   b505c:	f000 fcfc 	bl	b5a58 <_ZN7MFRC522C1Ehh>
MQTT client("lab.thewcl.com", 1883, callback);
   b5060:	2300      	movs	r3, #0
   b5062:	9300      	str	r3, [sp, #0]
   b5064:	4906      	ldr	r1, [pc, #24]	; (b5080 <_GLOBAL__sub_I_CNCT+0x40>)
   b5066:	4b07      	ldr	r3, [pc, #28]	; (b5084 <_GLOBAL__sub_I_CNCT+0x44>)
   b5068:	4807      	ldr	r0, [pc, #28]	; (b5088 <_GLOBAL__sub_I_CNCT+0x48>)
   b506a:	f240 725b 	movw	r2, #1883	; 0x75b
   b506e:	f000 f8e9 	bl	b5244 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b5072:	b003      	add	sp, #12
   b5074:	f85d fb04 	ldr.w	pc, [sp], #4
   b5078:	2003e6ac 	.word	0x2003e6ac
   b507c:	2003e698 	.word	0x2003e698
   b5080:	000b85dc 	.word	0x000b85dc
   b5084:	000b40d7 	.word	0x000b40d7
   b5088:	2003e638 	.word	0x2003e638

000b508c <loop>:
{
   b508c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (client.isConnected())
   b508e:	4818      	ldr	r0, [pc, #96]	; (b50f0 <loop+0x64>)
   b5090:	f000 f9b4 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b5094:	b1d8      	cbz	r0, b50ce <loop+0x42>
        if (CNCT == true)
   b5096:	4c17      	ldr	r4, [pc, #92]	; (b50f4 <loop+0x68>)
        client.loop();
   b5098:	4815      	ldr	r0, [pc, #84]	; (b50f0 <loop+0x64>)
   b509a:	f000 fb86 	bl	b57aa <_ZN4MQTT4loopEv>
        if (CNCT == true)
   b509e:	7823      	ldrb	r3, [r4, #0]
   b50a0:	b133      	cbz	r3, b50b0 <loop+0x24>
            Serial.println("Connected");
   b50a2:	f002 fe4d 	bl	b7d40 <_Z16_fetch_usbserialv>
   b50a6:	4914      	ldr	r1, [pc, #80]	; (b50f8 <loop+0x6c>)
   b50a8:	f002 f909 	bl	b72be <_ZN5Print7printlnEPKc>
            CNCT = false;
   b50ac:	2300      	movs	r3, #0
   b50ae:	7023      	strb	r3, [r4, #0]
        lightFunc();
   b50b0:	f7ff ff66 	bl	b4f80 <_Z9lightFuncv>
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial())
   b50b4:	4811      	ldr	r0, [pc, #68]	; (b50fc <loop+0x70>)
   b50b6:	f001 f887 	bl	b61c8 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b50ba:	b1b8      	cbz	r0, b50ec <loop+0x60>
   b50bc:	480f      	ldr	r0, [pc, #60]	; (b50fc <loop+0x70>)
   b50be:	f000 fcbf 	bl	b5a40 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b50c2:	b198      	cbz	r0, b50ec <loop+0x60>
}
   b50c4:	b004      	add	sp, #16
   b50c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        cardScan();
   b50ca:	f7ff b827 	b.w	b411c <_Z8cardScanv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b50ce:	4668      	mov	r0, sp
   b50d0:	f001 fe32 	bl	b6d38 <spark_deviceID>
        client.connect(System.deviceID());
   b50d4:	9900      	ldr	r1, [sp, #0]
   b50d6:	4806      	ldr	r0, [pc, #24]	; (b50f0 <loop+0x64>)
   b50d8:	f000 fa80 	bl	b55dc <_ZN4MQTT7connectEPKc>
   b50dc:	4668      	mov	r0, sp
   b50de:	f002 fa01 	bl	b74e4 <_ZN6StringD1Ev>
        client.subscribe("CapstoneNode");
   b50e2:	4907      	ldr	r1, [pc, #28]	; (b5100 <loop+0x74>)
   b50e4:	4802      	ldr	r0, [pc, #8]	; (b50f0 <loop+0x64>)
   b50e6:	f000 fca8 	bl	b5a3a <_ZN4MQTT9subscribeEPKc>
   b50ea:	e7e3      	b.n	b50b4 <loop+0x28>
}
   b50ec:	b004      	add	sp, #16
   b50ee:	bd10      	pop	{r4, pc}
   b50f0:	2003e638 	.word	0x2003e638
   b50f4:	2003e5bc 	.word	0x2003e5bc
   b50f8:	000b85eb 	.word	0x000b85eb
   b50fc:	2003e698 	.word	0x2003e698
   b5100:	000b85a8 	.word	0x000b85a8

000b5104 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5104:	4770      	bx	lr

000b5106 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5106:	b510      	push	{r4, lr}
  }
   b5108:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b510a:	4604      	mov	r4, r0
  }
   b510c:	f7fe ffd9 	bl	b40c2 <_ZdlPvj>
   b5110:	4620      	mov	r0, r4
   b5112:	bd10      	pop	{r4, pc}

000b5114 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5114:	b40e      	push	{r1, r2, r3}
   b5116:	b503      	push	{r0, r1, lr}
   b5118:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b511a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b511c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5120:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5122:	f002 f8f6 	bl	b7312 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b5126:	b002      	add	sp, #8
   b5128:	f85d eb04 	ldr.w	lr, [sp], #4
   b512c:	b003      	add	sp, #12
   b512e:	4770      	bx	lr

000b5130 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5130:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5132:	4604      	mov	r4, r0
   b5134:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5136:	7922      	ldrb	r2, [r4, #4]
   b5138:	68a3      	ldr	r3, [r4, #8]
   b513a:	b132      	cbz	r2, b514a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b513c:	b9a3      	cbnz	r3, b5168 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b513e:	490b      	ldr	r1, [pc, #44]	; (b516c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5140:	b002      	add	sp, #8
   b5142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5146:	f002 b8a3 	b.w	b7290 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b514a:	4a09      	ldr	r2, [pc, #36]	; (b5170 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b514c:	7b26      	ldrb	r6, [r4, #12]
   b514e:	4d09      	ldr	r5, [pc, #36]	; (b5174 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5150:	4909      	ldr	r1, [pc, #36]	; (b5178 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5152:	7b64      	ldrb	r4, [r4, #13]
   b5154:	2e01      	cmp	r6, #1
   b5156:	bf18      	it	ne
   b5158:	4629      	movne	r1, r5
   b515a:	e9cd 1400 	strd	r1, r4, [sp]
   b515e:	4907      	ldr	r1, [pc, #28]	; (b517c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5160:	f7ff ffd8 	bl	b5114 <_ZN5Print6printfEPKcz>
  }
   b5164:	b002      	add	sp, #8
   b5166:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5168:	4a05      	ldr	r2, [pc, #20]	; (b5180 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b516a:	e7ef      	b.n	b514c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b516c:	000b8606 	.word	0x000b8606
   b5170:	000b8589 	.word	0x000b8589
   b5174:	000b8602 	.word	0x000b8602
   b5178:	000b85fe 	.word	0x000b85fe
   b517c:	000b861c 	.word	0x000b861c
   b5180:	000b85f5 	.word	0x000b85f5

000b5184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b5184:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5186:	4c0b      	ldr	r4, [pc, #44]	; (b51b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5188:	7821      	ldrb	r1, [r4, #0]
   b518a:	f3bf 8f5b 	dmb	ish
   b518e:	f011 0101 	ands.w	r1, r1, #1
   b5192:	d10b      	bne.n	b51ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5194:	4620      	mov	r0, r4
   b5196:	9101      	str	r1, [sp, #4]
   b5198:	f7fe ff95 	bl	b40c6 <__cxa_guard_acquire>
   b519c:	9901      	ldr	r1, [sp, #4]
   b519e:	b128      	cbz	r0, b51ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b51a0:	4805      	ldr	r0, [pc, #20]	; (b51b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b51a2:	f002 f8f3 	bl	b738c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b51a6:	4620      	mov	r0, r4
   b51a8:	f7fe ff92 	bl	b40d0 <__cxa_guard_release>
    }
   b51ac:	4802      	ldr	r0, [pc, #8]	; (b51b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b51ae:	b002      	add	sp, #8
   b51b0:	bd10      	pop	{r4, pc}
   b51b2:	bf00      	nop
   b51b4:	2003e62c 	.word	0x2003e62c
   b51b8:	2003e630 	.word	0x2003e630

000b51bc <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b51bc:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b51c0:	b510      	push	{r4, lr}
   b51c2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b51c4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b51c6:	b113      	cbz	r3, b51ce <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b51c8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b51ca:	f001 fbd1 	bl	b6970 <os_mutex_lock>
#endif
#endif
#endif
        }
   b51ce:	4620      	mov	r0, r4
   b51d0:	bd10      	pop	{r4, pc}

000b51d2 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b51d2:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b51d4:	6803      	ldr	r3, [r0, #0]
   b51d6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b51da:	4604      	mov	r4, r0
            if (mqtt->thread)
   b51dc:	b112      	cbz	r2, b51e4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b51de:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b51e0:	f001 fbce 	bl	b6980 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b51e4:	4620      	mov	r0, r4
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b51e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51ea:	461f      	mov	r7, r3
   b51ec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b51f0:	4604      	mov	r4, r0
   b51f2:	460d      	mov	r5, r1
   b51f4:	4616      	mov	r6, r2
    if (thread) {
   b51f6:	b12b      	cbz	r3, b5204 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b51f8:	2301      	movs	r3, #1
   b51fa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b51fe:	3058      	adds	r0, #88	; 0x58
   b5200:	f001 fbae 	bl	b6960 <os_mutex_create>
    }
    this->callback = callback;
   b5204:	9b08      	ldr	r3, [sp, #32]
   b5206:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5208:	2300      	movs	r3, #0
   b520a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b520c:	b106      	cbz	r6, b5210 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b520e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5210:	b125      	cbz	r5, b521c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5212:	4629      	mov	r1, r5
   b5214:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5218:	f002 f9c3 	bl	b75a2 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b521c:	9b06      	ldr	r3, [sp, #24]
   b521e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5220:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5222:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5224:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5228:	2bff      	cmp	r3, #255	; 0xff
   b522a:	bfb8      	it	lt
   b522c:	23ff      	movlt	r3, #255	; 0xff
   b522e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5232:	b108      	cbz	r0, b5238 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5234:	f7fe ff43 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5238:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b523c:	f7fe ff3d 	bl	b40ba <_Znaj>
   b5240:	61e0      	str	r0, [r4, #28]
}
   b5242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5244 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5244:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5248:	4604      	mov	r4, r0
            bool thread) {
   b524a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b524c:	4617      	mov	r7, r2
   b524e:	4698      	mov	r8, r3
   b5250:	460e      	mov	r6, r1
            bool thread) {
   b5252:	f002 fca7 	bl	b7ba4 <_ZN9TCPClientC1Ev>
   b5256:	490d      	ldr	r1, [pc, #52]	; (b528c <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b5258:	61e5      	str	r5, [r4, #28]
   b525a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b525e:	f002 f98c 	bl	b757a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5262:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b5266:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5268:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b526c:	22ff      	movs	r2, #255	; 0xff
   b526e:	230f      	movs	r3, #15
   b5270:	e9cd 3200 	strd	r3, r2, [sp]
   b5274:	4620      	mov	r0, r4
            bool thread) {
   b5276:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b527a:	463b      	mov	r3, r7
   b527c:	462a      	mov	r2, r5
   b527e:	4631      	mov	r1, r6
   b5280:	f7ff ffb2 	bl	b51e8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5284:	4620      	mov	r0, r4
   b5286:	b004      	add	sp, #16
   b5288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b528c:	000b8589 	.word	0x000b8589

000b5290 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5290:	b510      	push	{r4, lr}
   b5292:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5294:	4620      	mov	r0, r4
   b5296:	f002 fbe1 	bl	b7a5c <_ZN9TCPClient9availableEv>
   b529a:	2800      	cmp	r0, #0
   b529c:	d0fa      	beq.n	b5294 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b529e:	4620      	mov	r0, r4
   b52a0:	f002 f9c6 	bl	b7630 <_ZN9TCPClient4readEv>
}
   b52a4:	b2c0      	uxtb	r0, r0
   b52a6:	bd10      	pop	{r4, pc}

000b52a8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b52a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b52ac:	4605      	mov	r5, r0
   b52ae:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b52b0:	f7ff ffee 	bl	b5290 <_ZN4MQTT8readByteEv>
   b52b4:	69eb      	ldr	r3, [r5, #28]
   b52b6:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b52b8:	69eb      	ldr	r3, [r5, #28]
   b52ba:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b52be:	f04f 0901 	mov.w	r9, #1
   b52c2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b52c6:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b52c8:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b52ca:	4628      	mov	r0, r5
   b52cc:	f7ff ffe0 	bl	b5290 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b52d0:	4626      	mov	r6, r4
   b52d2:	69eb      	ldr	r3, [r5, #28]
   b52d4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b52d6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b52da:	fb13 f309 	smulbb	r3, r3, r9
   b52de:	441f      	add	r7, r3
        buffer[len++] = digit;
   b52e0:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b52e2:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b52e4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b52e6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b52e8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b52ec:	d4ed      	bmi.n	b52ca <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b52ee:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b52f0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b52f4:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b52f8:	d11e      	bne.n	b5338 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b52fa:	4628      	mov	r0, r5
   b52fc:	f7ff ffc8 	bl	b5290 <_ZN4MQTT8readByteEv>
   b5300:	69eb      	ldr	r3, [r5, #28]
   b5302:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5304:	4628      	mov	r0, r5
   b5306:	f7ff ffc3 	bl	b5290 <_ZN4MQTT8readByteEv>
   b530a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b530c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b530e:	b2b6      	uxth	r6, r6
   b5310:	69eb      	ldr	r3, [r5, #28]
   b5312:	b2a4      	uxth	r4, r4
   b5314:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5316:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5318:	b2b6      	uxth	r6, r6
   b531a:	42be      	cmp	r6, r7
   b531c:	d20e      	bcs.n	b533c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b531e:	4628      	mov	r0, r5
   b5320:	f7ff ffb6 	bl	b5290 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5324:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5328:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b532a:	bf84      	itt	hi
   b532c:	69eb      	ldrhi	r3, [r5, #28]
   b532e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5330:	3401      	adds	r4, #1
   b5332:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5334:	3601      	adds	r6, #1
   b5336:	e7ef      	b.n	b5318 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5338:	2600      	movs	r6, #0
   b533a:	e7ed      	b.n	b5318 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b533c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5340:	42a3      	cmp	r3, r4
   b5342:	bf2c      	ite	cs
   b5344:	4620      	movcs	r0, r4
   b5346:	2000      	movcc	r0, #0
   b5348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b534c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b534c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5350:	4615      	mov	r5, r2
   b5352:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5354:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5356:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5358:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b535a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b535c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b535e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5362:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5366:	f103 0401 	add.w	r4, r3, #1
   b536a:	4403      	add	r3, r0
            digit |= 0x80;
   b536c:	bf88      	it	hi
   b536e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5372:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5376:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b537a:	b2e4      	uxtb	r4, r4
   b537c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5380:	d81e      	bhi.n	b53c0 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5382:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5386:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b538a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b538c:	4622      	mov	r2, r4
   b538e:	a901      	add	r1, sp, #4
   b5390:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5392:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5396:	f002 ffe7 	bl	b8368 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b539a:	1c72      	adds	r2, r6, #1
   b539c:	4422      	add	r2, r4
   b539e:	4641      	mov	r1, r8
   b53a0:	4638      	mov	r0, r7
   b53a2:	f002 f930 	bl	b7606 <_ZN9TCPClient5writeEPKhj>
   b53a6:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b53a8:	f001 fb12 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b53ac:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b53ae:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b53b0:	4432      	add	r2, r6
   b53b2:	b2a8      	uxth	r0, r5
}
   b53b4:	1a13      	subs	r3, r2, r0
   b53b6:	4258      	negs	r0, r3
   b53b8:	4158      	adcs	r0, r3
   b53ba:	b002      	add	sp, #8
   b53bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b53c0:	4623      	mov	r3, r4
   b53c2:	e7ca      	b.n	b535a <_ZN4MQTT5writeEhPht+0xe>

000b53c4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b53c4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b53c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53c8:	4605      	mov	r5, r0
    pos += 2;
   b53ca:	b298      	uxth	r0, r3
   b53cc:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b53ce:	5cce      	ldrb	r6, [r1, r3]
   b53d0:	b29c      	uxth	r4, r3
   b53d2:	b156      	cbz	r6, b53ea <_ZN4MQTT11writeStringEPKcPht+0x26>
   b53d4:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b53d8:	4584      	cmp	ip, r0
   b53da:	f103 0701 	add.w	r7, r3, #1
   b53de:	d904      	bls.n	b53ea <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b53e0:	1c44      	adds	r4, r0, #1
   b53e2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b53e4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b53e6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b53e8:	e7f1      	b.n	b53ce <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b53ea:	b299      	uxth	r1, r3
   b53ec:	1a41      	subs	r1, r0, r1
   b53ee:	440a      	add	r2, r1
   b53f0:	0a21      	lsrs	r1, r4, #8
   b53f2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b53f6:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b53fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b53fc <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b53fc:	b538      	push	{r3, r4, r5, lr}
   b53fe:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5400:	f002 fa4e 	bl	b78a0 <_ZN9TCPClient9connectedEv>
   b5404:	2800      	cmp	r0, #0
   b5406:	bf14      	ite	ne
   b5408:	2501      	movne	r5, #1
   b540a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b540c:	d102      	bne.n	b5414 <_ZN4MQTT11isConnectedEv+0x18>
   b540e:	4620      	mov	r0, r4
   b5410:	f002 fb7e 	bl	b7b10 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5414:	4628      	mov	r0, r5
   b5416:	bd38      	pop	{r3, r4, r5, pc}

000b5418 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b541c:	b088      	sub	sp, #32
   b541e:	4604      	mov	r4, r0
   b5420:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5424:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5428:	4689      	mov	r9, r1
   b542a:	4617      	mov	r7, r2
   b542c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b542e:	f7ff ffe5 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b5432:	4605      	mov	r5, r0
   b5434:	2800      	cmp	r0, #0
   b5436:	f040 80cd 	bne.w	b55d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b543a:	4621      	mov	r1, r4
   b543c:	a801      	add	r0, sp, #4
   b543e:	f7ff febd 	bl	b51bc <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5442:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5444:	2900      	cmp	r1, #0
   b5446:	f040 8088 	bne.w	b555a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b544a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b544e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5450:	462b      	mov	r3, r5
   b5452:	4620      	mov	r0, r4
   b5454:	f002 f9a6 	bl	b77a4 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5458:	2800      	cmp	r0, #0
   b545a:	d07a      	beq.n	b5552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b545c:	2301      	movs	r3, #1
   b545e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5460:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5464:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5466:	2b04      	cmp	r3, #4
   b5468:	4b5b      	ldr	r3, [pc, #364]	; (b55d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b546a:	f040 8081 	bne.w	b5570 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b546e:	6818      	ldr	r0, [r3, #0]
   b5470:	8899      	ldrh	r1, [r3, #4]
   b5472:	799b      	ldrb	r3, [r3, #6]
   b5474:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5478:	f88d 300e 	strb.w	r3, [sp, #14]
   b547c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b547e:	f8c2 0005 	str.w	r0, [r2, #5]
   b5482:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5486:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b548a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b548e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5490:	230c      	movs	r3, #12
            if (willTopic) {
   b5492:	f1b8 0f00 	cmp.w	r8, #0
   b5496:	f000 8081 	beq.w	b559c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b549a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b549e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b54a2:	0140      	lsls	r0, r0, #5
   b54a4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b54a8:	f040 0006 	orr.w	r0, r0, #6
   b54ac:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b54ae:	f1ba 0f00 	cmp.w	sl, #0
   b54b2:	d101      	bne.n	b54b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b54b4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b54b8:	b11f      	cbz	r7, b54c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b54ba:	2e00      	cmp	r6, #0
   b54bc:	d170      	bne.n	b55a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b54be:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b54c2:	69e2      	ldr	r2, [r4, #28]
   b54c4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b54c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b54c8:	69e1      	ldr	r1, [r4, #28]
   b54ca:	1c58      	adds	r0, r3, #1
   b54cc:	1212      	asrs	r2, r2, #8
   b54ce:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b54d0:	1c9a      	adds	r2, r3, #2
   b54d2:	69e1      	ldr	r1, [r4, #28]
   b54d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b54d6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b54d8:	3303      	adds	r3, #3
   b54da:	69e2      	ldr	r2, [r4, #28]
   b54dc:	4649      	mov	r1, r9
   b54de:	4620      	mov	r0, r4
   b54e0:	f7ff ff70 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
   b54e4:	4603      	mov	r3, r0
            if (willTopic) {
   b54e6:	f1b8 0f00 	cmp.w	r8, #0
   b54ea:	d00b      	beq.n	b5504 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b54ec:	69e2      	ldr	r2, [r4, #28]
   b54ee:	4641      	mov	r1, r8
   b54f0:	4620      	mov	r0, r4
   b54f2:	f7ff ff67 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b54f6:	69e2      	ldr	r2, [r4, #28]
   b54f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b54fa:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b54fc:	4620      	mov	r0, r4
   b54fe:	f7ff ff61 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
   b5502:	4603      	mov	r3, r0
            if(user != NULL) {
   b5504:	b167      	cbz	r7, b5520 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5506:	69e2      	ldr	r2, [r4, #28]
   b5508:	4639      	mov	r1, r7
   b550a:	4620      	mov	r0, r4
   b550c:	f7ff ff5a 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
   b5510:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5512:	b12e      	cbz	r6, b5520 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5514:	69e2      	ldr	r2, [r4, #28]
   b5516:	4631      	mov	r1, r6
   b5518:	4620      	mov	r0, r4
   b551a:	f7ff ff53 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
   b551e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5520:	3b05      	subs	r3, #5
   b5522:	69e2      	ldr	r2, [r4, #28]
   b5524:	b29b      	uxth	r3, r3
   b5526:	2110      	movs	r1, #16
   b5528:	4620      	mov	r0, r4
   b552a:	f7ff ff0f 	bl	b534c <_ZN4MQTT5writeEhPht>
   b552e:	f001 fa4f 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5532:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5536:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b553a:	4620      	mov	r0, r4
   b553c:	f002 fa8e 	bl	b7a5c <_ZN9TCPClient9availableEv>
   b5540:	bb88      	cbnz	r0, b55a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5542:	f001 fa45 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5548:	1ac0      	subs	r0, r0, r3
   b554a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b554c:	4373      	muls	r3, r6
   b554e:	4298      	cmp	r0, r3
   b5550:	d9f3      	bls.n	b553a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5552:	4620      	mov	r0, r4
   b5554:	f002 fadc 	bl	b7b10 <_ZN9TCPClient4stopEv>
   b5558:	e035      	b.n	b55c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b555a:	a802      	add	r0, sp, #8
   b555c:	f001 fda6 	bl	b70ac <_ZN9IPAddressC1EPKh>
   b5560:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5564:	462b      	mov	r3, r5
   b5566:	a902      	add	r1, sp, #8
   b5568:	4620      	mov	r0, r4
   b556a:	f002 f9fb 	bl	b7964 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b556e:	e773      	b.n	b5458 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5570:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5574:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5578:	7bdb      	ldrb	r3, [r3, #15]
   b557a:	f10d 0c08 	add.w	ip, sp, #8
   b557e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5582:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5586:	ab02      	add	r3, sp, #8
   b5588:	cb03      	ldmia	r3!, {r0, r1}
   b558a:	f8c2 0005 	str.w	r0, [r2, #5]
   b558e:	f8c2 1009 	str.w	r1, [r2, #9]
   b5592:	f89c 3000 	ldrb.w	r3, [ip]
   b5596:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5598:	230e      	movs	r3, #14
   b559a:	e77a      	b.n	b5492 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b559c:	2002      	movs	r0, #2
   b559e:	e786      	b.n	b54ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b55a0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b55a4:	e78d      	b.n	b54c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b55a6:	a902      	add	r1, sp, #8
   b55a8:	4620      	mov	r0, r4
   b55aa:	f7ff fe7d 	bl	b52a8 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b55ae:	2804      	cmp	r0, #4
   b55b0:	d1cf      	bne.n	b5552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b55b2:	69e3      	ldr	r3, [r4, #28]
   b55b4:	78de      	ldrb	r6, [r3, #3]
   b55b6:	2e00      	cmp	r6, #0
   b55b8:	d1cb      	bne.n	b5552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b55ba:	f001 fa09 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b55be:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b55c0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b55c2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b55c6:	a801      	add	r0, sp, #4
   b55c8:	f7ff fe03 	bl	b51d2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b55cc:	4628      	mov	r0, r5
   b55ce:	b008      	add	sp, #32
   b55d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b55d4:	2500      	movs	r5, #0
   b55d6:	e7f9      	b.n	b55cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b55d8:	000b84bc 	.word	0x000b84bc

000b55dc <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b55dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b55de:	2301      	movs	r3, #1
   b55e0:	2204      	movs	r2, #4
   b55e2:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b55e6:	2300      	movs	r3, #0
   b55e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b55ec:	e9cd 3300 	strd	r3, r3, [sp]
   b55f0:	461a      	mov	r2, r3
   b55f2:	f7ff ff11 	bl	b5418 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b55f6:	b007      	add	sp, #28
   b55f8:	f85d fb04 	ldr.w	pc, [sp], #4

000b55fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b55fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5600:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5604:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5608:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b560c:	4604      	mov	r4, r0
   b560e:	468b      	mov	fp, r1
   b5610:	4616      	mov	r6, r2
   b5612:	461f      	mov	r7, r3
    if (isConnected()) {
   b5614:	f7ff fef2 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b5618:	4682      	mov	sl, r0
   b561a:	2800      	cmp	r0, #0
   b561c:	d051      	beq.n	b56c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b561e:	4621      	mov	r1, r4
   b5620:	a801      	add	r0, sp, #4
   b5622:	f7ff fdcb 	bl	b51bc <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5626:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b562a:	69e0      	ldr	r0, [r4, #28]
   b562c:	2100      	movs	r1, #0
   b562e:	f002 fea9 	bl	b8384 <memset>
        length = writeString(topic, buffer, length);
   b5632:	2305      	movs	r3, #5
   b5634:	69e2      	ldr	r2, [r4, #28]
   b5636:	4659      	mov	r1, fp
   b5638:	4620      	mov	r0, r4
   b563a:	f7ff fec3 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b563e:	1e6b      	subs	r3, r5, #1
   b5640:	2b01      	cmp	r3, #1
   b5642:	d815      	bhi.n	b5670 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5644:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5646:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5648:	3101      	adds	r1, #1
   b564a:	b289      	uxth	r1, r1
   b564c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b564e:	0a09      	lsrs	r1, r1, #8
   b5650:	5419      	strb	r1, [r3, r0]
   b5652:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5654:	69e3      	ldr	r3, [r4, #28]
   b5656:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5658:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b565a:	3002      	adds	r0, #2
   b565c:	5499      	strb	r1, [r3, r2]
   b565e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5660:	f1b8 0f00 	cmp.w	r8, #0
   b5664:	d004      	beq.n	b5670 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5666:	8c23      	ldrh	r3, [r4, #32]
   b5668:	1c5a      	adds	r2, r3, #1
   b566a:	8422      	strh	r2, [r4, #32]
   b566c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5670:	2100      	movs	r1, #0
   b5672:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5674:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5676:	69e2      	ldr	r2, [r4, #28]
   b5678:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b567a:	d90a      	bls.n	b5692 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b567c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5680:	459c      	cmp	ip, r3
   b5682:	d906      	bls.n	b5692 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5684:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5688:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b568c:	3101      	adds	r1, #1
   b568e:	b289      	uxth	r1, r1
   b5690:	e7ef      	b.n	b5672 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b5692:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b5696:	2900      	cmp	r1, #0
   b5698:	bf0c      	ite	eq
   b569a:	2130      	moveq	r1, #48	; 0x30
   b569c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b569e:	f1b9 0f00 	cmp.w	r9, #0
   b56a2:	d001      	beq.n	b56a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b56a4:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b56a8:	2d02      	cmp	r5, #2
   b56aa:	d10e      	bne.n	b56ca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b56ac:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b56b0:	3b05      	subs	r3, #5
   b56b2:	b29b      	uxth	r3, r3
   b56b4:	4620      	mov	r0, r4
   b56b6:	f7ff fe49 	bl	b534c <_ZN4MQTT5writeEhPht>
   b56ba:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b56bc:	a801      	add	r0, sp, #4
   b56be:	f7ff fd88 	bl	b51d2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b56c2:	4650      	mov	r0, sl
   b56c4:	b003      	add	sp, #12
   b56c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b56ca:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b56cc:	bf08      	it	eq
   b56ce:	f041 0102 	orreq.w	r1, r1, #2
   b56d2:	e7ed      	b.n	b56b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b56d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b56d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b56d6:	9c08      	ldr	r4, [sp, #32]
   b56d8:	9403      	str	r4, [sp, #12]
   b56da:	2400      	movs	r4, #0
   b56dc:	9402      	str	r4, [sp, #8]
   b56de:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b56e2:	9401      	str	r4, [sp, #4]
   b56e4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b56e8:	9400      	str	r4, [sp, #0]
   b56ea:	f7ff ff87 	bl	b55fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b56ee:	b004      	add	sp, #16
   b56f0:	bd10      	pop	{r4, pc}

000b56f2 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b56f2:	b530      	push	{r4, r5, lr}
   b56f4:	b087      	sub	sp, #28
   b56f6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b56f8:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b56fa:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b56fc:	9204      	str	r2, [sp, #16]
   b56fe:	f7fe fc97 	bl	b4030 <strlen>
   b5702:	2500      	movs	r5, #0
   b5704:	4603      	mov	r3, r0
   b5706:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b570a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b570e:	9500      	str	r5, [sp, #0]
   b5710:	4620      	mov	r0, r4
   b5712:	f7ff ffdf 	bl	b56d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b5716:	b007      	add	sp, #28
   b5718:	bd30      	pop	{r4, r5, pc}

000b571a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b571a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b571c:	4604      	mov	r4, r0
   b571e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5720:	f7ff fe6c 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b5724:	4605      	mov	r5, r0
   b5726:	b1c8      	cbz	r0, b575c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5728:	4621      	mov	r1, r4
   b572a:	a801      	add	r0, sp, #4
   b572c:	f7ff fd46 	bl	b51bc <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5730:	69e3      	ldr	r3, [r4, #28]
   b5732:	2262      	movs	r2, #98	; 0x62
   b5734:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5736:	69e3      	ldr	r3, [r4, #28]
   b5738:	2202      	movs	r2, #2
   b573a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b573c:	69e3      	ldr	r3, [r4, #28]
   b573e:	0a32      	lsrs	r2, r6, #8
   b5740:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5742:	69e3      	ldr	r3, [r4, #28]
   b5744:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5746:	69e1      	ldr	r1, [r4, #28]
   b5748:	2204      	movs	r2, #4
   b574a:	4620      	mov	r0, r4
   b574c:	f001 ff5b 	bl	b7606 <_ZN9TCPClient5writeEPKhj>
   b5750:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5752:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5754:	bf18      	it	ne
   b5756:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5758:	f7ff fd3b 	bl	b51d2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b575c:	4628      	mov	r0, r5
   b575e:	b002      	add	sp, #8
   b5760:	bd70      	pop	{r4, r5, r6, pc}

000b5762 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5762:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5764:	4604      	mov	r4, r0
   b5766:	460e      	mov	r6, r1
    if (isConnected()) {
   b5768:	f7ff fe48 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b576c:	4605      	mov	r5, r0
   b576e:	b1c8      	cbz	r0, b57a4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5770:	4621      	mov	r1, r4
   b5772:	a801      	add	r0, sp, #4
   b5774:	f7ff fd22 	bl	b51bc <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5778:	69e3      	ldr	r3, [r4, #28]
   b577a:	2272      	movs	r2, #114	; 0x72
   b577c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b577e:	69e3      	ldr	r3, [r4, #28]
   b5780:	2202      	movs	r2, #2
   b5782:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5784:	69e3      	ldr	r3, [r4, #28]
   b5786:	0a32      	lsrs	r2, r6, #8
   b5788:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b578a:	69e3      	ldr	r3, [r4, #28]
   b578c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b578e:	69e1      	ldr	r1, [r4, #28]
   b5790:	2204      	movs	r2, #4
   b5792:	4620      	mov	r0, r4
   b5794:	f001 ff37 	bl	b7606 <_ZN9TCPClient5writeEPKhj>
   b5798:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b579a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b579c:	bf18      	it	ne
   b579e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b57a0:	f7ff fd17 	bl	b51d2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b57a4:	4628      	mov	r0, r5
   b57a6:	b002      	add	sp, #8
   b57a8:	bd70      	pop	{r4, r5, r6, pc}

000b57aa <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b57aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57ae:	ed2d 8b02 	vpush	{d8}
   b57b2:	b087      	sub	sp, #28
   b57b4:	af00      	add	r7, sp, #0
   b57b6:	4604      	mov	r4, r0
    if (isConnected()) {
   b57b8:	f7ff fe20 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b57bc:	4681      	mov	r9, r0
   b57be:	b1f8      	cbz	r0, b5800 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b57c0:	4621      	mov	r1, r4
   b57c2:	f107 0014 	add.w	r0, r7, #20
   b57c6:	f7ff fcf9 	bl	b51bc <_ZN4MQTT11MutexLockerC1EPS_>
   b57ca:	f001 f901 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b57ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b57d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b57d4:	4353      	muls	r3, r2
   b57d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b57d8:	1a82      	subs	r2, r0, r2
   b57da:	429a      	cmp	r2, r3
   b57dc:	4606      	mov	r6, r0
   b57de:	d803      	bhi.n	b57e8 <_ZN4MQTT4loopEv+0x3e>
   b57e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b57e2:	1a82      	subs	r2, r0, r2
   b57e4:	4293      	cmp	r3, r2
   b57e6:	d221      	bcs.n	b582c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b57e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b57ec:	b17b      	cbz	r3, b580e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b57ee:	4620      	mov	r0, r4
   b57f0:	f002 f98e 	bl	b7b10 <_ZN9TCPClient4stopEv>
                return false;
   b57f4:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b57f8:	f107 0014 	add.w	r0, r7, #20
   b57fc:	f7ff fce9 	bl	b51d2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5800:	4648      	mov	r0, r9
   b5802:	371c      	adds	r7, #28
   b5804:	46bd      	mov	sp, r7
   b5806:	ecbd 8b02 	vpop	{d8}
   b580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b580e:	69e2      	ldr	r2, [r4, #28]
   b5810:	21c0      	movs	r1, #192	; 0xc0
   b5812:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5814:	69e2      	ldr	r2, [r4, #28]
   b5816:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5818:	69e1      	ldr	r1, [r4, #28]
   b581a:	2202      	movs	r2, #2
   b581c:	4620      	mov	r0, r4
   b581e:	f001 fef2 	bl	b7606 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5822:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5826:	2301      	movs	r3, #1
   b5828:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b582c:	4620      	mov	r0, r4
   b582e:	f002 f915 	bl	b7a5c <_ZN9TCPClient9availableEv>
   b5832:	2800      	cmp	r0, #0
   b5834:	d0e0      	beq.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5836:	f107 0113 	add.w	r1, r7, #19
   b583a:	4620      	mov	r0, r4
   b583c:	f7ff fd34 	bl	b52a8 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5840:	4683      	mov	fp, r0
   b5842:	2800      	cmp	r0, #0
   b5844:	d0d8      	beq.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5846:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5848:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b584a:	7819      	ldrb	r1, [r3, #0]
   b584c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5850:	2a30      	cmp	r2, #48	; 0x30
   b5852:	d17f      	bne.n	b5954 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5854:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5858:	f1ba 0f00 	cmp.w	sl, #0
   b585c:	d0cc      	beq.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b585e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5862:	466a      	mov	r2, sp
   b5864:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5868:	eb03 020c 	add.w	r2, r3, ip
   b586c:	7851      	ldrb	r1, [r2, #1]
   b586e:	7895      	ldrb	r5, [r2, #2]
   b5870:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5874:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5876:	f105 0208 	add.w	r2, r5, #8
   b587a:	4669      	mov	r1, sp
   b587c:	08d2      	lsrs	r2, r2, #3
   b587e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5882:	4695      	mov	sp, r2
   b5884:	f10c 0203 	add.w	r2, ip, #3
   b5888:	60fa      	str	r2, [r7, #12]
   b588a:	eb03 0e02 	add.w	lr, r3, r2
   b588e:	eb0d 0205 	add.w	r2, sp, r5
   b5892:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5894:	f8c7 d008 	str.w	sp, [r7, #8]
   b5898:	607a      	str	r2, [r7, #4]
   b589a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b589e:	428a      	cmp	r2, r1
   b58a0:	d006      	beq.n	b58b0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b58a2:	460a      	mov	r2, r1
   b58a4:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b58a8:	f802 8b01 	strb.w	r8, [r2], #1
   b58ac:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b58ae:	e7f4      	b.n	b589a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b58b0:	2200      	movs	r2, #0
   b58b2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b58b4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b58b8:	68f9      	ldr	r1, [r7, #12]
   b58ba:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b58be:	ebab 020c 	sub.w	r2, fp, ip
   b58c2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b58c4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b58c8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b58cc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b58ce:	d125      	bne.n	b591c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b58d0:	f813 e001 	ldrb.w	lr, [r3, r1]
   b58d4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b58d6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b58d8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b58dc:	f10c 0105 	add.w	r1, ip, #5
   b58e0:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b58e2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b58e4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b58e8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b58ea:	69e3      	ldr	r3, [r4, #28]
   b58ec:	2240      	movs	r2, #64	; 0x40
   b58ee:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b58f0:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b58f2:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b58f6:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b58fa:	69e3      	ldr	r3, [r4, #28]
   b58fc:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5900:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5902:	69e3      	ldr	r3, [r4, #28]
   b5904:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5908:	69e1      	ldr	r1, [r4, #28]
   b590a:	2204      	movs	r2, #4
   b590c:	4620      	mov	r0, r4
   b590e:	f001 fe7a 	bl	b7606 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5912:	6266      	str	r6, [r4, #36]	; 0x24
   b5914:	ee18 3a10 	vmov	r3, s16
   b5918:	469d      	mov	sp, r3
   b591a:	e76d      	b.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b591c:	f1b8 0f04 	cmp.w	r8, #4
   b5920:	d115      	bne.n	b594e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5922:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5926:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5928:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b592a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b592e:	f10c 0105 	add.w	r1, ip, #5
   b5932:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5934:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5936:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b593a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b593c:	69e3      	ldr	r3, [r4, #28]
   b593e:	2250      	movs	r2, #80	; 0x50
   b5940:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5942:	69e3      	ldr	r3, [r4, #28]
   b5944:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5946:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b594a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b594c:	e7d5      	b.n	b58fa <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b594e:	4419      	add	r1, r3
   b5950:	47d0      	blx	sl
   b5952:	e7df      	b.n	b5914 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5954:	2a50      	cmp	r2, #80	; 0x50
   b5956:	d108      	bne.n	b596a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5958:	789a      	ldrb	r2, [r3, #2]
   b595a:	78d9      	ldrb	r1, [r3, #3]
   b595c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5960:	b289      	uxth	r1, r1
   b5962:	4620      	mov	r0, r4
   b5964:	f7ff fed9 	bl	b571a <_ZN4MQTT14publishReleaseEt>
   b5968:	e746      	b.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b596a:	2a40      	cmp	r2, #64	; 0x40
   b596c:	d112      	bne.n	b5994 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b596e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5970:	2a00      	cmp	r2, #0
   b5972:	f43f af41 	beq.w	b57f8 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5976:	f1bb 0f04 	cmp.w	fp, #4
   b597a:	f47f af3d 	bne.w	b57f8 <_ZN4MQTT4loopEv+0x4e>
   b597e:	f011 0f06 	tst.w	r1, #6
   b5982:	f47f af39 	bne.w	b57f8 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5986:	7899      	ldrb	r1, [r3, #2]
   b5988:	78d8      	ldrb	r0, [r3, #3]
   b598a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b598e:	b280      	uxth	r0, r0
   b5990:	4790      	blx	r2
   b5992:	e731      	b.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5994:	2a60      	cmp	r2, #96	; 0x60
   b5996:	d108      	bne.n	b59aa <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5998:	789a      	ldrb	r2, [r3, #2]
   b599a:	78d9      	ldrb	r1, [r3, #3]
   b599c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b59a0:	b289      	uxth	r1, r1
   b59a2:	4620      	mov	r0, r4
   b59a4:	f7ff fedd 	bl	b5762 <_ZN4MQTT15publishCompleteEt>
   b59a8:	e726      	b.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b59aa:	2a70      	cmp	r2, #112	; 0x70
   b59ac:	d0df      	beq.n	b596e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b59ae:	2a90      	cmp	r2, #144	; 0x90
   b59b0:	f43f af22 	beq.w	b57f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b59b4:	2ac0      	cmp	r2, #192	; 0xc0
   b59b6:	d10a      	bne.n	b59ce <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b59b8:	22d0      	movs	r2, #208	; 0xd0
   b59ba:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b59bc:	69e3      	ldr	r3, [r4, #28]
   b59be:	2200      	movs	r2, #0
   b59c0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b59c2:	69e1      	ldr	r1, [r4, #28]
   b59c4:	2202      	movs	r2, #2
   b59c6:	4620      	mov	r0, r4
   b59c8:	f001 fe1d 	bl	b7606 <_ZN9TCPClient5writeEPKhj>
   b59cc:	e714      	b.n	b57f8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b59ce:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b59d0:	bf04      	itt	eq
   b59d2:	2300      	moveq	r3, #0
   b59d4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b59d8:	e70e      	b.n	b57f8 <_ZN4MQTT4loopEv+0x4e>

000b59da <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b59da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b59dc:	4604      	mov	r4, r0
   b59de:	460f      	mov	r7, r1
   b59e0:	4616      	mov	r6, r2
    if (isConnected()) {
   b59e2:	f7ff fd0b 	bl	b53fc <_ZN4MQTT11isConnectedEv>
   b59e6:	4605      	mov	r5, r0
   b59e8:	b310      	cbz	r0, b5a30 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b59ea:	4621      	mov	r1, r4
   b59ec:	a801      	add	r0, sp, #4
   b59ee:	f7ff fbe5 	bl	b51bc <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b59f2:	8c23      	ldrh	r3, [r4, #32]
   b59f4:	3301      	adds	r3, #1
   b59f6:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b59f8:	b1eb      	cbz	r3, b5a36 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b59fa:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b59fc:	8c23      	ldrh	r3, [r4, #32]
   b59fe:	69e2      	ldr	r2, [r4, #28]
   b5a00:	0a1b      	lsrs	r3, r3, #8
   b5a02:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5a04:	69e3      	ldr	r3, [r4, #28]
   b5a06:	8c22      	ldrh	r2, [r4, #32]
   b5a08:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5a0a:	69e2      	ldr	r2, [r4, #28]
   b5a0c:	2307      	movs	r3, #7
   b5a0e:	4639      	mov	r1, r7
   b5a10:	4620      	mov	r0, r4
   b5a12:	f7ff fcd7 	bl	b53c4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5a16:	69e3      	ldr	r3, [r4, #28]
   b5a18:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5a1a:	3804      	subs	r0, #4
   b5a1c:	b283      	uxth	r3, r0
   b5a1e:	69e2      	ldr	r2, [r4, #28]
   b5a20:	2182      	movs	r1, #130	; 0x82
   b5a22:	4620      	mov	r0, r4
   b5a24:	f7ff fc92 	bl	b534c <_ZN4MQTT5writeEhPht>
   b5a28:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5a2a:	a801      	add	r0, sp, #4
   b5a2c:	f7ff fbd1 	bl	b51d2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a30:	4628      	mov	r0, r5
   b5a32:	b003      	add	sp, #12
   b5a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5a36:	2301      	movs	r3, #1
   b5a38:	e7df      	b.n	b59fa <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5a3a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5a3a:	2200      	movs	r2, #0
   b5a3c:	f7ff bfcd 	b.w	b59da <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5a40 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b5a40:	b508      	push	{r3, lr}
	MFRC522::StatusCode result = PICC_Select(&uid);
   b5a42:	4601      	mov	r1, r0
   b5a44:	2200      	movs	r2, #0
   b5a46:	f851 3b04 	ldr.w	r3, [r1], #4
   b5a4a:	681b      	ldr	r3, [r3, #0]
   b5a4c:	4798      	blx	r3
	return (result == STATUS_OK);
} // End 
   b5a4e:	fab0 f080 	clz	r0, r0
   b5a52:	0940      	lsrs	r0, r0, #5
   b5a54:	bd08      	pop	{r3, pc}
	...

000b5a58 <_ZN7MFRC522C1Ehh>:
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b5a58:	b510      	push	{r4, lr}
				) {
   b5a5a:	4c02      	ldr	r4, [pc, #8]	; (b5a64 <_ZN7MFRC522C1Ehh+0xc>)
   b5a5c:	6004      	str	r4, [r0, #0]
	_chipSelectPin = chipSelectPin;
   b5a5e:	7401      	strb	r1, [r0, #16]
	_resetPowerDownPin = resetPowerDownPin;
   b5a60:	7442      	strb	r2, [r0, #17]
} // End constructor
   b5a62:	bd10      	pop	{r4, pc}
   b5a64:	000b87f4 	.word	0x000b87f4

000b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b5a68:	b507      	push	{r0, r1, r2, lr}
   b5a6a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b5a6c:	f7ff fb8a 	bl	b5184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a70:	9901      	ldr	r1, [sp, #4]
    }
   b5a72:	b003      	add	sp, #12
   b5a74:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b5a78:	f001 bd2e 	b.w	b74d8 <_ZN8SPIClass8transferEh>

000b5a7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   b5a7c:	b508      	push	{r3, lr}
        instance().endTransaction();
   b5a7e:	f7ff fb81 	bl	b5184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b5a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b5a86:	f001 bc9f 	b.w	b73c8 <_ZN8SPIClass14endTransactionEv>

000b5a8a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b5a8a:	b507      	push	{r0, r1, r2, lr}
   b5a8c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b5a8e:	f7ff fb79 	bl	b5184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a92:	9901      	ldr	r1, [sp, #4]
    }
   b5a94:	b003      	add	sp, #12
   b5a96:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b5a9a:	f001 bcaf 	b.w	b73fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000b5aa0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0>:
void MFRC522::PCD_ReadRegister(	PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
   b5aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b5aa4:	4680      	mov	r8, r0
   b5aa6:	461e      	mov	r6, r3
      dataMode_{dataMode}
   b5aa8:	4b25      	ldr	r3, [pc, #148]	; (b5b40 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0+0xa0>)
   b5aaa:	9300      	str	r3, [sp, #0]
   b5aac:	f04f 0a00 	mov.w	sl, #0
   b5ab0:	4b24      	ldr	r3, [pc, #144]	; (b5b44 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0+0xa4>)
   b5ab2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   b5ab6:	9302      	str	r3, [sp, #8]
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5ab8:	4668      	mov	r0, sp
   b5aba:	2701      	movs	r7, #1
void MFRC522::PCD_ReadRegister(	PCD_Register reg,	///< The register to read from. One of the PCD_Register enums.
   b5abc:	4614      	mov	r4, r2
	byte address = 0x80 | reg;				// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5abe:	f041 0980 	orr.w	r9, r1, #128	; 0x80
   b5ac2:	f88d a004 	strb.w	sl, [sp, #4]
   b5ac6:	f8ad 700c 	strh.w	r7, [sp, #12]
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5aca:	f7ff ffde 	bl	b5a8a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5ace:	f898 0010 	ldrb.w	r0, [r8, #16]
   b5ad2:	4651      	mov	r1, sl
   b5ad4:	f002 fa83 	bl	b7fde <digitalWrite>
	count--;								// One read is performed outside of the loop
   b5ad8:	3c01      	subs	r4, #1
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b5ada:	4648      	mov	r0, r9
	count--;								// One read is performed outside of the loop
   b5adc:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b5ade:	f7ff ffc3 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	if (rxAlign) {		// Only update bit positions rxAlign..7 in values[0]
   b5ae2:	b165      	cbz	r5, b5afe <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0+0x5e>
		byte mask = (0xFF << rxAlign) & 0xFF;
   b5ae4:	23ff      	movs	r3, #255	; 0xff
		byte value = SPI.transfer(address);
   b5ae6:	4648      	mov	r0, r9
		byte mask = (0xFF << rxAlign) & 0xFF;
   b5ae8:	fa03 f505 	lsl.w	r5, r3, r5
		byte value = SPI.transfer(address);
   b5aec:	f7ff ffbc 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
		values[0] = (values[0] & ~mask) | (value & mask);
   b5af0:	7833      	ldrb	r3, [r6, #0]
   b5af2:	ea23 0305 	bic.w	r3, r3, r5
   b5af6:	4005      	ands	r5, r0
   b5af8:	432b      	orrs	r3, r5
   b5afa:	7033      	strb	r3, [r6, #0]
		index++;
   b5afc:	463d      	mov	r5, r7
   b5afe:	eb06 0a05 	add.w	sl, r6, r5
   b5b02:	462f      	mov	r7, r5
	while (index < count) {
   b5b04:	42bc      	cmp	r4, r7
   b5b06:	d907      	bls.n	b5b18 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0+0x78>
		values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b5b08:	4648      	mov	r0, r9
   b5b0a:	f7ff ffad 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
		index++;
   b5b0e:	3701      	adds	r7, #1
		values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b5b10:	f80a 0b01 	strb.w	r0, [sl], #1
		index++;
   b5b14:	b2ff      	uxtb	r7, r7
	while (index < count) {
   b5b16:	e7f5      	b.n	b5b04 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0+0x64>
		values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b5b18:	1b62      	subs	r2, r4, r5
   b5b1a:	b2d2      	uxtb	r2, r2
   b5b1c:	42ac      	cmp	r4, r5
   b5b1e:	bf38      	it	cc
   b5b20:	2200      	movcc	r2, #0
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b5b22:	2000      	movs	r0, #0
		values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b5b24:	4415      	add	r5, r2
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b5b26:	f7ff ff9f 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b5b2a:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b5b2c:	2101      	movs	r1, #1
   b5b2e:	f898 0010 	ldrb.w	r0, [r8, #16]
   b5b32:	f002 fa54 	bl	b7fde <digitalWrite>
} // End PCD_ReadRegister()
   b5b36:	b004      	add	sp, #16
   b5b38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SPI.endTransaction(); // Stop using the SPI bus
   b5b3c:	f7ff bf9e 	b.w	b5a7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5b40:	000b8644 	.word	0x000b8644
   b5b44:	003d0900 	.word	0x003d0900

000b5b48 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
								) {
   b5b48:	b410      	push	{r4}
   b5b4a:	f89d 4004 	ldrb.w	r4, [sp, #4]
	if (count == 0) {
   b5b4e:	b122      	cbz	r2, b5b5a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x12>
   b5b50:	9401      	str	r4, [sp, #4]
} // End PCD_ReadRegister()
   b5b52:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5b56:	f7ff bfa3 	b.w	b5aa0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0>
   b5b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5b5e:	4770      	bx	lr

000b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
								) {
   b5b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b62:	b085      	sub	sp, #20
   b5b64:	4604      	mov	r4, r0
   b5b66:	4b11      	ldr	r3, [pc, #68]	; (b5bac <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x4c>)
   b5b68:	9300      	str	r3, [sp, #0]
   b5b6a:	2500      	movs	r5, #0
   b5b6c:	4b10      	ldr	r3, [pc, #64]	; (b5bb0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x50>)
   b5b6e:	9302      	str	r3, [sp, #8]
   b5b70:	2701      	movs	r7, #1
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5b72:	4668      	mov	r0, sp
								) {
   b5b74:	460e      	mov	r6, r1
   b5b76:	f88d 5004 	strb.w	r5, [sp, #4]
   b5b7a:	f8ad 700c 	strh.w	r7, [sp, #12]
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5b7e:	f7ff ff84 	bl	b5a8a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b5b82:	4629      	mov	r1, r5
   b5b84:	7c20      	ldrb	r0, [r4, #16]
   b5b86:	f002 fa2a 	bl	b7fde <digitalWrite>
	SPI.transfer(0x80 | reg);					// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5b8a:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   b5b8e:	f7ff ff6b 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b5b92:	4628      	mov	r0, r5
   b5b94:	f7ff ff68 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b5b98:	4639      	mov	r1, r7
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b5b9a:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b5b9c:	7c20      	ldrb	r0, [r4, #16]
   b5b9e:	f002 fa1e 	bl	b7fde <digitalWrite>
	SPI.endTransaction(); // Stop using the SPI bus
   b5ba2:	f7ff ff6b 	bl	b5a7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
} // End PCD_ReadRegister()
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	b005      	add	sp, #20
   b5baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5bac:	000b8644 	.word	0x000b8644
   b5bb0:	003d0900 	.word	0x003d0900

000b5bb4 <_ZN7MFRC52223PCD_DumpVersionToSerialEv>:
void MFRC522::PCD_DumpVersionToSerial() {
   b5bb4:	b510      	push	{r4, lr}
	byte v = PCD_ReadRegister(VersionReg);
   b5bb6:	216e      	movs	r1, #110	; 0x6e
   b5bb8:	f7ff ffd2 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
   b5bbc:	4604      	mov	r4, r0
	Serial.print(F("Firmware Version: 0x"));
   b5bbe:	f002 f8bf 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5bc2:	4920      	ldr	r1, [pc, #128]	; (b5c44 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x90>)
   b5bc4:	f001 fb6b 	bl	b729e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(v, HEX);
   b5bc8:	f002 f8ba 	bl	b7d40 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b5bcc:	2210      	movs	r2, #16
   b5bce:	4621      	mov	r1, r4
   b5bd0:	f001 fb81 	bl	b72d6 <_ZN5Print11printNumberEmh>
	switch(v) {
   b5bd4:	2c12      	cmp	r4, #18
   b5bd6:	d023      	beq.n	b5c20 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x6c>
   b5bd8:	f104 0378 	add.w	r3, r4, #120	; 0x78
   b5bdc:	b2db      	uxtb	r3, r3
   b5bde:	2b0a      	cmp	r3, #10
   b5be0:	d822      	bhi.n	b5c28 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x74>
   b5be2:	f1a4 0388 	sub.w	r3, r4, #136	; 0x88
   b5be6:	2b0a      	cmp	r3, #10
   b5be8:	d81e      	bhi.n	b5c28 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x74>
   b5bea:	e8df f003 	tbb	[pc, r3]
   b5bee:	1d06      	.short	0x1d06
   b5bf0:	1d1d1d1d 	.word	0x1d1d1d1d
   b5bf4:	110d1d1d 	.word	0x110d1d1d
   b5bf8:	15          	.byte	0x15
   b5bf9:	00          	.byte	0x00
		case 0x88: Serial.println(F(" = (clone)"));  break;
   b5bfa:	f002 f8a1 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5bfe:	4912      	ldr	r1, [pc, #72]	; (b5c48 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x94>)
} // End PCD_DumpVersionToSerial()
   b5c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Serial.println(F("WARNING: Communication failure, is the MFRC522 properly connected?"));
   b5c04:	f001 bb65 	b.w	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
		case 0x90: Serial.println(F(" = v0.0"));     break;
   b5c08:	f002 f89a 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5c0c:	490f      	ldr	r1, [pc, #60]	; (b5c4c <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x98>)
   b5c0e:	e7f7      	b.n	b5c00 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x4c>
		case 0x91: Serial.println(F(" = v1.0"));     break;
   b5c10:	f002 f896 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5c14:	490e      	ldr	r1, [pc, #56]	; (b5c50 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x9c>)
   b5c16:	e7f3      	b.n	b5c00 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x4c>
		case 0x92: Serial.println(F(" = v2.0"));     break;
   b5c18:	f002 f892 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5c1c:	490d      	ldr	r1, [pc, #52]	; (b5c54 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xa0>)
   b5c1e:	e7ef      	b.n	b5c00 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x4c>
		case 0x12: Serial.println(F(" = counterfeit chip"));     break;
   b5c20:	f002 f88e 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5c24:	490c      	ldr	r1, [pc, #48]	; (b5c58 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xa4>)
   b5c26:	e7eb      	b.n	b5c00 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x4c>
	if ((v == 0x00) || (v == 0xFF))
   b5c28:	3c01      	subs	r4, #1
		default:   Serial.println(F(" = (unknown)"));
   b5c2a:	f002 f889 	bl	b7d40 <_Z16_fetch_usbserialv>
	if ((v == 0x00) || (v == 0xFF))
   b5c2e:	b2e4      	uxtb	r4, r4
		default:   Serial.println(F(" = (unknown)"));
   b5c30:	490a      	ldr	r1, [pc, #40]	; (b5c5c <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xa8>)
   b5c32:	f001 fb4e 	bl	b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if ((v == 0x00) || (v == 0xFF))
   b5c36:	2cfd      	cmp	r4, #253	; 0xfd
   b5c38:	d903      	bls.n	b5c42 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x8e>
		Serial.println(F("WARNING: Communication failure, is the MFRC522 properly connected?"));
   b5c3a:	f002 f881 	bl	b7d40 <_Z16_fetch_usbserialv>
   b5c3e:	4908      	ldr	r1, [pc, #32]	; (b5c60 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0xac>)
   b5c40:	e7de      	b.n	b5c00 <_ZN7MFRC52223PCD_DumpVersionToSerialEv+0x4c>
} // End PCD_DumpVersionToSerial()
   b5c42:	bd10      	pop	{r4, pc}
   b5c44:	000b8650 	.word	0x000b8650
   b5c48:	000b8665 	.word	0x000b8665
   b5c4c:	000b8670 	.word	0x000b8670
   b5c50:	000b8678 	.word	0x000b8678
   b5c54:	000b8680 	.word	0x000b8680
   b5c58:	000b8688 	.word	0x000b8688
   b5c5c:	000b869c 	.word	0x000b869c
   b5c60:	000b86a9 	.word	0x000b86a9

000b5c64 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
								) {
   b5c64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5c68:	461c      	mov	r4, r3
   b5c6a:	4b14      	ldr	r3, [pc, #80]	; (b5cbc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x58>)
   b5c6c:	9300      	str	r3, [sp, #0]
   b5c6e:	4606      	mov	r6, r0
   b5c70:	4b13      	ldr	r3, [pc, #76]	; (b5cc0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x5c>)
   b5c72:	9302      	str	r3, [sp, #8]
   b5c74:	f04f 0800 	mov.w	r8, #0
   b5c78:	2301      	movs	r3, #1
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5c7a:	4668      	mov	r0, sp
								) {
   b5c7c:	4615      	mov	r5, r2
   b5c7e:	460f      	mov	r7, r1
   b5c80:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5c84:	f88d 8004 	strb.w	r8, [sp, #4]
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5c88:	f7ff feff 	bl	b5a8a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5c8c:	7c30      	ldrb	r0, [r6, #16]
   b5c8e:	4641      	mov	r1, r8
   b5c90:	f002 f9a5 	bl	b7fde <digitalWrite>
	SPI.transfer(reg);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b5c94:	4638      	mov	r0, r7
   b5c96:	f7ff fee7 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b5c9a:	4425      	add	r5, r4
   b5c9c:	42ac      	cmp	r4, r5
   b5c9e:	d004      	beq.n	b5caa <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x46>
		SPI.transfer(values[index]);
   b5ca0:	f814 0b01 	ldrb.w	r0, [r4], #1
   b5ca4:	f7ff fee0 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b5ca8:	e7f8      	b.n	b5c9c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x38>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b5caa:	7c30      	ldrb	r0, [r6, #16]
   b5cac:	2101      	movs	r1, #1
   b5cae:	f002 f996 	bl	b7fde <digitalWrite>
} // End PCD_WriteRegister()
   b5cb2:	b004      	add	sp, #16
   b5cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SPI.endTransaction(); // Stop using the SPI bus
   b5cb8:	f7ff bee0 	b.w	b5a7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5cbc:	000b8644 	.word	0x000b8644
   b5cc0:	003d0900 	.word	0x003d0900

000b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
								) {
   b5cc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5cc8:	4604      	mov	r4, r0
   b5cca:	4b11      	ldr	r3, [pc, #68]	; (b5d10 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x4c>)
   b5ccc:	9300      	str	r3, [sp, #0]
   b5cce:	f04f 0800 	mov.w	r8, #0
   b5cd2:	4b10      	ldr	r3, [pc, #64]	; (b5d14 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x50>)
   b5cd4:	9302      	str	r3, [sp, #8]
   b5cd6:	2701      	movs	r7, #1
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5cd8:	4668      	mov	r0, sp
								) {
   b5cda:	4615      	mov	r5, r2
   b5cdc:	460e      	mov	r6, r1
   b5cde:	f88d 8004 	strb.w	r8, [sp, #4]
   b5ce2:	f8ad 700c 	strh.w	r7, [sp, #12]
	SPI.beginTransaction(SPISettings(MFRC522_SPICLOCK, MSBFIRST, SPI_MODE0));	// Set the settings to work with SPI bus
   b5ce6:	f7ff fed0 	bl	b5a8a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5cea:	4641      	mov	r1, r8
   b5cec:	7c20      	ldrb	r0, [r4, #16]
   b5cee:	f002 f976 	bl	b7fde <digitalWrite>
	SPI.transfer(reg);						// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b5cf2:	4630      	mov	r0, r6
   b5cf4:	f7ff feb8 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b5cf8:	4628      	mov	r0, r5
   b5cfa:	f7ff feb5 	bl	b5a68 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b5cfe:	7c20      	ldrb	r0, [r4, #16]
   b5d00:	4639      	mov	r1, r7
   b5d02:	f002 f96c 	bl	b7fde <digitalWrite>
} // End PCD_WriteRegister()
   b5d06:	b004      	add	sp, #16
   b5d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SPI.endTransaction(); // Stop using the SPI bus
   b5d0c:	f7ff beb6 	b.w	b5a7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5d10:	000b8644 	.word	0x000b8644
   b5d14:	003d0900 	.word	0x003d0900

000b5d18 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
									) { 
   b5d18:	b570      	push	{r4, r5, r6, lr}
   b5d1a:	4616      	mov	r6, r2
   b5d1c:	4604      	mov	r4, r0
   b5d1e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b5d20:	f7ff ff1e 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b5d24:	4330      	orrs	r0, r6
   b5d26:	b2c2      	uxtb	r2, r0
   b5d28:	4629      	mov	r1, r5
   b5d2a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b5d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b5d30:	f7ff bfc8 	b.w	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000b5d34 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
									  ) {
   b5d34:	b570      	push	{r4, r5, r6, lr}
   b5d36:	4616      	mov	r6, r2
   b5d38:	4604      	mov	r4, r0
   b5d3a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b5d3c:	f7ff ff10 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b5d40:	ea20 0006 	bic.w	r0, r0, r6
   b5d44:	b2c2      	uxtb	r2, r0
   b5d46:	4629      	mov	r1, r5
   b5d48:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b5d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b5d4e:	f7ff bfb9 	b.w	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000b5d52 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b5d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d54:	4604      	mov	r4, r0
   b5d56:	4616      	mov	r6, r2
   b5d58:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);		// Stop any active command.
   b5d5a:	2200      	movs	r2, #0
   b5d5c:	2102      	movs	r1, #2
					 ) {
   b5d5e:	461d      	mov	r5, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);		// Stop any active command.
   b5d60:	f7ff ffb0 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
   b5d64:	2204      	movs	r2, #4
   b5d66:	210a      	movs	r1, #10
   b5d68:	4620      	mov	r0, r4
   b5d6a:	f7ff ffab 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
   b5d6e:	2280      	movs	r2, #128	; 0x80
   b5d70:	2114      	movs	r1, #20
   b5d72:	4620      	mov	r0, r4
   b5d74:	f7ff ffa6 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, length, data);	// Write data to the FIFO
   b5d78:	463b      	mov	r3, r7
   b5d7a:	4632      	mov	r2, r6
   b5d7c:	2112      	movs	r1, #18
   b5d7e:	4620      	mov	r0, r4
   b5d80:	f7ff ff70 	bl	b5c64 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b5d84:	2203      	movs	r2, #3
   b5d86:	2102      	movs	r1, #2
   b5d88:	4620      	mov	r0, r4
   b5d8a:	f7ff ff9b 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
   b5d8e:	f000 fe1f 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
	const uint32_t deadline = millis() + 89;
   b5d92:	f100 0659 	add.w	r6, r0, #89	; 0x59
		byte n = PCD_ReadRegister(DivIrqReg);
   b5d96:	210a      	movs	r1, #10
   b5d98:	4620      	mov	r0, r4
   b5d9a:	f7ff fee1 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
		if (n & 0x04) {									// CRCIRq bit set - calculation done
   b5d9e:	0743      	lsls	r3, r0, #29
   b5da0:	d510      	bpl.n	b5dc4 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x72>
			PCD_WriteRegister(CommandReg, PCD_Idle);	// Stop calculating CRC for new content in the FIFO.
   b5da2:	2200      	movs	r2, #0
   b5da4:	2102      	movs	r1, #2
   b5da6:	4620      	mov	r0, r4
   b5da8:	f7ff ff8c 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
			result[0] = PCD_ReadRegister(CRCResultRegL);
   b5dac:	2144      	movs	r1, #68	; 0x44
   b5dae:	4620      	mov	r0, r4
   b5db0:	f7ff fed6 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
			result[1] = PCD_ReadRegister(CRCResultRegH);
   b5db4:	2142      	movs	r1, #66	; 0x42
			result[0] = PCD_ReadRegister(CRCResultRegL);
   b5db6:	7028      	strb	r0, [r5, #0]
			result[1] = PCD_ReadRegister(CRCResultRegH);
   b5db8:	4620      	mov	r0, r4
   b5dba:	f7ff fed1 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
   b5dbe:	7068      	strb	r0, [r5, #1]
			return STATUS_OK;
   b5dc0:	2000      	movs	r0, #0
} // End PCD_CalculateCRC()
   b5dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b5dc4:	f000 fdc4 	bl	b6950 <os_thread_yield>
   b5dc8:	f000 fe02 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
	while (static_cast<uint32_t> (millis()) < deadline);
   b5dcc:	4286      	cmp	r6, r0
   b5dce:	d8e2      	bhi.n	b5d96 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x44>
	return STATUS_TIMEOUT;
   b5dd0:	2003      	movs	r0, #3
   b5dd2:	e7f6      	b.n	b5dc2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x70>

000b5dd4 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b5dd4:	b538      	push	{r3, r4, r5, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b5dd6:	220f      	movs	r2, #15
   b5dd8:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b5dda:	4605      	mov	r5, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b5ddc:	f7ff ff72 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
   b5de0:	2403      	movs	r4, #3
		delay(50);
   b5de2:	2032      	movs	r0, #50	; 0x32
   b5de4:	f001 f850 	bl	b6e88 <delay>
	} while ((PCD_ReadRegister(CommandReg) & (1 << 4)) && (++count) < 3);
   b5de8:	2102      	movs	r1, #2
   b5dea:	4628      	mov	r0, r5
   b5dec:	f7ff feb8 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
   b5df0:	06c3      	lsls	r3, r0, #27
   b5df2:	d503      	bpl.n	b5dfc <_ZN7MFRC5229PCD_ResetEv+0x28>
   b5df4:	3c01      	subs	r4, #1
   b5df6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b5dfa:	d1f2      	bne.n	b5de2 <_ZN7MFRC5229PCD_ResetEv+0xe>
} // End PCD_Reset()
   b5dfc:	bd38      	pop	{r3, r4, r5, pc}

000b5dfe <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b5dfe:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b5e00:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b5e02:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b5e04:	f7ff feac 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
	if ((value & 0x03) != 0x03) {
   b5e08:	f000 0303 	and.w	r3, r0, #3
   b5e0c:	2b03      	cmp	r3, #3
   b5e0e:	d008      	beq.n	b5e22 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b5e10:	f040 0203 	orr.w	r2, r0, #3
   b5e14:	b2d2      	uxtb	r2, r2
   b5e16:	4620      	mov	r0, r4
   b5e18:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b5e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b5e1e:	f7ff bf51 	b.w	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
} // End PCD_AntennaOn()
   b5e22:	bd10      	pop	{r4, pc}

000b5e24 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b5e24:	b538      	push	{r3, r4, r5, lr}
   b5e26:	4604      	mov	r4, r0
	pinMode(_chipSelectPin, OUTPUT);
   b5e28:	2101      	movs	r1, #1
   b5e2a:	7c00      	ldrb	r0, [r0, #16]
   b5e2c:	f002 f8c6 	bl	b7fbc <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b5e30:	7c20      	ldrb	r0, [r4, #16]
   b5e32:	2101      	movs	r1, #1
   b5e34:	f002 f8d3 	bl	b7fde <digitalWrite>
	if (_resetPowerDownPin != UNUSED_PIN) {
   b5e38:	7c60      	ldrb	r0, [r4, #17]
   b5e3a:	28ff      	cmp	r0, #255	; 0xff
   b5e3c:	d04c      	beq.n	b5ed8 <_ZN7MFRC5228PCD_InitEv+0xb4>
		pinMode(_resetPowerDownPin, INPUT);
   b5e3e:	2100      	movs	r1, #0
   b5e40:	f002 f8bc 	bl	b7fbc <pinMode>
		if (digitalRead(_resetPowerDownPin) == LOW) {	// The MFRC522 chip is in power down mode.
   b5e44:	7c60      	ldrb	r0, [r4, #17]
   b5e46:	f002 f8e3 	bl	b8010 <digitalRead>
   b5e4a:	4605      	mov	r5, r0
   b5e4c:	2800      	cmp	r0, #0
   b5e4e:	d143      	bne.n	b5ed8 <_ZN7MFRC5228PCD_InitEv+0xb4>
			pinMode(_resetPowerDownPin, OUTPUT);		// Now set the resetPowerDownPin as digital output.
   b5e50:	7c60      	ldrb	r0, [r4, #17]
   b5e52:	2101      	movs	r1, #1
   b5e54:	f002 f8b2 	bl	b7fbc <pinMode>
			digitalWrite(_resetPowerDownPin, LOW);		// Make sure we have a clean LOW state.
   b5e58:	4629      	mov	r1, r5
   b5e5a:	7c60      	ldrb	r0, [r4, #17]
   b5e5c:	f002 f8bf 	bl	b7fde <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5e60:	2002      	movs	r0, #2
   b5e62:	f000 fda5 	bl	b69b0 <HAL_Delay_Microseconds>
			digitalWrite(_resetPowerDownPin, HIGH);		// Exit power down mode. This triggers a hard reset.
   b5e66:	7c60      	ldrb	r0, [r4, #17]
   b5e68:	2101      	movs	r1, #1
   b5e6a:	f002 f8b8 	bl	b7fde <digitalWrite>
			delay(50);
   b5e6e:	2032      	movs	r0, #50	; 0x32
   b5e70:	f001 f80a 	bl	b6e88 <delay>
	PCD_WriteRegister(TxModeReg, 0x00);
   b5e74:	4620      	mov	r0, r4
   b5e76:	2200      	movs	r2, #0
   b5e78:	2124      	movs	r1, #36	; 0x24
   b5e7a:	f7ff ff23 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
   b5e7e:	4620      	mov	r0, r4
   b5e80:	2200      	movs	r2, #0
   b5e82:	2126      	movs	r1, #38	; 0x26
   b5e84:	f7ff ff1e 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ModWidthReg, 0x26);
   b5e88:	4620      	mov	r0, r4
   b5e8a:	2226      	movs	r2, #38	; 0x26
   b5e8c:	2148      	movs	r1, #72	; 0x48
   b5e8e:	f7ff ff19 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b5e92:	4620      	mov	r0, r4
   b5e94:	2280      	movs	r2, #128	; 0x80
   b5e96:	2154      	movs	r1, #84	; 0x54
   b5e98:	f7ff ff14 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	22a9      	movs	r2, #169	; 0xa9
   b5ea0:	2156      	movs	r1, #86	; 0x56
   b5ea2:	f7ff ff0f 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b5ea6:	4620      	mov	r0, r4
   b5ea8:	2203      	movs	r2, #3
   b5eaa:	2158      	movs	r1, #88	; 0x58
   b5eac:	f7ff ff0a 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TReloadRegL, 0xE8);
   b5eb0:	4620      	mov	r0, r4
   b5eb2:	22e8      	movs	r2, #232	; 0xe8
   b5eb4:	215a      	movs	r1, #90	; 0x5a
   b5eb6:	f7ff ff05 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b5eba:	4620      	mov	r0, r4
   b5ebc:	2240      	movs	r2, #64	; 0x40
   b5ebe:	212a      	movs	r1, #42	; 0x2a
   b5ec0:	f7ff ff00 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	223d      	movs	r2, #61	; 0x3d
   b5ec8:	2122      	movs	r1, #34	; 0x22
   b5eca:	f7ff fefb 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b5ece:	4620      	mov	r0, r4
} // End PCD_Init()
   b5ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b5ed4:	f7ff bf93 	b.w	b5dfe <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b5ed8:	4620      	mov	r0, r4
   b5eda:	f7ff ff7b 	bl	b5dd4 <_ZN7MFRC5229PCD_ResetEv>
   b5ede:	e7c9      	b.n	b5e74 <_ZN7MFRC5228PCD_InitEv+0x50>

000b5ee0 <_ZN7MFRC52219PCD_PerformSelfTestEv>:
bool MFRC522::PCD_PerformSelfTest() {
   b5ee0:	b530      	push	{r4, r5, lr}
	byte ZEROES[25] = {0x00};
   b5ee2:	2500      	movs	r5, #0
bool MFRC522::PCD_PerformSelfTest() {
   b5ee4:	b09b      	sub	sp, #108	; 0x6c
   b5ee6:	4604      	mov	r4, r0
	PCD_Reset();
   b5ee8:	f7ff ff74 	bl	b5dd4 <_ZN7MFRC5229PCD_ResetEv>
	byte ZEROES[25] = {0x00};
   b5eec:	4629      	mov	r1, r5
   b5eee:	2215      	movs	r2, #21
   b5ef0:	a804      	add	r0, sp, #16
   b5ef2:	9503      	str	r5, [sp, #12]
   b5ef4:	f002 fa46 	bl	b8384 <memset>
	PCD_WriteRegister(FIFOLevelReg, 0x80);		// flush the FIFO buffer
   b5ef8:	2280      	movs	r2, #128	; 0x80
   b5efa:	2114      	movs	r1, #20
   b5efc:	4620      	mov	r0, r4
   b5efe:	f7ff fee1 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, 25, ZEROES);	// write 25 bytes of 00h to FIFO
   b5f02:	ab03      	add	r3, sp, #12
   b5f04:	2219      	movs	r2, #25
   b5f06:	2112      	movs	r1, #18
   b5f08:	4620      	mov	r0, r4
   b5f0a:	f7ff feab 	bl	b5c64 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(CommandReg, PCD_Mem);		// transfer to internal buffer
   b5f0e:	2201      	movs	r2, #1
   b5f10:	2102      	movs	r1, #2
   b5f12:	4620      	mov	r0, r4
   b5f14:	f7ff fed6 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(AutoTestReg, 0x09);
   b5f18:	2209      	movs	r2, #9
   b5f1a:	216c      	movs	r1, #108	; 0x6c
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	f7ff fed1 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(FIFODataReg, 0x00);
   b5f22:	462a      	mov	r2, r5
   b5f24:	2112      	movs	r1, #18
   b5f26:	4620      	mov	r0, r4
   b5f28:	f7ff fecc 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);
   b5f2c:	2203      	movs	r2, #3
   b5f2e:	2102      	movs	r1, #2
   b5f30:	4620      	mov	r0, r4
   b5f32:	f7ff fec7 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
   b5f36:	25ff      	movs	r5, #255	; 0xff
		n = PCD_ReadRegister(FIFOLevelReg);
   b5f38:	2114      	movs	r1, #20
   b5f3a:	4620      	mov	r0, r4
   b5f3c:	f7ff fe10 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
		if (n >= 64) {
   b5f40:	283f      	cmp	r0, #63	; 0x3f
   b5f42:	d803      	bhi.n	b5f4c <_ZN7MFRC52219PCD_PerformSelfTestEv+0x6c>
	for (uint8_t i = 0; i < 0xFF; i++) {
   b5f44:	3d01      	subs	r5, #1
   b5f46:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5f4a:	d1f5      	bne.n	b5f38 <_ZN7MFRC52219PCD_PerformSelfTestEv+0x58>
	PCD_WriteRegister(CommandReg, PCD_Idle);		// Stop calculating CRC for new content in the FIFO.
   b5f4c:	2200      	movs	r2, #0
   b5f4e:	2102      	movs	r1, #2
   b5f50:	4620      	mov	r0, r4
   b5f52:	2500      	movs	r5, #0
   b5f54:	f7ff feb6 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	if (count == 0) {
   b5f58:	ab0a      	add	r3, sp, #40	; 0x28
   b5f5a:	2240      	movs	r2, #64	; 0x40
   b5f5c:	2112      	movs	r1, #18
   b5f5e:	4620      	mov	r0, r4
   b5f60:	9500      	str	r5, [sp, #0]
   b5f62:	f7ff fd9d 	bl	b5aa0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.0>
	PCD_WriteRegister(AutoTestReg, 0x00);
   b5f66:	462a      	mov	r2, r5
   b5f68:	216c      	movs	r1, #108	; 0x6c
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff feaa 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	byte version = PCD_ReadRegister(VersionReg);
   b5f70:	216e      	movs	r1, #110	; 0x6e
   b5f72:	4620      	mov	r0, r4
   b5f74:	f7ff fdf4 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
	switch (version) {
   b5f78:	3888      	subs	r0, #136	; 0x88
   b5f7a:	280a      	cmp	r0, #10
   b5f7c:	d81f      	bhi.n	b5fbe <_ZN7MFRC52219PCD_PerformSelfTestEv+0xde>
   b5f7e:	e8df f000 	tbb	[pc, r0]
   b5f82:	1e1c      	.short	0x1e1c
   b5f84:	1e1e1e1e 	.word	0x1e1e1e1e
   b5f88:	18061e1e 	.word	0x18061e1e
   b5f8c:	1a          	.byte	0x1a
   b5f8d:	00          	.byte	0x00
	byte version = PCD_ReadRegister(VersionReg);
   b5f8e:	4b0d      	ldr	r3, [pc, #52]	; (b5fc4 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xe4>)
	for (uint8_t i = 0; i < 64; i++) {
   b5f90:	1e59      	subs	r1, r3, #1
   b5f92:	aa0a      	add	r2, sp, #40	; 0x28
   b5f94:	333f      	adds	r3, #63	; 0x3f
		if (result[i] != pgm_read_byte(&(reference[i]))) {
   b5f96:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5f9a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   b5f9e:	4285      	cmp	r5, r0
   b5fa0:	d10d      	bne.n	b5fbe <_ZN7MFRC52219PCD_PerformSelfTestEv+0xde>
	for (uint8_t i = 0; i < 64; i++) {
   b5fa2:	4299      	cmp	r1, r3
   b5fa4:	d1f7      	bne.n	b5f96 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xb6>
	PCD_Init();
   b5fa6:	4620      	mov	r0, r4
   b5fa8:	f7ff ff3c 	bl	b5e24 <_ZN7MFRC5228PCD_InitEv>
	return true;
   b5fac:	2001      	movs	r0, #1
} // End PCD_PerformSelfTest()
   b5fae:	b01b      	add	sp, #108	; 0x6c
   b5fb0:	bd30      	pop	{r4, r5, pc}
			reference = MFRC522_firmware_referenceV1_0;
   b5fb2:	4b05      	ldr	r3, [pc, #20]	; (b5fc8 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xe8>)
			break;
   b5fb4:	e7ec      	b.n	b5f90 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xb0>
			reference = MFRC522_firmware_referenceV2_0;
   b5fb6:	4b05      	ldr	r3, [pc, #20]	; (b5fcc <_ZN7MFRC52219PCD_PerformSelfTestEv+0xec>)
			break;
   b5fb8:	e7ea      	b.n	b5f90 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xb0>
			reference = FM17522_firmware_reference;
   b5fba:	4b05      	ldr	r3, [pc, #20]	; (b5fd0 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xf0>)
   b5fbc:	e7e8      	b.n	b5f90 <_ZN7MFRC52219PCD_PerformSelfTestEv+0xb0>
			return false;
   b5fbe:	2000      	movs	r0, #0
   b5fc0:	e7f5      	b.n	b5fae <_ZN7MFRC52219PCD_PerformSelfTestEv+0xce>
   b5fc2:	bf00      	nop
   b5fc4:	000b872c 	.word	0x000b872c
   b5fc8:	000b876c 	.word	0x000b876c
   b5fcc:	000b87ac 	.word	0x000b87ac
   b5fd0:	000b86ec 	.word	0x000b86ec

000b5fd4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b5fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fd8:	b087      	sub	sp, #28
   b5fda:	4692      	mov	sl, r2
   b5fdc:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   b5fe0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   b5fe4:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   b5fe8:	9202      	str	r2, [sp, #8]
   b5fea:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
   b5fee:	4604      	mov	r4, r0
   b5ff0:	4689      	mov	r9, r1
	byte txLastBits = validBits ? *validBits : 0;
   b5ff2:	f1b8 0f00 	cmp.w	r8, #0
   b5ff6:	d03e      	beq.n	b6076 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa2>
   b5ff8:	f898 6000 	ldrb.w	r6, [r8]
   b5ffc:	9303      	str	r3, [sp, #12]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b5ffe:	2200      	movs	r2, #0
   b6000:	2102      	movs	r1, #2
   b6002:	4620      	mov	r0, r4
   b6004:	f7ff fe5e 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b6008:	227f      	movs	r2, #127	; 0x7f
   b600a:	2108      	movs	r1, #8
   b600c:	4620      	mov	r0, r4
   b600e:	f7ff fe59 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	byte bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6012:	eb06 160b 	add.w	r6, r6, fp, lsl #4
	PCD_WriteRegister(FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
   b6016:	2280      	movs	r2, #128	; 0x80
   b6018:	2114      	movs	r1, #20
   b601a:	4620      	mov	r0, r4
   b601c:	f7ff fe52 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	byte bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b6020:	b2f6      	uxtb	r6, r6
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b6022:	9b03      	ldr	r3, [sp, #12]
   b6024:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b6028:	2112      	movs	r1, #18
   b602a:	4620      	mov	r0, r4
   b602c:	f7ff fe1a 	bl	b5c64 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b6030:	4632      	mov	r2, r6
   b6032:	211a      	movs	r1, #26
   b6034:	4620      	mov	r0, r4
   b6036:	f7ff fe45 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(CommandReg, command);				// Execute the command
   b603a:	464a      	mov	r2, r9
   b603c:	2102      	movs	r1, #2
   b603e:	4620      	mov	r0, r4
   b6040:	f7ff fe40 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	if (command == PCD_Transceive) {
   b6044:	f1b9 0f0c 	cmp.w	r9, #12
   b6048:	d104      	bne.n	b6054 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x80>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b604a:	2280      	movs	r2, #128	; 0x80
   b604c:	211a      	movs	r1, #26
   b604e:	4620      	mov	r0, r4
   b6050:	f7ff fe62 	bl	b5d18 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6054:	f000 fcbc 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
	const uint32_t deadline = millis() + 36;
   b6058:	f100 0624 	add.w	r6, r0, #36	; 0x24
		byte n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b605c:	2108      	movs	r1, #8
   b605e:	4620      	mov	r0, r4
   b6060:	f7ff fd7e 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b6064:	ea10 0f0a 	tst.w	r0, sl
   b6068:	d15b      	bne.n	b6122 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b606a:	07c3      	lsls	r3, r0, #31
   b606c:	d505      	bpl.n	b607a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa6>
			return STATUS_TIMEOUT;
   b606e:	2003      	movs	r0, #3
} // End PCD_CommunicateWithPICC()
   b6070:	b007      	add	sp, #28
   b6072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	byte txLastBits = validBits ? *validBits : 0;
   b6076:	4646      	mov	r6, r8
   b6078:	e7c0      	b.n	b5ffc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x28>
   b607a:	f000 fc69 	bl	b6950 <os_thread_yield>
   b607e:	f000 fca7 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
	while (static_cast<uint32_t> (millis()) < deadline);
   b6082:	4286      	cmp	r6, r0
   b6084:	d8ea      	bhi.n	b605c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
   b6086:	e7f2      	b.n	b606e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
	if (backData && backLen) {
   b6088:	b1df      	cbz	r7, b60c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xee>
   b608a:	b1d5      	cbz	r5, b60c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xee>
		byte n = PCD_ReadRegister(FIFOLevelReg);	// Number of bytes in the FIFO
   b608c:	2114      	movs	r1, #20
   b608e:	4620      	mov	r0, r4
   b6090:	f7ff fd66 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
		if (n > *backLen) {
   b6094:	782b      	ldrb	r3, [r5, #0]
   b6096:	4283      	cmp	r3, r0
		byte n = PCD_ReadRegister(FIFOLevelReg);	// Number of bytes in the FIFO
   b6098:	4602      	mov	r2, r0
		if (n > *backLen) {
   b609a:	d33e      	bcc.n	b611a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		*backLen = n;											// Number of bytes returned
   b609c:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);	// Get received data from FIFO
   b609e:	463b      	mov	r3, r7
   b60a0:	2112      	movs	r1, #18
   b60a2:	4620      	mov	r0, r4
   b60a4:	f8cd b000 	str.w	fp, [sp]
   b60a8:	f7ff fd4e 	bl	b5b48 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;		// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b60ac:	2118      	movs	r1, #24
   b60ae:	4620      	mov	r0, r4
   b60b0:	f7ff fd56 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
   b60b4:	f000 0307 	and.w	r3, r0, #7
		if (validBits) {
   b60b8:	f1b8 0f00 	cmp.w	r8, #0
   b60bc:	d001      	beq.n	b60c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xee>
			*validBits = _validBits;
   b60be:	f888 3000 	strb.w	r3, [r8]
	if (errorRegValue & 0x08) {		// CollErr
   b60c2:	f016 0008 	ands.w	r0, r6, #8
   b60c6:	d12a      	bne.n	b611e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
	if (backData && backLen && checkCRC) {
   b60c8:	2f00      	cmp	r7, #0
   b60ca:	d0d1      	beq.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
   b60cc:	2d00      	cmp	r5, #0
   b60ce:	d0cf      	beq.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
   b60d0:	9a02      	ldr	r2, [sp, #8]
   b60d2:	2a00      	cmp	r2, #0
   b60d4:	d0cc      	beq.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
		if (*backLen == 1 && _validBits == 4) {
   b60d6:	782a      	ldrb	r2, [r5, #0]
   b60d8:	2a01      	cmp	r2, #1
   b60da:	d103      	bne.n	b60e4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x110>
   b60dc:	2b04      	cmp	r3, #4
   b60de:	d11a      	bne.n	b6116 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_MIFARE_NACK;
   b60e0:	20ff      	movs	r0, #255	; 0xff
   b60e2:	e7c5      	b.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
		if (*backLen < 2 || _validBits != 0) {
   b60e4:	d917      	bls.n	b6116 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
   b60e6:	b9b3      	cbnz	r3, b6116 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
		MFRC522::StatusCode status = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b60e8:	3a02      	subs	r2, #2
   b60ea:	ab05      	add	r3, sp, #20
   b60ec:	b2d2      	uxtb	r2, r2
   b60ee:	4639      	mov	r1, r7
   b60f0:	4620      	mov	r0, r4
   b60f2:	f7ff fe2e 	bl	b5d52 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (status != STATUS_OK) {
   b60f6:	2800      	cmp	r0, #0
   b60f8:	d1ba      	bne.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b60fa:	782b      	ldrb	r3, [r5, #0]
   b60fc:	441f      	add	r7, r3
   b60fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b6102:	f817 2c02 	ldrb.w	r2, [r7, #-2]
   b6106:	429a      	cmp	r2, r3
   b6108:	d105      	bne.n	b6116 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
   b610a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   b610e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   b6112:	429a      	cmp	r2, r3
   b6114:	d0ac      	beq.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
			return STATUS_CRC_WRONG;
   b6116:	2007      	movs	r0, #7
   b6118:	e7aa      	b.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
			return STATUS_NO_ROOM;
   b611a:	2004      	movs	r0, #4
   b611c:	e7a8      	b.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
		return STATUS_COLLISION;
   b611e:	2002      	movs	r0, #2
   b6120:	e7a6      	b.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
   b6122:	210c      	movs	r1, #12
   b6124:	4620      	mov	r0, r4
   b6126:	f7ff fd1b 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b612a:	f010 0313 	ands.w	r3, r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
   b612e:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b6130:	d0aa      	beq.n	b6088 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
		return STATUS_ERROR;
   b6132:	2001      	movs	r0, #1
   b6134:	e79c      	b.n	b6070 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9c>

000b6136 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b6136:	b510      	push	{r4, lr}
   b6138:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b613a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b613e:	9405      	str	r4, [sp, #20]
   b6140:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b6144:	9404      	str	r4, [sp, #16]
   b6146:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b6148:	9403      	str	r4, [sp, #12]
   b614a:	9c08      	ldr	r4, [sp, #32]
   b614c:	9200      	str	r2, [sp, #0]
   b614e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b6152:	2230      	movs	r2, #48	; 0x30
   b6154:	460b      	mov	r3, r1
   b6156:	210c      	movs	r1, #12
   b6158:	f7ff ff3c 	bl	b5fd4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b615c:	b006      	add	sp, #24
   b615e:	bd10      	pop	{r4, pc}

000b6160 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
											) {
   b6160:	b570      	push	{r4, r5, r6, lr}
   b6162:	b088      	sub	sp, #32
   b6164:	4606      	mov	r6, r0
   b6166:	461c      	mov	r4, r3
   b6168:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b616c:	4615      	mov	r5, r2
   b616e:	b312      	cbz	r2, b61b6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
   b6170:	781b      	ldrb	r3, [r3, #0]
   b6172:	2b01      	cmp	r3, #1
   b6174:	d91f      	bls.n	b61b6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
   b6176:	2280      	movs	r2, #128	; 0x80
   b6178:	211c      	movs	r1, #28
   b617a:	f7ff fddb 	bl	b5d34 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b617e:	2307      	movs	r3, #7
   b6180:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b6184:	2300      	movs	r3, #0
   b6186:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b618a:	f10d 031f 	add.w	r3, sp, #31
   b618e:	e9cd 4300 	strd	r4, r3, [sp]
   b6192:	2201      	movs	r2, #1
   b6194:	462b      	mov	r3, r5
   b6196:	f10d 0117 	add.w	r1, sp, #23
   b619a:	4630      	mov	r0, r6
   b619c:	f7ff ffcb 	bl	b6136 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b61a0:	b938      	cbnz	r0, b61b2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x52>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b61a2:	7823      	ldrb	r3, [r4, #0]
   b61a4:	2b02      	cmp	r3, #2
   b61a6:	d108      	bne.n	b61ba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
   b61a8:	f89d 001f 	ldrb.w	r0, [sp, #31]
		return STATUS_NO_ROOM;
   b61ac:	3800      	subs	r0, #0
   b61ae:	bf18      	it	ne
   b61b0:	2001      	movne	r0, #1
} // End PICC_REQA_or_WUPA()
   b61b2:	b008      	add	sp, #32
   b61b4:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b61b6:	2004      	movs	r0, #4
   b61b8:	e7fb      	b.n	b61b2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x52>
		return STATUS_ERROR;
   b61ba:	2001      	movs	r0, #1
   b61bc:	e7f9      	b.n	b61b2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x52>

000b61be <_ZN7MFRC52213PICC_RequestAEPhS0_>:
										) {
   b61be:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b61c0:	460a      	mov	r2, r1
   b61c2:	2126      	movs	r1, #38	; 0x26
   b61c4:	f7ff bfcc 	b.w	b6160 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b61c8 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
bool MFRC522::PICC_IsNewCardPresent() {
   b61c8:	b513      	push	{r0, r1, r4, lr}
	byte bufferSize = sizeof(bufferATQA);
   b61ca:	2302      	movs	r3, #2
bool MFRC522::PICC_IsNewCardPresent() {
   b61cc:	4604      	mov	r4, r0
	PCD_WriteRegister(TxModeReg, 0x00);
   b61ce:	2200      	movs	r2, #0
   b61d0:	2124      	movs	r1, #36	; 0x24
	byte bufferSize = sizeof(bufferATQA);
   b61d2:	f88d 3003 	strb.w	r3, [sp, #3]
	PCD_WriteRegister(TxModeReg, 0x00);
   b61d6:	f7ff fd75 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
   b61da:	4620      	mov	r0, r4
   b61dc:	2200      	movs	r2, #0
   b61de:	2126      	movs	r1, #38	; 0x26
   b61e0:	f7ff fd70 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(ModWidthReg, 0x26);
   b61e4:	4620      	mov	r0, r4
   b61e6:	2226      	movs	r2, #38	; 0x26
   b61e8:	2148      	movs	r1, #72	; 0x48
   b61ea:	f7ff fd6b 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
   b61ee:	f10d 0203 	add.w	r2, sp, #3
   b61f2:	a901      	add	r1, sp, #4
   b61f4:	4620      	mov	r0, r4
   b61f6:	f7ff ffe2 	bl	b61be <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b61fa:	f010 0ffd 	tst.w	r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b61fe:	bf0c      	ite	eq
   b6200:	2001      	moveq	r0, #1
   b6202:	2000      	movne	r0, #0
   b6204:	b002      	add	sp, #8
   b6206:	bd10      	pop	{r4, pc}

000b6208 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
										 ) {
   b6208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b620c:	2a50      	cmp	r2, #80	; 0x50
										 ) {
   b620e:	b08b      	sub	sp, #44	; 0x2c
   b6210:	4682      	mov	sl, r0
   b6212:	460f      	mov	r7, r1
   b6214:	4690      	mov	r8, r2
	if (validBits > 80) {
   b6216:	f200 813e 	bhi.w	b6496 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
   b621a:	2280      	movs	r2, #128	; 0x80
   b621c:	211c      	movs	r1, #28
   b621e:	f7ff fd89 	bl	b5d34 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b6222:	2393      	movs	r3, #147	; 0x93
   b6224:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b6228:	f1b8 0f00 	cmp.w	r8, #0
   b622c:	f000 80b9 	beq.w	b63a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19a>
   b6230:	783b      	ldrb	r3, [r7, #0]
   b6232:	2b04      	cmp	r3, #4
   b6234:	bf94      	ite	ls
   b6236:	2300      	movls	r3, #0
   b6238:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b623a:	2501      	movs	r5, #1
   b623c:	2600      	movs	r6, #0
   b623e:	e00b      	b.n	b6258 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b6240:	2395      	movs	r3, #149	; 0x95
   b6242:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b6246:	f1b8 0f00 	cmp.w	r8, #0
   b624a:	f000 80ac 	beq.w	b63a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19e>
   b624e:	783b      	ldrb	r3, [r7, #0]
   b6250:	2b07      	cmp	r3, #7
   b6252:	bf94      	ite	ls
   b6254:	2300      	movls	r3, #0
   b6256:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b6258:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b625c:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b625e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b6262:	2b00      	cmp	r3, #0
   b6264:	f000 80a1 	beq.w	b63aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a2>
			buffer[index++] = PICC_CMD_CT;
   b6268:	2288      	movs	r2, #136	; 0x88
   b626a:	f88d 201e 	strb.w	r2, [sp, #30]
   b626e:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6270:	f014 0207 	ands.w	r2, r4, #7
   b6274:	bf18      	it	ne
   b6276:	2201      	movne	r2, #1
   b6278:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b627c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b6280:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b6282:	d01d      	beq.n	b62c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b6284:	2b00      	cmp	r3, #0
   b6286:	bf14      	ite	ne
   b6288:	f04f 0903 	movne.w	r9, #3
   b628c:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b6290:	f106 0c01 	add.w	ip, r6, #1
   b6294:	4591      	cmp	r9, r2
   b6296:	bf94      	ite	ls
   b6298:	eb01 0e09 	addls.w	lr, r1, r9
   b629c:	eb01 0e02 	addhi.w	lr, r1, r2
   b62a0:	fa57 fc8c 	uxtab	ip, r7, ip
   b62a4:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b62a8:	460a      	mov	r2, r1
   b62aa:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b62ae:	3101      	adds	r1, #1
   b62b0:	b2c9      	uxtb	r1, r1
   b62b2:	445a      	add	r2, fp
   b62b4:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b62b8:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b62bc:	4571      	cmp	r1, lr
   b62be:	d1f3      	bne.n	b62a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b62c0:	b10b      	cbz	r3, b62c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b62c2:	3008      	adds	r0, #8
   b62c4:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b62c6:	2c1f      	cmp	r4, #31
   b62c8:	dd71      	ble.n	b63ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b62ca:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b62ce:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b62d2:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b62d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b62da:	4053      	eors	r3, r2
   b62dc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b62e0:	4053      	eors	r3, r2
   b62e2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b62e6:	4053      	eors	r3, r2
   b62e8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b62ec:	2207      	movs	r2, #7
   b62ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b62f2:	a907      	add	r1, sp, #28
   b62f4:	4650      	mov	r0, sl
   b62f6:	f7ff fd2c 	bl	b5d52 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
   b62fa:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b62fc:	2800      	cmp	r0, #0
   b62fe:	f040 80c6 	bne.w	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
				responseLength	= 3;
   b6302:	2303      	movs	r3, #3
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b6304:	f88d 001a 	strb.w	r0, [sp, #26]
				responseLength	= 3;
   b6308:	f88d 301b 	strb.w	r3, [sp, #27]
   b630c:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b630e:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b6312:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a separate variable is overkill. But it makes the next line easier to read.
   b6316:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b631a:	9305      	str	r3, [sp, #20]
   b631c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b6320:	b2d2      	uxtb	r2, r2
   b6322:	211a      	movs	r1, #26
   b6324:	4650      	mov	r0, sl
   b6326:	f7ff fccd 	bl	b5cc4 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
   b632a:	9b05      	ldr	r3, [sp, #20]
   b632c:	9302      	str	r3, [sp, #8]
   b632e:	f10d 031a 	add.w	r3, sp, #26
   b6332:	2200      	movs	r2, #0
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	f10d 031b 	add.w	r3, sp, #27
   b633a:	9203      	str	r2, [sp, #12]
   b633c:	9300      	str	r3, [sp, #0]
   b633e:	464a      	mov	r2, r9
   b6340:	465b      	mov	r3, fp
   b6342:	a907      	add	r1, sp, #28
   b6344:	4650      	mov	r0, sl
   b6346:	f7ff fef6 	bl	b6136 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b634a:	2802      	cmp	r0, #2
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);
   b634c:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b634e:	d14a      	bne.n	b63e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1de>
				byte valueOfCollReg = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b6350:	211c      	movs	r1, #28
   b6352:	4650      	mov	r0, sl
   b6354:	f7ff fc04 	bl	b5b60 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
				if (valueOfCollReg & 0x20) { // CollPosNotValid
   b6358:	0683      	lsls	r3, r0, #26
   b635a:	f100 8098 	bmi.w	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
					collisionPos = 32;
   b635e:	f010 001f 	ands.w	r0, r0, #31
   b6362:	bf08      	it	eq
   b6364:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b6366:	42a0      	cmp	r0, r4
   b6368:	f340 8086 	ble.w	b6478 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b636c:	f010 0307 	ands.w	r3, r0, #7
   b6370:	bf18      	it	ne
   b6372:	2301      	movne	r3, #1
   b6374:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
				buffer[index]	|= (1 << checkBit);
   b6378:	aa0a      	add	r2, sp, #40	; 0x28
   b637a:	3301      	adds	r3, #1
   b637c:	4413      	add	r3, r2
				currentLevelKnownBits	= collisionPos;
   b637e:	b244      	sxtb	r4, r0
				checkBit		= (currentLevelKnownBits - 1) % 8;
   b6380:	3801      	subs	r0, #1
				buffer[index]	|= (1 << checkBit);
   b6382:	2201      	movs	r2, #1
				checkBit		= (currentLevelKnownBits - 1) % 8;
   b6384:	f000 0007 	and.w	r0, r0, #7
				buffer[index]	|= (1 << checkBit);
   b6388:	fa02 f000 	lsl.w	r0, r2, r0
   b638c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
   b6390:	4310      	orrs	r0, r2
   b6392:	f803 0c0c 	strb.w	r0, [r3, #-12]
		while (!selectDone) {
   b6396:	e796      	b.n	b62c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b6398:	2297      	movs	r2, #151	; 0x97
   b639a:	f88d 201c 	strb.w	r2, [sp, #28]
				uidIndex = 6;
   b639e:	2606      	movs	r6, #6
				break;
   b63a0:	e75a      	b.n	b6258 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b63a2:	4643      	mov	r3, r8
   b63a4:	e749      	b.n	b623a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b63a6:	4643      	mov	r3, r8
   b63a8:	e756      	b.n	b6258 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b63aa:	2102      	movs	r1, #2
   b63ac:	e760      	b.n	b6270 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b63ae:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b63b0:	3302      	adds	r3, #2
   b63b2:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b63b4:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b63b8:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b63bc:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b63c0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b63c4:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b63c8:	bf18      	it	ne
   b63ca:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b63ce:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b63d0:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b63d2:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b63d6:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b63da:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b63de:	f88d 301b 	strb.w	r3, [sp, #27]
   b63e2:	9404      	str	r4, [sp, #16]
   b63e4:	e797      	b.n	b6316 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x10e>
			else if (result != STATUS_OK) {
   b63e6:	2800      	cmp	r0, #0
   b63e8:	d151      	bne.n	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b63ea:	9b04      	ldr	r3, [sp, #16]
   b63ec:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b63ee:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b63f2:	f77f af6a 	ble.w	b62ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b63f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b63fa:	2b88      	cmp	r3, #136	; 0x88
   b63fc:	d13f      	bne.n	b647e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x276>
   b63fe:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6400:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b6402:	3601      	adds	r6, #1
   b6404:	441a      	add	r2, r3
   b6406:	fa57 f686 	uxtab	r6, r7, r6
   b640a:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b640c:	4619      	mov	r1, r3
   b640e:	a80a      	add	r0, sp, #40	; 0x28
   b6410:	3301      	adds	r3, #1
   b6412:	4401      	add	r1, r0
   b6414:	b2db      	uxtb	r3, r3
   b6416:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b641a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b641e:	4293      	cmp	r3, r2
   b6420:	d1f4      	bne.n	b640c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x204>
		if (responseLength != 3 || txLastBits != 0) { // SAK must be exactly 24 bits (1 byte + CRC_A).
   b6422:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b6426:	2e03      	cmp	r6, #3
   b6428:	d138      	bne.n	b649c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
   b642a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b642e:	bbab      	cbnz	r3, b649c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b6430:	f10d 031e 	add.w	r3, sp, #30
   b6434:	2201      	movs	r2, #1
   b6436:	4659      	mov	r1, fp
   b6438:	4650      	mov	r0, sl
   b643a:	f7ff fc8a 	bl	b5d52 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
   b643e:	4681      	mov	r9, r0
   b6440:	4603      	mov	r3, r0
		if (result != STATUS_OK) {
   b6442:	bb20      	cbnz	r0, b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b6444:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b6448:	f89b 2001 	ldrb.w	r2, [fp, #1]
   b644c:	4291      	cmp	r1, r2
   b644e:	d128      	bne.n	b64a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29a>
   b6450:	f89d 101f 	ldrb.w	r1, [sp, #31]
   b6454:	f89b 2002 	ldrb.w	r2, [fp, #2]
   b6458:	4291      	cmp	r1, r2
   b645a:	d122      	bne.n	b64a2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29a>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b645c:	f89b 2000 	ldrb.w	r2, [fp]
   b6460:	f012 0904 	ands.w	r9, r2, #4
   b6464:	d00e      	beq.n	b6484 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27c>
			cascadeLevel++;
   b6466:	3501      	adds	r5, #1
   b6468:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b646a:	2d03      	cmp	r5, #3
   b646c:	d094      	beq.n	b6398 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x190>
   b646e:	2d04      	cmp	r5, #4
   b6470:	d002      	beq.n	b6478 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
   b6472:	2d02      	cmp	r5, #2
   b6474:	f43f aee4 	beq.w	b6240 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b6478:	f04f 0905 	mov.w	r9, #5
   b647c:	e007      	b.n	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b647e:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b6480:	2204      	movs	r2, #4
   b6482:	e7be      	b.n	b6402 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fa>
	uid->size = 3 * cascadeLevel + 1;
   b6484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b6488:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b648a:	72fa      	strb	r2, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b648c:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b648e:	4648      	mov	r0, r9
   b6490:	b00b      	add	sp, #44	; 0x2c
   b6492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b6496:	f04f 0906 	mov.w	r9, #6
   b649a:	e7f8      	b.n	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
			return STATUS_ERROR;
   b649c:	f04f 0901 	mov.w	r9, #1
   b64a0:	e7f5      	b.n	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>
			return STATUS_CRC_WRONG;
   b64a2:	f04f 0907 	mov.w	r9, #7
   b64a6:	e7f2      	b.n	b648e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x286>

000b64a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b64a8:	b538      	push	{r3, r4, r5, lr}
   b64aa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b64ac:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b64ae:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b64b0:	b108      	cbz	r0, b64b6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b64b2:	f000 fcb9 	bl	b6e28 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b64b6:	79a3      	ldrb	r3, [r4, #6]
   b64b8:	2b06      	cmp	r3, #6
   b64ba:	bf0c      	ite	eq
   b64bc:	2004      	moveq	r0, #4
   b64be:	2003      	movne	r0, #3
   b64c0:	fb10 f005 	smulbb	r0, r0, r5
   b64c4:	b280      	uxth	r0, r0
   b64c6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b64c8:	f000 fca6 	bl	b6e18 <malloc>
   b64cc:	60e0      	str	r0, [r4, #12]
   b64ce:	b128      	cbz	r0, b64dc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b64d0:	88a2      	ldrh	r2, [r4, #4]
   b64d2:	2100      	movs	r1, #0
   b64d4:	f001 ff56 	bl	b8384 <memset>
    numLEDs = n;
   b64d8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b64da:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b64dc:	80a0      	strh	r0, [r4, #4]
   b64de:	8060      	strh	r0, [r4, #2]
}
   b64e0:	e7fb      	b.n	b64da <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b64e2 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b64e2:	b510      	push	{r4, lr}
   b64e4:	4604      	mov	r4, r0
    if (misoPinMode == OUTPUT) {
      digitalWrite(misoPin, misoValue);
    }
  }
#else
  pinMode(pin, OUTPUT);
   b64e6:	2101      	movs	r1, #1
   b64e8:	79c0      	ldrb	r0, [r0, #7]
   b64ea:	f001 fd67 	bl	b7fbc <pinMode>
  digitalWrite(pin, LOW);
   b64ee:	79e0      	ldrb	r0, [r4, #7]
   b64f0:	2100      	movs	r1, #0
   b64f2:	f001 fd74 	bl	b7fde <digitalWrite>
#endif // #if (PLATFORM_ID == 32)
  begun = true;
   b64f6:	2301      	movs	r3, #1
   b64f8:	7023      	strb	r3, [r4, #0]
}
   b64fa:	bd10      	pop	{r4, pc}

000b64fc <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b64fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b64fe:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b6500:	4605      	mov	r5, r0
   b6502:	460c      	mov	r4, r1
    if (begun) {
   b6504:	b11b      	cbz	r3, b650e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b6506:	79c0      	ldrb	r0, [r0, #7]
   b6508:	2100      	movs	r1, #0
   b650a:	f001 fd57 	bl	b7fbc <pinMode>
    }
    pin = p;
    if (begun) {
   b650e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b6510:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b6512:	b15b      	cbz	r3, b652c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b6514:	b2a0      	uxth	r0, r4
   b6516:	2101      	movs	r1, #1
   b6518:	9001      	str	r0, [sp, #4]
   b651a:	f001 fd4f 	bl	b7fbc <pinMode>
        digitalWrite(p, LOW);
   b651e:	9801      	ldr	r0, [sp, #4]
   b6520:	2100      	movs	r1, #0
    }
}
   b6522:	b003      	add	sp, #12
   b6524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b6528:	f001 bd59 	b.w	b7fde <digitalWrite>
}
   b652c:	b003      	add	sp, #12
   b652e:	bd30      	pop	{r4, r5, pc}

000b6530 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6530:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6532:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b6534:	4604      	mov	r4, r0
   b6536:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b6538:	7183      	strb	r3, [r0, #6]
   b653a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b653e:	7005      	strb	r5, [r0, #0]
   b6540:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b6542:	f7ff ffb1 	bl	b64a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b6546:	4620      	mov	r0, r4
   b6548:	4631      	mov	r1, r6
   b654a:	f7ff ffd7 	bl	b64fc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b654e:	4620      	mov	r0, r4
   b6550:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6554 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b6554:	68c3      	ldr	r3, [r0, #12]
   b6556:	2b00      	cmp	r3, #0
   b6558:	f000 81a4 	beq.w	b68a4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6560:	7983      	ldrb	r3, [r0, #6]
   b6562:	3b02      	subs	r3, #2
   b6564:	b2db      	uxtb	r3, r3
   b6566:	2b04      	cmp	r3, #4
   b6568:	bf9c      	itt	ls
   b656a:	4abf      	ldrls	r2, [pc, #764]	; (b6868 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b656c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b6570:	b085      	sub	sp, #20
   b6572:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b6574:	bf88      	it	hi
   b6576:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6578:	f000 fa22 	bl	b69c0 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b657c:	692b      	ldr	r3, [r5, #16]
   b657e:	1ac0      	subs	r0, r0, r3
   b6580:	42a0      	cmp	r0, r4
   b6582:	d3f9      	bcc.n	b6578 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b6584:	4cb9      	ldr	r4, [pc, #740]	; (b686c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b6586:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b6588:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b658c:	b91b      	cbnz	r3, b6596 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b658e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b6592:	2b00      	cmp	r3, #0
   b6594:	db7e      	blt.n	b6694 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b6596:	4cb6      	ldr	r4, [pc, #728]	; (b6870 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b6598:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b659c:	b923      	cbnz	r3, b65a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b659e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b65a2:	2b00      	cmp	r3, #0
   b65a4:	f2c0 816e 	blt.w	b6884 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b65a8:	4cb2      	ldr	r4, [pc, #712]	; (b6874 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b65aa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b65ae:	2b00      	cmp	r3, #0
   b65b0:	f000 8144 	beq.w	b683c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b65b4:	79eb      	ldrb	r3, [r5, #7]
   b65b6:	4ab0      	ldr	r2, [pc, #704]	; (b6878 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b65b8:	4cb0      	ldr	r4, [pc, #704]	; (b687c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b65ba:	6812      	ldr	r2, [r2, #0]
   b65bc:	0119      	lsls	r1, r3, #4
   b65be:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b65c2:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b65c4:	49ae      	ldr	r1, [pc, #696]	; (b6880 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b65c6:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b65c8:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b65cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b65d0:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b65d4:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b65d6:	f003 031f 	and.w	r3, r3, #31
   b65da:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b65de:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b65e0:	433a      	orrs	r2, r7
   b65e2:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b65e4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b65e6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b65ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b65ee:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b65f0:	2900      	cmp	r1, #0
   b65f2:	d044      	beq.n	b667e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b65f4:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b65f8:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b65fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b65fe:	f818 cb01 	ldrb.w	ip, [r8], #1
   b6602:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6604:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b6606:	6863      	ldr	r3, [r4, #4]
   b6608:	1a9b      	subs	r3, r3, r2
   b660a:	2b46      	cmp	r3, #70	; 0x46
   b660c:	d9fb      	bls.n	b6606 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b660e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b6610:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b6614:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b6618:	ea43 0307 	orr.w	r3, r3, r7
   b661c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b6620:	d02f      	beq.n	b6682 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b6622:	6863      	ldr	r3, [r4, #4]
   b6624:	1a9b      	subs	r3, r3, r2
   b6626:	2b28      	cmp	r3, #40	; 0x28
   b6628:	d9fb      	bls.n	b6622 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b662a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b662e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b6630:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b6634:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b6638:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b663c:	d1e3      	bne.n	b6606 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b663e:	88ab      	ldrh	r3, [r5, #4]
   b6640:	f10e 0e01 	add.w	lr, lr, #1
   b6644:	fa1f fe8e 	uxth.w	lr, lr
   b6648:	4573      	cmp	r3, lr
   b664a:	d8d8      	bhi.n	b65fe <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b664c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b6650:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b6654:	6863      	ldr	r3, [r4, #4]
   b6656:	1a9b      	subs	r3, r3, r2
   b6658:	2b46      	cmp	r3, #70	; 0x46
   b665a:	d9fb      	bls.n	b6654 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b665c:	6863      	ldr	r3, [r4, #4]
   b665e:	eba3 0909 	sub.w	r9, r3, r9
   b6662:	4589      	cmp	r9, r1
   b6664:	f0c0 80e4 	bcc.w	b6830 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6668:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b666c:	f000 f9a0 	bl	b69b0 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b6670:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b6672:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b6676:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b667a:	2900      	cmp	r1, #0
   b667c:	d1ba      	bne.n	b65f4 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b667e:	460a      	mov	r2, r1
   b6680:	e7e8      	b.n	b6654 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b6682:	6863      	ldr	r3, [r4, #4]
   b6684:	1a9b      	subs	r3, r3, r2
   b6686:	2b11      	cmp	r3, #17
   b6688:	d8cf      	bhi.n	b662a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b668a:	6863      	ldr	r3, [r4, #4]
   b668c:	1a9b      	subs	r3, r3, r2
   b668e:	2b11      	cmp	r3, #17
   b6690:	d9f7      	bls.n	b6682 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b6692:	e7ca      	b.n	b662a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6694:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6698:	2b00      	cmp	r3, #0
   b669a:	f6bf af7c 	bge.w	b6596 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b669e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b66a2:	2b00      	cmp	r3, #0
   b66a4:	f6bf af77 	bge.w	b6596 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b66a8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b66ac:	2b00      	cmp	r3, #0
   b66ae:	f6bf af72 	bge.w	b6596 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b66b2:	0136      	lsls	r6, r6, #4
   b66b4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b66b6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b66b8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b66ba:	f000 fbad 	bl	b6e18 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b66be:	2800      	cmp	r0, #0
   b66c0:	f43f af78 	beq.w	b65b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b66c4:	88ab      	ldrh	r3, [r5, #4]
   b66c6:	2b00      	cmp	r3, #0
   b66c8:	f000 80ed 	beq.w	b68a6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b66cc:	68ea      	ldr	r2, [r5, #12]
   b66ce:	3b01      	subs	r3, #1
   b66d0:	fa12 f783 	uxtah	r7, r2, r3
   b66d4:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b66d8:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b66da:	f248 0206 	movw	r2, #32774	; 0x8006
   b66de:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b66e2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b66e6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b66ea:	bf0c      	ite	eq
   b66ec:	4693      	moveq	fp, r2
   b66ee:	468b      	movne	fp, r1
   b66f0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b66f4:	bf0c      	ite	eq
   b66f6:	4616      	moveq	r6, r2
   b66f8:	460e      	movne	r6, r1
   b66fa:	f01c 0f20 	tst.w	ip, #32
   b66fe:	bf0c      	ite	eq
   b6700:	4690      	moveq	r8, r2
   b6702:	4688      	movne	r8, r1
        pos++;
   b6704:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6708:	f8cd 8008 	str.w	r8, [sp, #8]
   b670c:	9601      	str	r6, [sp, #4]
        pos++;
   b670e:	f103 0802 	add.w	r8, r3, #2
   b6712:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6716:	9e01      	ldr	r6, [sp, #4]
   b6718:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b671c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6720:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b6724:	9e02      	ldr	r6, [sp, #8]
   b6726:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b672a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b672e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b6732:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6736:	bf0c      	ite	eq
   b6738:	4693      	moveq	fp, r2
   b673a:	468b      	movne	fp, r1
   b673c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6740:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6744:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b6748:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b674c:	bf0c      	ite	eq
   b674e:	4693      	moveq	fp, r2
   b6750:	468b      	movne	fp, r1
   b6752:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b6756:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b675a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b675e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6762:	bf0c      	ite	eq
   b6764:	4693      	moveq	fp, r2
   b6766:	468b      	movne	fp, r1
   b6768:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b676c:	f103 0a08 	add.w	sl, r3, #8
   b6770:	f103 0806 	add.w	r8, r3, #6
   b6774:	3307      	adds	r3, #7
   b6776:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6778:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b677c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b6780:	bf0c      	ite	eq
   b6782:	4693      	moveq	fp, r2
   b6784:	468b      	movne	fp, r1
        pos++;
   b6786:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b678a:	f01c 0f01 	tst.w	ip, #1
   b678e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b6792:	bf15      	itete	ne
   b6794:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b6798:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b679c:	fa1f f38a 	uxthne.w	r3, sl
   b67a0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b67a4:	4577      	cmp	r7, lr
   b67a6:	d19c      	bne.n	b66e2 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67a8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67aa:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67ac:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67ae:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67b0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67b2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67b4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b67b8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b67ba:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b67bc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b67be:	4b2e      	ldr	r3, [pc, #184]	; (b6878 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b67c0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b67c2:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b67c4:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b67c6:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b67c8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b67cc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b67d0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b67d4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b67d8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b67dc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b67e0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b67e4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b67e8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b67ec:	79eb      	ldrb	r3, [r5, #7]
   b67ee:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b67f2:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b67f4:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b67f6:	5cfe      	ldrb	r6, [r7, r3]
   b67f8:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b67fc:	f003 031f 	and.w	r3, r3, #31
   b6800:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b6804:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b6808:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b680c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b6810:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b6812:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b6816:	2b00      	cmp	r3, #0
   b6818:	d0fb      	beq.n	b6812 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b681a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b681c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b6820:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b6824:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b6828:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b682c:	f000 fafc 	bl	b6e28 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6830:	f000 f8c6 	bl	b69c0 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b6834:	6128      	str	r0, [r5, #16]
}
   b6836:	b005      	add	sp, #20
   b6838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b683c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b6840:	2b00      	cmp	r3, #0
   b6842:	f6bf aeb7 	bge.w	b65b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6846:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b684a:	2b00      	cmp	r3, #0
   b684c:	f6bf aeb2 	bge.w	b65b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6850:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6854:	2b00      	cmp	r3, #0
   b6856:	f6bf aead 	bge.w	b65b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b685a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b685e:	2b00      	cmp	r3, #0
   b6860:	f6bf aea8 	bge.w	b65b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b6864:	e725      	b.n	b66b2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b6866:	bf00      	nop
   b6868:	000b8800 	.word	0x000b8800
   b686c:	4001c000 	.word	0x4001c000
   b6870:	40021000 	.word	0x40021000
   b6874:	40022000 	.word	0x40022000
   b6878:	2003e6c0 	.word	0x2003e6c0
   b687c:	e0001000 	.word	0xe0001000
   b6880:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6884:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6888:	2b00      	cmp	r3, #0
   b688a:	f6bf ae8d 	bge.w	b65a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b688e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b6892:	2b00      	cmp	r3, #0
   b6894:	f6bf ae88 	bge.w	b65a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b6898:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b689c:	2b00      	cmp	r3, #0
   b689e:	f6bf ae83 	bge.w	b65a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b68a2:	e706      	b.n	b66b2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b68a4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b68a6:	2304      	movs	r3, #4
   b68a8:	2102      	movs	r1, #2
   b68aa:	e783      	b.n	b67b4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b68ac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b68ac:	8843      	ldrh	r3, [r0, #2]
   b68ae:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b68b2:	d92d      	bls.n	b6910 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b68b4:	7a06      	ldrb	r6, [r0, #8]
   b68b6:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b68ba:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b68be:	b2d5      	uxtb	r5, r2
   b68c0:	b13e      	cbz	r6, b68d2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b68c2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b68c4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b68c6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b68c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b68cc:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b68d0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b68d2:	f890 c006 	ldrb.w	ip, [r0, #6]
   b68d6:	68c7      	ldr	r7, [r0, #12]
   b68d8:	f1bc 0f06 	cmp.w	ip, #6
   b68dc:	bf0c      	ite	eq
   b68de:	2604      	moveq	r6, #4
   b68e0:	2603      	movne	r6, #3
   b68e2:	434e      	muls	r6, r1
   b68e4:	f1ac 0c02 	sub.w	ip, ip, #2
   b68e8:	19b9      	adds	r1, r7, r6
    switch(type) {
   b68ea:	f1bc 0f06 	cmp.w	ip, #6
   b68ee:	d81d      	bhi.n	b692c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b68f0:	e8df f00c 	tbb	[pc, ip]
   b68f4:	04081c04 	.word	0x04081c04
   b68f8:	040f      	.short	0x040f
   b68fa:	04          	.byte	0x04
   b68fb:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b68fc:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b68fe:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b6900:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b6902:	e005      	b.n	b6910 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b6904:	2bfe      	cmp	r3, #254	; 0xfe
   b6906:	bf28      	it	cs
   b6908:	23fe      	movcs	r3, #254	; 0xfe
   b690a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b690c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b690e:	708c      	strb	r4, [r1, #2]
}
   b6910:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b6912:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b6914:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b6916:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b6918:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b691a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b691c:	b913      	cbnz	r3, b6924 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b691e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b6920:	70ca      	strb	r2, [r1, #3]
        } break;
   b6922:	e7f5      	b.n	b6910 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b6924:	435a      	muls	r2, r3
   b6926:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b692a:	e7f9      	b.n	b6920 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b692c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b692e:	704c      	strb	r4, [r1, #1]
   b6930:	e7e6      	b.n	b6900 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b6932 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   b6932:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
}
   b6936:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   b693a:	4770      	bx	lr

000b693c <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
   b693c:	8840      	ldrh	r0, [r0, #2]
   b693e:	4770      	bx	lr

000b6940 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b6940:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = hal_pin_map();
   b6942:	f000 f84d 	bl	b69e0 <hal_pin_map>
   b6946:	4b01      	ldr	r3, [pc, #4]	; (b694c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b6948:	6018      	str	r0, [r3, #0]
}
   b694a:	bd08      	pop	{r3, pc}
   b694c:	2003e6c0 	.word	0x2003e6c0

000b6950 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <os_thread_yield+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	68db      	ldr	r3, [r3, #12]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	00030248 	.word	0x00030248

000b6960 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <os_mutex_create+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	00030248 	.word	0x00030248

000b6970 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <os_mutex_lock+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	00030248 	.word	0x00030248

000b6980 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <os_mutex_unlock+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	00030248 	.word	0x00030248

000b6990 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <os_mutex_recursive_create+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	00030248 	.word	0x00030248

000b69a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <HAL_RNG_GetRandomNumber+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	685b      	ldr	r3, [r3, #4]
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	00030218 	.word	0x00030218

000b69b0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <HAL_Delay_Microseconds+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	68db      	ldr	r3, [r3, #12]
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	00030218 	.word	0x00030218

000b69c0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <HAL_Timer_Get_Micro_Seconds+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	691b      	ldr	r3, [r3, #16]
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	00030218 	.word	0x00030218

000b69d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	695b      	ldr	r3, [r3, #20]
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	00030218 	.word	0x00030218

000b69e0 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <hal_pin_map+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	681b      	ldr	r3, [r3, #0]
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	0003022c 	.word	0x0003022c

000b69f0 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <hal_gpio_mode+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	689b      	ldr	r3, [r3, #8]
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	0003022c 	.word	0x0003022c

000b6a00 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <hal_gpio_get_mode+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	68db      	ldr	r3, [r3, #12]
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	0003022c 	.word	0x0003022c

000b6a10 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <hal_gpio_write+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	691b      	ldr	r3, [r3, #16]
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	0003022c 	.word	0x0003022c

000b6a20 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <hal_gpio_read+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	695b      	ldr	r3, [r3, #20]
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	0003022c 	.word	0x0003022c

000b6a30 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <hal_i2c_write+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	6a1b      	ldr	r3, [r3, #32]
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	00030228 	.word	0x00030228

000b6a40 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <hal_i2c_available+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030228 	.word	0x00030228

000b6a50 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <hal_i2c_read+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030228 	.word	0x00030228

000b6a60 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <hal_i2c_peek+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	00030228 	.word	0x00030228

000b6a70 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <hal_i2c_flush+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030228 	.word	0x00030228

000b6a80 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <hal_i2c_is_enabled+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030228 	.word	0x00030228

000b6a90 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <hal_i2c_init+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030228 	.word	0x00030228

000b6aa0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <if_index_to_name+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	695b      	ldr	r3, [r3, #20]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	0003026c 	.word	0x0003026c

000b6ab0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <inet_inet_ntop+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	695b      	ldr	r3, [r3, #20]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	00030264 	.word	0x00030264

000b6ac0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <inet_htonl+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	6a1b      	ldr	r3, [r3, #32]
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	00030264 	.word	0x00030264

000b6ad0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <inet_htons+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	00030264 	.word	0x00030264

000b6ae0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <netdb_freeaddrinfo+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	689b      	ldr	r3, [r3, #8]
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	00030268 	.word	0x00030268

000b6af0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b02      	ldr	r3, [pc, #8]	; (b6afc <netdb_getaddrinfo+0xc>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	68db      	ldr	r3, [r3, #12]
   b6af8:	9301      	str	r3, [sp, #4]
   b6afa:	bd08      	pop	{r3, pc}
   b6afc:	00030268 	.word	0x00030268

000b6b00 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <sock_setsockopt+0xc>)
   b6b04:	681b      	ldr	r3, [r3, #0]
   b6b06:	699b      	ldr	r3, [r3, #24]
   b6b08:	9301      	str	r3, [sp, #4]
   b6b0a:	bd08      	pop	{r3, pc}
   b6b0c:	00030238 	.word	0x00030238

000b6b10 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b02      	ldr	r3, [pc, #8]	; (b6b1c <sock_close+0xc>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	69db      	ldr	r3, [r3, #28]
   b6b18:	9301      	str	r3, [sp, #4]
   b6b1a:	bd08      	pop	{r3, pc}
   b6b1c:	00030238 	.word	0x00030238

000b6b20 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6b20:	b508      	push	{r3, lr}
   b6b22:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <sock_connect+0xc>)
   b6b24:	681b      	ldr	r3, [r3, #0]
   b6b26:	6a1b      	ldr	r3, [r3, #32]
   b6b28:	9301      	str	r3, [sp, #4]
   b6b2a:	bd08      	pop	{r3, pc}
   b6b2c:	00030238 	.word	0x00030238

000b6b30 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6b30:	b508      	push	{r3, lr}
   b6b32:	4b02      	ldr	r3, [pc, #8]	; (b6b3c <sock_recv+0xc>)
   b6b34:	681b      	ldr	r3, [r3, #0]
   b6b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b38:	9301      	str	r3, [sp, #4]
   b6b3a:	bd08      	pop	{r3, pc}
   b6b3c:	00030238 	.word	0x00030238

000b6b40 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b02      	ldr	r3, [pc, #8]	; (b6b4c <sock_send+0xc>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b48:	9301      	str	r3, [sp, #4]
   b6b4a:	bd08      	pop	{r3, pc}
   b6b4c:	00030238 	.word	0x00030238

000b6b50 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6b50:	b508      	push	{r3, lr}
   b6b52:	4b02      	ldr	r3, [pc, #8]	; (b6b5c <sock_socket+0xc>)
   b6b54:	681b      	ldr	r3, [r3, #0]
   b6b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b58:	9301      	str	r3, [sp, #4]
   b6b5a:	bd08      	pop	{r3, pc}
   b6b5c:	00030238 	.word	0x00030238

000b6b60 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6b60:	b508      	push	{r3, lr}
   b6b62:	4b02      	ldr	r3, [pc, #8]	; (b6b6c <hal_spi_begin+0xc>)
   b6b64:	681b      	ldr	r3, [r3, #0]
   b6b66:	681b      	ldr	r3, [r3, #0]
   b6b68:	9301      	str	r3, [sp, #4]
   b6b6a:	bd08      	pop	{r3, pc}
   b6b6c:	00030230 	.word	0x00030230

000b6b70 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6b70:	b508      	push	{r3, lr}
   b6b72:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <hal_spi_transfer+0xc>)
   b6b74:	681b      	ldr	r3, [r3, #0]
   b6b76:	695b      	ldr	r3, [r3, #20]
   b6b78:	9301      	str	r3, [sp, #4]
   b6b7a:	bd08      	pop	{r3, pc}
   b6b7c:	00030230 	.word	0x00030230

000b6b80 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6b80:	b508      	push	{r3, lr}
   b6b82:	4b02      	ldr	r3, [pc, #8]	; (b6b8c <hal_spi_init+0xc>)
   b6b84:	681b      	ldr	r3, [r3, #0]
   b6b86:	69db      	ldr	r3, [r3, #28]
   b6b88:	9301      	str	r3, [sp, #4]
   b6b8a:	bd08      	pop	{r3, pc}
   b6b8c:	00030230 	.word	0x00030230

000b6b90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b02      	ldr	r3, [pc, #8]	; (b6b9c <hal_spi_is_enabled+0xc>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	6a1b      	ldr	r3, [r3, #32]
   b6b98:	9301      	str	r3, [sp, #4]
   b6b9a:	bd08      	pop	{r3, pc}
   b6b9c:	00030230 	.word	0x00030230

000b6ba0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6ba0:	b508      	push	{r3, lr}
   b6ba2:	4b02      	ldr	r3, [pc, #8]	; (b6bac <hal_spi_info+0xc>)
   b6ba4:	681b      	ldr	r3, [r3, #0]
   b6ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ba8:	9301      	str	r3, [sp, #4]
   b6baa:	bd08      	pop	{r3, pc}
   b6bac:	00030230 	.word	0x00030230

000b6bb0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <hal_spi_set_settings+0xc>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6bb8:	9301      	str	r3, [sp, #4]
   b6bba:	bd08      	pop	{r3, pc}
   b6bbc:	00030230 	.word	0x00030230

000b6bc0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6bc0:	b508      	push	{r3, lr}
   b6bc2:	4b02      	ldr	r3, [pc, #8]	; (b6bcc <hal_spi_acquire+0xc>)
   b6bc4:	681b      	ldr	r3, [r3, #0]
   b6bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6bc8:	9301      	str	r3, [sp, #4]
   b6bca:	bd08      	pop	{r3, pc}
   b6bcc:	00030230 	.word	0x00030230

000b6bd0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6bd0:	b508      	push	{r3, lr}
   b6bd2:	4b02      	ldr	r3, [pc, #8]	; (b6bdc <hal_spi_release+0xc>)
   b6bd4:	681b      	ldr	r3, [r3, #0]
   b6bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6bd8:	9301      	str	r3, [sp, #4]
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	00030230 	.word	0x00030230

000b6be0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b02      	ldr	r3, [pc, #8]	; (b6bec <hal_usart_write+0xc>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	68db      	ldr	r3, [r3, #12]
   b6be8:	9301      	str	r3, [sp, #4]
   b6bea:	bd08      	pop	{r3, pc}
   b6bec:	0003023c 	.word	0x0003023c

000b6bf0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6bf0:	b508      	push	{r3, lr}
   b6bf2:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <hal_usart_available+0xc>)
   b6bf4:	681b      	ldr	r3, [r3, #0]
   b6bf6:	691b      	ldr	r3, [r3, #16]
   b6bf8:	9301      	str	r3, [sp, #4]
   b6bfa:	bd08      	pop	{r3, pc}
   b6bfc:	0003023c 	.word	0x0003023c

000b6c00 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6c00:	b508      	push	{r3, lr}
   b6c02:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <hal_usart_read+0xc>)
   b6c04:	681b      	ldr	r3, [r3, #0]
   b6c06:	695b      	ldr	r3, [r3, #20]
   b6c08:	9301      	str	r3, [sp, #4]
   b6c0a:	bd08      	pop	{r3, pc}
   b6c0c:	0003023c 	.word	0x0003023c

000b6c10 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6c10:	b508      	push	{r3, lr}
   b6c12:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <hal_usart_peek+0xc>)
   b6c14:	681b      	ldr	r3, [r3, #0]
   b6c16:	699b      	ldr	r3, [r3, #24]
   b6c18:	9301      	str	r3, [sp, #4]
   b6c1a:	bd08      	pop	{r3, pc}
   b6c1c:	0003023c 	.word	0x0003023c

000b6c20 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6c20:	b508      	push	{r3, lr}
   b6c22:	4b02      	ldr	r3, [pc, #8]	; (b6c2c <hal_usart_flush+0xc>)
   b6c24:	681b      	ldr	r3, [r3, #0]
   b6c26:	69db      	ldr	r3, [r3, #28]
   b6c28:	9301      	str	r3, [sp, #4]
   b6c2a:	bd08      	pop	{r3, pc}
   b6c2c:	0003023c 	.word	0x0003023c

000b6c30 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <hal_usart_is_enabled+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	6a1b      	ldr	r3, [r3, #32]
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	0003023c 	.word	0x0003023c

000b6c40 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <hal_usart_available_data_for_write+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	0003023c 	.word	0x0003023c

000b6c50 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <hal_usart_init_ex+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	0003023c 	.word	0x0003023c

000b6c60 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <HAL_USB_USART_Init+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	681b      	ldr	r3, [r3, #0]
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	0003024c 	.word	0x0003024c

000b6c70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <HAL_USB_USART_Begin+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	685b      	ldr	r3, [r3, #4]
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	0003024c 	.word	0x0003024c

000b6c80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <HAL_USB_USART_Available_Data+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	691b      	ldr	r3, [r3, #16]
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	0003024c 	.word	0x0003024c

000b6c90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	695b      	ldr	r3, [r3, #20]
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	0003024c 	.word	0x0003024c

000b6ca0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <HAL_USB_USART_Receive_Data+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	699b      	ldr	r3, [r3, #24]
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	0003024c 	.word	0x0003024c

000b6cb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <HAL_USB_USART_Send_Data+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	69db      	ldr	r3, [r3, #28]
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	0003024c 	.word	0x0003024c

000b6cc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <HAL_USB_USART_Flush_Data+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6a1b      	ldr	r3, [r3, #32]
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	0003024c 	.word	0x0003024c

000b6cd0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <log_message+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	00030260 	.word	0x00030260

000b6ce0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b02      	ldr	r3, [pc, #8]	; (b6cec <set_system_mode+0xc>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	685b      	ldr	r3, [r3, #4]
   b6ce8:	9301      	str	r3, [sp, #4]
   b6cea:	bd08      	pop	{r3, pc}
   b6cec:	00030220 	.word	0x00030220

000b6cf0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6cf0:	b508      	push	{r3, lr}
   b6cf2:	4b02      	ldr	r3, [pc, #8]	; (b6cfc <system_delay_ms+0xc>)
   b6cf4:	681b      	ldr	r3, [r3, #0]
   b6cf6:	695b      	ldr	r3, [r3, #20]
   b6cf8:	9301      	str	r3, [sp, #4]
   b6cfa:	bd08      	pop	{r3, pc}
   b6cfc:	00030220 	.word	0x00030220

000b6d00 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6d00:	b508      	push	{r3, lr}
   b6d02:	4b02      	ldr	r3, [pc, #8]	; (b6d0c <system_thread_set_state+0xc>)
   b6d04:	681b      	ldr	r3, [r3, #0]
   b6d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d08:	9301      	str	r3, [sp, #4]
   b6d0a:	bd08      	pop	{r3, pc}
   b6d0c:	00030220 	.word	0x00030220

000b6d10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6d10:	b508      	push	{r3, lr}
   b6d12:	4b03      	ldr	r3, [pc, #12]	; (b6d20 <system_ctrl_set_app_request_handler+0x10>)
   b6d14:	681b      	ldr	r3, [r3, #0]
   b6d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6d1a:	9301      	str	r3, [sp, #4]
   b6d1c:	bd08      	pop	{r3, pc}
   b6d1e:	0000      	.short	0x0000
   b6d20:	00030220 	.word	0x00030220

000b6d24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6d24:	b508      	push	{r3, lr}
   b6d26:	4b03      	ldr	r3, [pc, #12]	; (b6d34 <system_ctrl_set_result+0x10>)
   b6d28:	681b      	ldr	r3, [r3, #0]
   b6d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6d2e:	9301      	str	r3, [sp, #4]
   b6d30:	bd08      	pop	{r3, pc}
   b6d32:	0000      	.short	0x0000
   b6d34:	00030220 	.word	0x00030220

000b6d38 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <spark_deviceID+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	69db      	ldr	r3, [r3, #28]
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	00030244 	.word	0x00030244

000b6d48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	00030244 	.word	0x00030244

000b6d58 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <network_connect+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	685b      	ldr	r3, [r3, #4]
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	00030240 	.word	0x00030240

000b6d68 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <network_connecting+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	689b      	ldr	r3, [r3, #8]
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	00030240 	.word	0x00030240

000b6d78 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <network_disconnect+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	68db      	ldr	r3, [r3, #12]
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	00030240 	.word	0x00030240

000b6d88 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <network_ready+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	691b      	ldr	r3, [r3, #16]
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	00030240 	.word	0x00030240

000b6d98 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <network_on+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	695b      	ldr	r3, [r3, #20]
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	00030240 	.word	0x00030240

000b6da8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <network_off+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	699b      	ldr	r3, [r3, #24]
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	00030240 	.word	0x00030240

000b6db8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <network_listen+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	69db      	ldr	r3, [r3, #28]
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	00030240 	.word	0x00030240

000b6dc8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <network_listening+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	6a1b      	ldr	r3, [r3, #32]
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	00030240 	.word	0x00030240

000b6dd8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <network_set_listen_timeout+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	00030240 	.word	0x00030240

000b6de8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <network_get_listen_timeout+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030240 	.word	0x00030240

000b6df8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <network_is_on+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030240 	.word	0x00030240

000b6e08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <network_is_off+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	00030240 	.word	0x00030240

000b6e18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <malloc+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	681b      	ldr	r3, [r3, #0]
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	0003021c 	.word	0x0003021c

000b6e28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <free+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	685b      	ldr	r3, [r3, #4]
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	0003021c 	.word	0x0003021c

000b6e38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <realloc+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	689b      	ldr	r3, [r3, #8]
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	0003021c 	.word	0x0003021c

000b6e48 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <vsnprintf+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	0003021c 	.word	0x0003021c

000b6e58 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <__errno+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	0003021c 	.word	0x0003021c

000b6e68 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <__assert_func+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	0003021c 	.word	0x0003021c

000b6e78 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <newlib_impure_ptr_callback+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	0003021c 	.word	0x0003021c

000b6e88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6e88:	2100      	movs	r1, #0
   b6e8a:	f7ff bf31 	b.w	b6cf0 <system_delay_ms>
	...

000b6e90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6e90:	4802      	ldr	r0, [pc, #8]	; (b6e9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6e92:	2300      	movs	r3, #0
   b6e94:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6e96:	f7ff bd7b 	b.w	b6990 <os_mutex_recursive_create>
   b6e9a:	bf00      	nop
   b6e9c:	2003e6c4 	.word	0x2003e6c4

000b6ea0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6ea0:	2200      	movs	r2, #0
   b6ea2:	6840      	ldr	r0, [r0, #4]
   b6ea4:	4611      	mov	r1, r2
   b6ea6:	f7ff bf8f 	b.w	b6dc8 <network_listening>

000b6eaa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6eaa:	2200      	movs	r2, #0
   b6eac:	6840      	ldr	r0, [r0, #4]
   b6eae:	4611      	mov	r1, r2
   b6eb0:	f7ff bf9a 	b.w	b6de8 <network_get_listen_timeout>

000b6eb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6eb4:	6840      	ldr	r0, [r0, #4]
   b6eb6:	2200      	movs	r2, #0
   b6eb8:	f7ff bf8e 	b.w	b6dd8 <network_set_listen_timeout>

000b6ebc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ebc:	6840      	ldr	r0, [r0, #4]
   b6ebe:	2200      	movs	r2, #0
   b6ec0:	f081 0101 	eor.w	r1, r1, #1
   b6ec4:	f7ff bf78 	b.w	b6db8 <network_listen>

000b6ec8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ec8:	2300      	movs	r3, #0
   b6eca:	6840      	ldr	r0, [r0, #4]
   b6ecc:	461a      	mov	r2, r3
   b6ece:	4619      	mov	r1, r3
   b6ed0:	f7ff bf6a 	b.w	b6da8 <network_off>

000b6ed4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ed4:	2300      	movs	r3, #0
   b6ed6:	6840      	ldr	r0, [r0, #4]
   b6ed8:	461a      	mov	r2, r3
   b6eda:	4619      	mov	r1, r3
   b6edc:	f7ff bf5c 	b.w	b6d98 <network_on>

000b6ee0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6ee0:	2200      	movs	r2, #0
   b6ee2:	6840      	ldr	r0, [r0, #4]
   b6ee4:	4611      	mov	r1, r2
   b6ee6:	f7ff bf4f 	b.w	b6d88 <network_ready>

000b6eea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6eea:	2200      	movs	r2, #0
   b6eec:	6840      	ldr	r0, [r0, #4]
   b6eee:	4611      	mov	r1, r2
   b6ef0:	f7ff bf3a 	b.w	b6d68 <network_connecting>

000b6ef4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ef4:	6840      	ldr	r0, [r0, #4]
   b6ef6:	2200      	movs	r2, #0
   b6ef8:	2102      	movs	r1, #2
   b6efa:	f7ff bf3d 	b.w	b6d78 <network_disconnect>

000b6efe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6efe:	2300      	movs	r3, #0
   b6f00:	6840      	ldr	r0, [r0, #4]
   b6f02:	461a      	mov	r2, r3
   b6f04:	f7ff bf28 	b.w	b6d58 <network_connect>

000b6f08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6f08:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f0a:	2203      	movs	r2, #3
   b6f0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f0e:	4a02      	ldr	r2, [pc, #8]	; (b6f18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f12:	4770      	bx	lr
   b6f14:	2003e6c8 	.word	0x2003e6c8
   b6f18:	000b8824 	.word	0x000b8824

000b6f1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6f1c:	4770      	bx	lr

000b6f1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f20:	4606      	mov	r6, r0
   b6f22:	4615      	mov	r5, r2
   b6f24:	460c      	mov	r4, r1
   b6f26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6f28:	42bc      	cmp	r4, r7
   b6f2a:	d006      	beq.n	b6f3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6f2c:	6833      	ldr	r3, [r6, #0]
   b6f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6f32:	689b      	ldr	r3, [r3, #8]
   b6f34:	4630      	mov	r0, r6
   b6f36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6f38:	e7f6      	b.n	b6f28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6f3a:	4628      	mov	r0, r5
   b6f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6f3e:	7c00      	ldrb	r0, [r0, #16]
   b6f40:	2200      	movs	r2, #0
   b6f42:	f7ff bd75 	b.w	b6a30 <hal_i2c_write>

000b6f46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6f46:	7c00      	ldrb	r0, [r0, #16]
   b6f48:	2100      	movs	r1, #0
   b6f4a:	f7ff bd79 	b.w	b6a40 <hal_i2c_available>

000b6f4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6f4e:	7c00      	ldrb	r0, [r0, #16]
   b6f50:	2100      	movs	r1, #0
   b6f52:	f7ff bd7d 	b.w	b6a50 <hal_i2c_read>

000b6f56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6f56:	7c00      	ldrb	r0, [r0, #16]
   b6f58:	2100      	movs	r1, #0
   b6f5a:	f7ff bd81 	b.w	b6a60 <hal_i2c_peek>

000b6f5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6f5e:	7c00      	ldrb	r0, [r0, #16]
   b6f60:	2100      	movs	r1, #0
   b6f62:	f7ff bd85 	b.w	b6a70 <hal_i2c_flush>

000b6f66 <_ZN7TwoWireD0Ev>:
   b6f66:	b510      	push	{r4, lr}
   b6f68:	2114      	movs	r1, #20
   b6f6a:	4604      	mov	r4, r0
   b6f6c:	f7fd f8a9 	bl	b40c2 <_ZdlPvj>
   b6f70:	4620      	mov	r0, r4
   b6f72:	bd10      	pop	{r4, pc}

000b6f74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f74:	b538      	push	{r3, r4, r5, lr}
   b6f76:	4604      	mov	r4, r0
   b6f78:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f7e:	2200      	movs	r2, #0
   b6f80:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f84:	4b09      	ldr	r3, [pc, #36]	; (b6fac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6f86:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f88:	4608      	mov	r0, r1
   b6f8a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6f8c:	4629      	mov	r1, r5
   b6f8e:	f7ff fd7f 	bl	b6a90 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f92:	30bf      	adds	r0, #191	; 0xbf
   b6f94:	d108      	bne.n	b6fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6f96:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f98:	07db      	lsls	r3, r3, #31
   b6f9a:	d505      	bpl.n	b6fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6f9c:	6868      	ldr	r0, [r5, #4]
   b6f9e:	f7ff ff43 	bl	b6e28 <free>
    free(conf.tx_buffer);
   b6fa2:	68e8      	ldr	r0, [r5, #12]
   b6fa4:	f7ff ff40 	bl	b6e28 <free>
}
   b6fa8:	4620      	mov	r0, r4
   b6faa:	bd38      	pop	{r3, r4, r5, pc}
   b6fac:	000b8860 	.word	0x000b8860

000b6fb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6fb0:	4770      	bx	lr

000b6fb2 <_ZN9IPAddressD0Ev>:
   b6fb2:	b510      	push	{r4, lr}
   b6fb4:	2118      	movs	r1, #24
   b6fb6:	4604      	mov	r4, r0
   b6fb8:	f7fd f883 	bl	b40c2 <_ZdlPvj>
   b6fbc:	4620      	mov	r0, r4
   b6fbe:	bd10      	pop	{r4, pc}

000b6fc0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6fc2:	7d03      	ldrb	r3, [r0, #20]
   b6fc4:	2b06      	cmp	r3, #6
{
   b6fc6:	b08d      	sub	sp, #52	; 0x34
   b6fc8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6fca:	f100 0704 	add.w	r7, r0, #4
   b6fce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6fd2:	d012      	beq.n	b6ffa <_ZNK9IPAddress7printToER5Print+0x3a>
   b6fd4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6fd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6fdc:	220a      	movs	r2, #10
   b6fde:	4630      	mov	r0, r6
   b6fe0:	f000 f979 	bl	b72d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6fe4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6fe6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6fe8:	d019      	beq.n	b701e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6fea:	2c00      	cmp	r4, #0
   b6fec:	d0f4      	beq.n	b6fd8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6fee:	212e      	movs	r1, #46	; 0x2e
   b6ff0:	4630      	mov	r0, r6
   b6ff2:	f000 f951 	bl	b7298 <_ZN5Print5printEc>
   b6ff6:	4404      	add	r4, r0
   b6ff8:	e7ee      	b.n	b6fd8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6ffa:	232f      	movs	r3, #47	; 0x2f
   b6ffc:	466a      	mov	r2, sp
   b6ffe:	4639      	mov	r1, r7
   b7000:	200a      	movs	r0, #10
		buf[0] = 0;
   b7002:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7006:	f7ff fd53 	bl	b6ab0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b700a:	4668      	mov	r0, sp
   b700c:	f7fd f810 	bl	b4030 <strlen>
   b7010:	6833      	ldr	r3, [r6, #0]
   b7012:	4602      	mov	r2, r0
   b7014:	68db      	ldr	r3, [r3, #12]
   b7016:	4669      	mov	r1, sp
   b7018:	4630      	mov	r0, r6
   b701a:	4798      	blx	r3
   b701c:	4604      	mov	r4, r0
    }
    return n;
}
   b701e:	4620      	mov	r0, r4
   b7020:	b00d      	add	sp, #52	; 0x34
   b7022:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7024 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7024:	b510      	push	{r4, lr}
   b7026:	4b05      	ldr	r3, [pc, #20]	; (b703c <_ZN9IPAddressC1Ev+0x18>)
   b7028:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b702a:	2211      	movs	r2, #17
   b702c:	f840 3b04 	str.w	r3, [r0], #4
   b7030:	2100      	movs	r1, #0
   b7032:	f001 f9a7 	bl	b8384 <memset>
}
   b7036:	4620      	mov	r0, r4
   b7038:	bd10      	pop	{r4, pc}
   b703a:	bf00      	nop
   b703c:	000b8888 	.word	0x000b8888

000b7040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7040:	4603      	mov	r3, r0
   b7042:	4a07      	ldr	r2, [pc, #28]	; (b7060 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7044:	b510      	push	{r4, lr}
   b7046:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b704a:	f101 0210 	add.w	r2, r1, #16
   b704e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7052:	f843 4b04 	str.w	r4, [r3], #4
   b7056:	4291      	cmp	r1, r2
   b7058:	d1f9      	bne.n	b704e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b705a:	780a      	ldrb	r2, [r1, #0]
   b705c:	701a      	strb	r2, [r3, #0]
}
   b705e:	bd10      	pop	{r4, pc}
   b7060:	000b8888 	.word	0x000b8888

000b7064 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7064:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7066:	2b04      	cmp	r3, #4
   b7068:	d104      	bne.n	b7074 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b706a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b706c:	3800      	subs	r0, #0
   b706e:	bf18      	it	ne
   b7070:	2001      	movne	r0, #1
   b7072:	4770      	bx	lr
    } else if (version() == 6) {
   b7074:	2b06      	cmp	r3, #6
   b7076:	d107      	bne.n	b7088 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7078:	6843      	ldr	r3, [r0, #4]
   b707a:	b93b      	cbnz	r3, b708c <_ZNK9IPAddresscvbEv+0x28>
   b707c:	6883      	ldr	r3, [r0, #8]
   b707e:	b92b      	cbnz	r3, b708c <_ZNK9IPAddresscvbEv+0x28>
   b7080:	68c3      	ldr	r3, [r0, #12]
   b7082:	b91b      	cbnz	r3, b708c <_ZNK9IPAddresscvbEv+0x28>
   b7084:	6900      	ldr	r0, [r0, #16]
   b7086:	e7f1      	b.n	b706c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7088:	2000      	movs	r0, #0
   b708a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b708c:	2001      	movs	r0, #1
}
   b708e:	4770      	bx	lr

000b7090 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7090:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7092:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7096:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b709a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b709e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b70a2:	2304      	movs	r3, #4
   b70a4:	6041      	str	r1, [r0, #4]
   b70a6:	7503      	strb	r3, [r0, #20]
}
   b70a8:	bd10      	pop	{r4, pc}
	...

000b70ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b70ac:	b507      	push	{r0, r1, r2, lr}
   b70ae:	4b06      	ldr	r3, [pc, #24]	; (b70c8 <_ZN9IPAddressC1EPKh+0x1c>)
   b70b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b70b2:	78cb      	ldrb	r3, [r1, #3]
   b70b4:	9300      	str	r3, [sp, #0]
   b70b6:	788b      	ldrb	r3, [r1, #2]
   b70b8:	784a      	ldrb	r2, [r1, #1]
   b70ba:	7809      	ldrb	r1, [r1, #0]
   b70bc:	f7ff ffe8 	bl	b7090 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b70c0:	b003      	add	sp, #12
   b70c2:	f85d fb04 	ldr.w	pc, [sp], #4
   b70c6:	bf00      	nop
   b70c8:	000b8888 	.word	0x000b8888

000b70cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b70cc:	4b01      	ldr	r3, [pc, #4]	; (b70d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b70ce:	4a02      	ldr	r2, [pc, #8]	; (b70d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b70d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b70d2:	4770      	bx	lr
   b70d4:	2003e6d0 	.word	0x2003e6d0
   b70d8:	000b8894 	.word	0x000b8894

000b70dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b70dc:	2300      	movs	r3, #0
   b70de:	6840      	ldr	r0, [r0, #4]
   b70e0:	461a      	mov	r2, r3
   b70e2:	f7ff be39 	b.w	b6d58 <network_connect>

000b70e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b70e6:	6840      	ldr	r0, [r0, #4]
   b70e8:	2200      	movs	r2, #0
   b70ea:	2102      	movs	r1, #2
   b70ec:	f7ff be44 	b.w	b6d78 <network_disconnect>

000b70f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b70f0:	2200      	movs	r2, #0
   b70f2:	6840      	ldr	r0, [r0, #4]
   b70f4:	4611      	mov	r1, r2
   b70f6:	f7ff be37 	b.w	b6d68 <network_connecting>

000b70fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b70fa:	2200      	movs	r2, #0
   b70fc:	6840      	ldr	r0, [r0, #4]
   b70fe:	4611      	mov	r1, r2
   b7100:	f7ff be42 	b.w	b6d88 <network_ready>

000b7104 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7104:	2300      	movs	r3, #0
   b7106:	6840      	ldr	r0, [r0, #4]
   b7108:	461a      	mov	r2, r3
   b710a:	4619      	mov	r1, r3
   b710c:	f7ff be44 	b.w	b6d98 <network_on>

000b7110 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7110:	2300      	movs	r3, #0
   b7112:	6840      	ldr	r0, [r0, #4]
   b7114:	461a      	mov	r2, r3
   b7116:	4619      	mov	r1, r3
   b7118:	f7ff be46 	b.w	b6da8 <network_off>

000b711c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b711c:	6840      	ldr	r0, [r0, #4]
   b711e:	2100      	movs	r1, #0
   b7120:	f7ff be6a 	b.w	b6df8 <network_is_on>

000b7124 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7124:	6840      	ldr	r0, [r0, #4]
   b7126:	2100      	movs	r1, #0
   b7128:	f7ff be6e 	b.w	b6e08 <network_is_off>

000b712c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b712c:	6840      	ldr	r0, [r0, #4]
   b712e:	2200      	movs	r2, #0
   b7130:	f081 0101 	eor.w	r1, r1, #1
   b7134:	f7ff be40 	b.w	b6db8 <network_listen>

000b7138 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7138:	6840      	ldr	r0, [r0, #4]
   b713a:	2200      	movs	r2, #0
   b713c:	f7ff be4c 	b.w	b6dd8 <network_set_listen_timeout>

000b7140 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7140:	2200      	movs	r2, #0
   b7142:	6840      	ldr	r0, [r0, #4]
   b7144:	4611      	mov	r1, r2
   b7146:	f7ff be4f 	b.w	b6de8 <network_get_listen_timeout>

000b714a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b714a:	2200      	movs	r2, #0
   b714c:	6840      	ldr	r0, [r0, #4]
   b714e:	4611      	mov	r1, r2
   b7150:	f7ff be3a 	b.w	b6dc8 <network_listening>

000b7154 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7158:	b095      	sub	sp, #84	; 0x54
   b715a:	4614      	mov	r4, r2
   b715c:	460d      	mov	r5, r1
   b715e:	4607      	mov	r7, r0
    IPAddress addr;
   b7160:	f7ff ff60 	bl	b7024 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7164:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7166:	221c      	movs	r2, #28
   b7168:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b716a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b716c:	f001 f90a 	bl	b8384 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7170:	2340      	movs	r3, #64	; 0x40
   b7172:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7174:	4620      	mov	r0, r4
   b7176:	466b      	mov	r3, sp
   b7178:	aa0c      	add	r2, sp, #48	; 0x30
   b717a:	2100      	movs	r1, #0
   b717c:	f7ff fcb8 	bl	b6af0 <netdb_getaddrinfo>
    if (!r) {
   b7180:	4604      	mov	r4, r0
   b7182:	2800      	cmp	r0, #0
   b7184:	d14b      	bne.n	b721e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7186:	4602      	mov	r2, r0
   b7188:	2101      	movs	r1, #1
   b718a:	6868      	ldr	r0, [r5, #4]
   b718c:	f7ff fdfc 	bl	b6d88 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7190:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7192:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7194:	4622      	mov	r2, r4
   b7196:	6868      	ldr	r0, [r5, #4]
   b7198:	f7ff fdf6 	bl	b6d88 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b719c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b719e:	4681      	mov	r9, r0
        bool ok = false;
   b71a0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71a2:	2e00      	cmp	r6, #0
   b71a4:	d03b      	beq.n	b721e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b71a6:	2900      	cmp	r1, #0
   b71a8:	d139      	bne.n	b721e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b71aa:	6873      	ldr	r3, [r6, #4]
   b71ac:	2b02      	cmp	r3, #2
   b71ae:	d003      	beq.n	b71b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b71b0:	2b0a      	cmp	r3, #10
   b71b2:	d011      	beq.n	b71d8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71b4:	69f6      	ldr	r6, [r6, #28]
   b71b6:	e7f4      	b.n	b71a2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b71b8:	f1b8 0f00 	cmp.w	r8, #0
   b71bc:	d0fa      	beq.n	b71b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b71be:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b71c0:	a806      	add	r0, sp, #24
   b71c2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b71c4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b71c6:	f7ff ff71 	bl	b70ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b71ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71cc:	1d3c      	adds	r4, r7, #4
   b71ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71d0:	682b      	ldr	r3, [r5, #0]
   b71d2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b71d4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b71d6:	e7ed      	b.n	b71b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b71d8:	f1b9 0f00 	cmp.w	r9, #0
   b71dc:	d0ea      	beq.n	b71b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b71de:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b71e0:	2210      	movs	r2, #16
   b71e2:	a801      	add	r0, sp, #4
   b71e4:	f001 f8ce 	bl	b8384 <memset>
                    a.v = 6;
   b71e8:	2306      	movs	r3, #6
   b71ea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b71ee:	ad01      	add	r5, sp, #4
   b71f0:	f104 0308 	add.w	r3, r4, #8
   b71f4:	3418      	adds	r4, #24
   b71f6:	6818      	ldr	r0, [r3, #0]
   b71f8:	6859      	ldr	r1, [r3, #4]
   b71fa:	462a      	mov	r2, r5
   b71fc:	c203      	stmia	r2!, {r0, r1}
   b71fe:	3308      	adds	r3, #8
   b7200:	42a3      	cmp	r3, r4
   b7202:	4615      	mov	r5, r2
   b7204:	d1f7      	bne.n	b71f6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7206:	a901      	add	r1, sp, #4
   b7208:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b720a:	ad07      	add	r5, sp, #28
   b720c:	f7ff ff18 	bl	b7040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7212:	1d3c      	adds	r4, r7, #4
   b7214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7216:	682b      	ldr	r3, [r5, #0]
   b7218:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b721a:	4649      	mov	r1, r9
   b721c:	e7ca      	b.n	b71b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b721e:	9800      	ldr	r0, [sp, #0]
   b7220:	f7ff fc5e 	bl	b6ae0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7224:	4638      	mov	r0, r7
   b7226:	b015      	add	sp, #84	; 0x54
   b7228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b722c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b722c:	4b02      	ldr	r3, [pc, #8]	; (b7238 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b722e:	4a03      	ldr	r2, [pc, #12]	; (b723c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7230:	601a      	str	r2, [r3, #0]
   b7232:	2200      	movs	r2, #0
   b7234:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7236:	4770      	bx	lr
   b7238:	2003e6d4 	.word	0x2003e6d4
   b723c:	000b88a0 	.word	0x000b88a0

000b7240 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7242:	4606      	mov	r6, r0
   b7244:	460d      	mov	r5, r1
  size_t n = 0;
   b7246:	188f      	adds	r7, r1, r2
   b7248:	2400      	movs	r4, #0
  while (size--) {
   b724a:	42bd      	cmp	r5, r7
   b724c:	d00c      	beq.n	b7268 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b724e:	6833      	ldr	r3, [r6, #0]
   b7250:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7254:	689b      	ldr	r3, [r3, #8]
   b7256:	4630      	mov	r0, r6
   b7258:	4798      	blx	r3
     if (chunk>=0)
   b725a:	1e03      	subs	r3, r0, #0
   b725c:	db01      	blt.n	b7262 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b725e:	441c      	add	r4, r3
  while (size--) {
   b7260:	e7f3      	b.n	b724a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7262:	2c00      	cmp	r4, #0
   b7264:	bf08      	it	eq
   b7266:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7268:	4620      	mov	r0, r4
   b726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b726c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b726c:	b513      	push	{r0, r1, r4, lr}
   b726e:	4604      	mov	r4, r0
    }
   b7270:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7272:	b159      	cbz	r1, b728c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7274:	9101      	str	r1, [sp, #4]
   b7276:	f7fc fedb 	bl	b4030 <strlen>
   b727a:	6823      	ldr	r3, [r4, #0]
   b727c:	9901      	ldr	r1, [sp, #4]
   b727e:	68db      	ldr	r3, [r3, #12]
   b7280:	4602      	mov	r2, r0
   b7282:	4620      	mov	r0, r4
    }
   b7284:	b002      	add	sp, #8
   b7286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b728a:	4718      	bx	r3
    }
   b728c:	b002      	add	sp, #8
   b728e:	bd10      	pop	{r4, pc}

000b7290 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7290:	b508      	push	{r3, lr}
  return write(str);
   b7292:	f7ff ffeb 	bl	b726c <_ZN5Print5writeEPKc>
}
   b7296:	bd08      	pop	{r3, pc}

000b7298 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7298:	6803      	ldr	r3, [r0, #0]
   b729a:	689b      	ldr	r3, [r3, #8]
   b729c:	4718      	bx	r3

000b729e <_ZN5Print5printEPK19__FlashStringHelper>:
   b729e:	b508      	push	{r3, lr}
   b72a0:	f7ff ffe4 	bl	b726c <_ZN5Print5writeEPKc>
   b72a4:	bd08      	pop	{r3, pc}

000b72a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b72a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b72a8:	210d      	movs	r1, #13
{
   b72aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b72ac:	f7ff fff4 	bl	b7298 <_ZN5Print5printEc>
  n += print('\n');
   b72b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b72b2:	4604      	mov	r4, r0
  n += print('\n');
   b72b4:	4628      	mov	r0, r5
   b72b6:	f7ff ffef 	bl	b7298 <_ZN5Print5printEc>
  return n;
}
   b72ba:	4420      	add	r0, r4
   b72bc:	bd38      	pop	{r3, r4, r5, pc}

000b72be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b72be:	b538      	push	{r3, r4, r5, lr}
   b72c0:	4605      	mov	r5, r0
  return write(str);
   b72c2:	f7ff ffd3 	bl	b726c <_ZN5Print5writeEPKc>
   b72c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b72c8:	4628      	mov	r0, r5
   b72ca:	f7ff ffec 	bl	b72a6 <_ZN5Print7printlnEv>
  return n;
}
   b72ce:	4420      	add	r0, r4
   b72d0:	bd38      	pop	{r3, r4, r5, pc}

000b72d2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b72d2:	f7ff bff4 	b.w	b72be <_ZN5Print7printlnEPKc>

000b72d6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b72d6:	b530      	push	{r4, r5, lr}
   b72d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b72da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b72dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b72de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b72e2:	bf98      	it	ls
   b72e4:	220a      	movls	r2, #10
   b72e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b72e8:	460d      	mov	r5, r1
   b72ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b72ee:	fb01 5312 	mls	r3, r1, r2, r5
   b72f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b72f6:	2b09      	cmp	r3, #9
   b72f8:	bf94      	ite	ls
   b72fa:	3330      	addls	r3, #48	; 0x30
   b72fc:	3337      	addhi	r3, #55	; 0x37
   b72fe:	b2db      	uxtb	r3, r3
  } while(n);
   b7300:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7302:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7306:	d9ef      	bls.n	b72e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7308:	4621      	mov	r1, r4
   b730a:	f7ff ffaf 	bl	b726c <_ZN5Print5writeEPKc>
}
   b730e:	b00b      	add	sp, #44	; 0x2c
   b7310:	bd30      	pop	{r4, r5, pc}

000b7312 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7316:	b086      	sub	sp, #24
   b7318:	af00      	add	r7, sp, #0
   b731a:	4605      	mov	r5, r0
   b731c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b731e:	1d38      	adds	r0, r7, #4
   b7320:	2114      	movs	r1, #20
{
   b7322:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7324:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7326:	f7ff fd8f 	bl	b6e48 <vsnprintf>

    if (n<bufsize)
   b732a:	2813      	cmp	r0, #19
   b732c:	d80e      	bhi.n	b734c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b732e:	1d39      	adds	r1, r7, #4
   b7330:	4628      	mov	r0, r5
   b7332:	f7ff ff9b 	bl	b726c <_ZN5Print5writeEPKc>
   b7336:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7338:	b11e      	cbz	r6, b7342 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b733a:	4628      	mov	r0, r5
   b733c:	f7ff ffb3 	bl	b72a6 <_ZN5Print7printlnEv>
   b7340:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7342:	4620      	mov	r0, r4
   b7344:	3718      	adds	r7, #24
   b7346:	46bd      	mov	sp, r7
   b7348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b734c:	f100 0308 	add.w	r3, r0, #8
   b7350:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7354:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7356:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b735a:	4622      	mov	r2, r4
   b735c:	1c41      	adds	r1, r0, #1
   b735e:	683b      	ldr	r3, [r7, #0]
   b7360:	4668      	mov	r0, sp
   b7362:	f7ff fd71 	bl	b6e48 <vsnprintf>
  return write(str);
   b7366:	4669      	mov	r1, sp
   b7368:	4628      	mov	r0, r5
   b736a:	f7ff ff7f 	bl	b726c <_ZN5Print5writeEPKc>
   b736e:	4604      	mov	r4, r0
   b7370:	46c5      	mov	sp, r8
   b7372:	e7e1      	b.n	b7338 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7374 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7374:	4b01      	ldr	r3, [pc, #4]	; (b737c <_GLOBAL__sub_I_RGB+0x8>)
   b7376:	2200      	movs	r2, #0
   b7378:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b737a:	4770      	bx	lr
   b737c:	2003e6dc 	.word	0x2003e6dc

000b7380 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7380:	2100      	movs	r1, #0
   b7382:	f7ff bc25 	b.w	b6bd0 <hal_spi_release>

000b7386 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7386:	2100      	movs	r1, #0
   b7388:	f7ff bc1a 	b.w	b6bc0 <hal_spi_acquire>

000b738c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b738c:	b510      	push	{r4, lr}
   b738e:	4604      	mov	r4, r0
   b7390:	4608      	mov	r0, r1
{
    _spi = spi;
   b7392:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7394:	f7ff fbf4 	bl	b6b80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7398:	2300      	movs	r3, #0
   b739a:	6063      	str	r3, [r4, #4]
}
   b739c:	4620      	mov	r0, r4
   b739e:	bd10      	pop	{r4, pc}

000b73a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b73a0:	b513      	push	{r0, r1, r4, lr}
   b73a2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b73a4:	7800      	ldrb	r0, [r0, #0]
   b73a6:	f7ff ffee 	bl	b7386 <_ZN8SPIClass4lockEv.isra.0>
   b73aa:	b958      	cbnz	r0, b73c4 <_ZN8SPIClass5beginEv+0x24>
   b73ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b73ae:	9001      	str	r0, [sp, #4]
   b73b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b73b4:	f7ff fbd4 	bl	b6b60 <hal_spi_begin>
        unlock();
   b73b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b73ba:	b002      	add	sp, #8
   b73bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b73c0:	f7ff bfde 	b.w	b7380 <_ZN8SPIClass6unlockEv.isra.0>
   b73c4:	b002      	add	sp, #8
   b73c6:	bd10      	pop	{r4, pc}

000b73c8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b73c8:	7800      	ldrb	r0, [r0, #0]
   b73ca:	f7ff bfd9 	b.w	b7380 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b73d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b73d0:	0840      	lsrs	r0, r0, #1
{
   b73d2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b73d4:	6018      	str	r0, [r3, #0]
   b73d6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b73d8:	6818      	ldr	r0, [r3, #0]
   b73da:	4288      	cmp	r0, r1
   b73dc:	b2e5      	uxtb	r5, r4
   b73de:	d906      	bls.n	b73ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b73e0:	3401      	adds	r4, #1
   b73e2:	2c08      	cmp	r4, #8
   b73e4:	d002      	beq.n	b73ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b73e6:	0840      	lsrs	r0, r0, #1
   b73e8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b73ea:	e7f5      	b.n	b73d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b73ec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b73ee:	4b02      	ldr	r3, [pc, #8]	; (b73f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b73f0:	5d5b      	ldrb	r3, [r3, r5]
   b73f2:	7013      	strb	r3, [r2, #0]
}
   b73f4:	bd30      	pop	{r4, r5, pc}
   b73f6:	bf00      	nop
   b73f8:	000b88d4 	.word	0x000b88d4

000b73fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b73fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7400:	4606      	mov	r6, r0
   b7402:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7404:	7800      	ldrb	r0, [r0, #0]
{
   b7406:	460c      	mov	r4, r1
    CHECK(lock());
   b7408:	f7ff ffbd 	bl	b7386 <_ZN8SPIClass4lockEv.isra.0>
   b740c:	2800      	cmp	r0, #0
   b740e:	db1b      	blt.n	b7448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7410:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7412:	2214      	movs	r2, #20
   b7414:	2100      	movs	r1, #0
   b7416:	a809      	add	r0, sp, #36	; 0x24
   b7418:	f000 ffb4 	bl	b8384 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b741c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b741e:	2200      	movs	r2, #0
   b7420:	a909      	add	r1, sp, #36	; 0x24
   b7422:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7424:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7428:	f7ff fbba 	bl	b6ba0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b742c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7430:	b113      	cbz	r3, b7438 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7432:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7436:	b155      	cbz	r5, b744e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7438:	2700      	movs	r7, #0
   b743a:	46b9      	mov	r9, r7
   b743c:	46b8      	mov	r8, r7
   b743e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7440:	7923      	ldrb	r3, [r4, #4]
   b7442:	b15d      	cbz	r5, b745c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7444:	b1c3      	cbz	r3, b7478 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7446:	2000      	movs	r0, #0
}
   b7448:	b00f      	add	sp, #60	; 0x3c
   b744a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b744e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7452:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7456:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b745a:	e7f1      	b.n	b7440 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b745c:	2b00      	cmp	r3, #0
   b745e:	d135      	bne.n	b74cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7460:	68a3      	ldr	r3, [r4, #8]
   b7462:	4543      	cmp	r3, r8
   b7464:	d108      	bne.n	b7478 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7466:	f88d 9020 	strb.w	r9, [sp, #32]
   b746a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b746e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7472:	89a3      	ldrh	r3, [r4, #12]
   b7474:	429a      	cmp	r2, r3
   b7476:	d0e6      	beq.n	b7446 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7478:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b747a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b747c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7480:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7482:	ab04      	add	r3, sp, #16
   b7484:	f10d 020f 	add.w	r2, sp, #15
   b7488:	f7ff ffa2 	bl	b73d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b748c:	7921      	ldrb	r1, [r4, #4]
   b748e:	b985      	cbnz	r5, b74b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7490:	b989      	cbnz	r1, b74b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7492:	68a3      	ldr	r3, [r4, #8]
   b7494:	4543      	cmp	r3, r8
   b7496:	d30e      	bcc.n	b74b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7498:	f88d 9020 	strb.w	r9, [sp, #32]
   b749c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74a4:	89a3      	ldrh	r3, [r4, #12]
   b74a6:	429a      	cmp	r2, r3
   b74a8:	d105      	bne.n	b74b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b74aa:	9b04      	ldr	r3, [sp, #16]
   b74ac:	4543      	cmp	r3, r8
   b74ae:	d102      	bne.n	b74b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74b0:	e7c9      	b.n	b7446 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b74b2:	2900      	cmp	r1, #0
   b74b4:	d1f9      	bne.n	b74aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b74b6:	2300      	movs	r3, #0
   b74b8:	9301      	str	r3, [sp, #4]
   b74ba:	7b63      	ldrb	r3, [r4, #13]
   b74bc:	9300      	str	r3, [sp, #0]
   b74be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b74c2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b74c4:	7830      	ldrb	r0, [r6, #0]
   b74c6:	f7ff fb73 	bl	b6bb0 <hal_spi_set_settings>
   b74ca:	e7bc      	b.n	b7446 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b74cc:	e9cd 5500 	strd	r5, r5, [sp]
   b74d0:	462b      	mov	r3, r5
   b74d2:	462a      	mov	r2, r5
   b74d4:	2101      	movs	r1, #1
   b74d6:	e7f5      	b.n	b74c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b74d8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b74d8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b74da:	7800      	ldrb	r0, [r0, #0]
   b74dc:	f7ff fb48 	bl	b6b70 <hal_spi_transfer>
}
   b74e0:	b2c0      	uxtb	r0, r0
   b74e2:	bd08      	pop	{r3, pc}

000b74e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b74e4:	b510      	push	{r4, lr}
   b74e6:	4604      	mov	r4, r0
{
	free(buffer);
   b74e8:	6800      	ldr	r0, [r0, #0]
   b74ea:	f7ff fc9d 	bl	b6e28 <free>
}
   b74ee:	4620      	mov	r0, r4
   b74f0:	bd10      	pop	{r4, pc}

000b74f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b74f2:	b510      	push	{r4, lr}
   b74f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b74f6:	6800      	ldr	r0, [r0, #0]
   b74f8:	b108      	cbz	r0, b74fe <_ZN6String10invalidateEv+0xc>
   b74fa:	f7ff fc95 	bl	b6e28 <free>
	buffer = NULL;
   b74fe:	2300      	movs	r3, #0
	capacity = len = 0;
   b7500:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7504:	6023      	str	r3, [r4, #0]
}
   b7506:	bd10      	pop	{r4, pc}

000b7508 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7508:	b538      	push	{r3, r4, r5, lr}
   b750a:	4604      	mov	r4, r0
   b750c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b750e:	6800      	ldr	r0, [r0, #0]
   b7510:	3101      	adds	r1, #1
   b7512:	f7ff fc91 	bl	b6e38 <realloc>
	if (newbuffer) {
   b7516:	b110      	cbz	r0, b751e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7518:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b751c:	2001      	movs	r0, #1
	}
	return 0;
}
   b751e:	bd38      	pop	{r3, r4, r5, pc}

000b7520 <_ZN6String7reserveEj>:
{
   b7520:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7522:	6803      	ldr	r3, [r0, #0]
{
   b7524:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7526:	b123      	cbz	r3, b7532 <_ZN6String7reserveEj+0x12>
   b7528:	6843      	ldr	r3, [r0, #4]
   b752a:	428b      	cmp	r3, r1
   b752c:	d301      	bcc.n	b7532 <_ZN6String7reserveEj+0x12>
   b752e:	2001      	movs	r0, #1
}
   b7530:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7532:	4620      	mov	r0, r4
   b7534:	f7ff ffe8 	bl	b7508 <_ZN6String12changeBufferEj>
   b7538:	2800      	cmp	r0, #0
   b753a:	d0f9      	beq.n	b7530 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b753c:	68a3      	ldr	r3, [r4, #8]
   b753e:	2b00      	cmp	r3, #0
   b7540:	d1f5      	bne.n	b752e <_ZN6String7reserveEj+0xe>
   b7542:	6822      	ldr	r2, [r4, #0]
   b7544:	7013      	strb	r3, [r2, #0]
   b7546:	e7f2      	b.n	b752e <_ZN6String7reserveEj+0xe>

000b7548 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7548:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b754a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b754c:	4611      	mov	r1, r2
   b754e:	9201      	str	r2, [sp, #4]
{
   b7550:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7552:	f7ff ffe5 	bl	b7520 <_ZN6String7reserveEj>
   b7556:	9a01      	ldr	r2, [sp, #4]
   b7558:	b928      	cbnz	r0, b7566 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b755a:	4620      	mov	r0, r4
   b755c:	f7ff ffc9 	bl	b74f2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7560:	4620      	mov	r0, r4
   b7562:	b003      	add	sp, #12
   b7564:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7566:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7568:	4629      	mov	r1, r5
   b756a:	6820      	ldr	r0, [r4, #0]
   b756c:	f000 fefc 	bl	b8368 <memcpy>
	buffer[len] = 0;
   b7570:	6822      	ldr	r2, [r4, #0]
   b7572:	68a3      	ldr	r3, [r4, #8]
   b7574:	2100      	movs	r1, #0
   b7576:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7578:	e7f2      	b.n	b7560 <_ZN6String4copyEPKcj+0x18>

000b757a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b757a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b757c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b757e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7582:	4604      	mov	r4, r0
	len = 0;
   b7584:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7586:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7588:	b141      	cbz	r1, b759c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b758a:	4608      	mov	r0, r1
   b758c:	9101      	str	r1, [sp, #4]
   b758e:	f7fc fd4f 	bl	b4030 <strlen>
   b7592:	9901      	ldr	r1, [sp, #4]
   b7594:	4602      	mov	r2, r0
   b7596:	4620      	mov	r0, r4
   b7598:	f7ff ffd6 	bl	b7548 <_ZN6String4copyEPKcj>
}
   b759c:	4620      	mov	r0, r4
   b759e:	b002      	add	sp, #8
   b75a0:	bd10      	pop	{r4, pc}

000b75a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b75a2:	b513      	push	{r0, r1, r4, lr}
   b75a4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b75a6:	b159      	cbz	r1, b75c0 <_ZN6StringaSEPKc+0x1e>
   b75a8:	4608      	mov	r0, r1
   b75aa:	9101      	str	r1, [sp, #4]
   b75ac:	f7fc fd40 	bl	b4030 <strlen>
   b75b0:	9901      	ldr	r1, [sp, #4]
   b75b2:	4602      	mov	r2, r0
   b75b4:	4620      	mov	r0, r4
   b75b6:	f7ff ffc7 	bl	b7548 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b75ba:	4620      	mov	r0, r4
   b75bc:	b002      	add	sp, #8
   b75be:	bd10      	pop	{r4, pc}
	else invalidate();
   b75c0:	f7ff ff97 	bl	b74f2 <_ZN6String10invalidateEv>
   b75c4:	e7f9      	b.n	b75ba <_ZN6StringaSEPKc+0x18>
	...

000b75c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b75c8:	4b05      	ldr	r3, [pc, #20]	; (b75e0 <_GLOBAL__sub_I_System+0x18>)
   b75ca:	2202      	movs	r2, #2
   b75cc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b75ce:	4b05      	ldr	r3, [pc, #20]	; (b75e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b75d0:	4a05      	ldr	r2, [pc, #20]	; (b75e8 <_GLOBAL__sub_I_System+0x20>)
   b75d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b75d4:	2000      	movs	r0, #0
   b75d6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b75da:	f7ff bb81 	b.w	b6ce0 <set_system_mode>
   b75de:	bf00      	nop
   b75e0:	2003e6f8 	.word	0x2003e6f8
   b75e4:	2003e6ec 	.word	0x2003e6ec
   b75e8:	ffff0000 	.word	0xffff0000

000b75ec <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b75ec:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b75ee:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b75f0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b75f4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b75f6:	2201      	movs	r2, #1
   b75f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75fc:	f10d 0107 	add.w	r1, sp, #7
   b7600:	47a0      	blx	r4
}
   b7602:	b002      	add	sp, #8
   b7604:	bd10      	pop	{r4, pc}

000b7606 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7606:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7608:	6803      	ldr	r3, [r0, #0]
   b760a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b760c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7610:	46a4      	mov	ip, r4
}
   b7612:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7616:	4760      	bx	ip

000b7618 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7618:	b513      	push	{r0, r1, r4, lr}
   b761a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b761c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b761e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7622:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7624:	f10d 0107 	add.w	r1, sp, #7
   b7628:	2201      	movs	r2, #1
   b762a:	47a0      	blx	r4
}
   b762c:	b002      	add	sp, #8
   b762e:	bd10      	pop	{r4, pc}

000b7630 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7630:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7632:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7634:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7638:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b763c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b763e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7640:	d008      	beq.n	b7654 <_ZN9TCPClient4readEv+0x24>
   b7642:	6963      	ldr	r3, [r4, #20]
   b7644:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7648:	1c51      	adds	r1, r2, #1
   b764a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b764e:	4413      	add	r3, r2
   b7650:	7918      	ldrb	r0, [r3, #4]
}
   b7652:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7654:	6803      	ldr	r3, [r0, #0]
   b7656:	691b      	ldr	r3, [r3, #16]
   b7658:	4798      	blx	r3
   b765a:	2800      	cmp	r0, #0
   b765c:	d1f1      	bne.n	b7642 <_ZN9TCPClient4readEv+0x12>
   b765e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7662:	e7f6      	b.n	b7652 <_ZN9TCPClient4readEv+0x22>

000b7664 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7664:	4770      	bx	lr

000b7666 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7666:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7668:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b766a:	43c0      	mvns	r0, r0
   b766c:	0fc0      	lsrs	r0, r0, #31
   b766e:	4770      	bx	lr

000b7670 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7670:	4770      	bx	lr
	...

000b7674 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7674:	4b06      	ldr	r3, [pc, #24]	; (b7690 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7676:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7678:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b767a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b767e:	d005      	beq.n	b768c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7680:	4608      	mov	r0, r1
   b7682:	f000 fd59 	bl	b8138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7686:	2800      	cmp	r0, #0
   b7688:	bf08      	it	eq
   b768a:	2400      	moveq	r4, #0
      }
   b768c:	4620      	mov	r0, r4
   b768e:	bd10      	pop	{r4, pc}
   b7690:	000b8814 	.word	0x000b8814

000b7694 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7694:	b510      	push	{r4, lr}
   b7696:	21ac      	movs	r1, #172	; 0xac
   b7698:	4604      	mov	r4, r0
   b769a:	f7fc fd12 	bl	b40c2 <_ZdlPvj>
   b769e:	4620      	mov	r0, r4
   b76a0:	bd10      	pop	{r4, pc}

000b76a2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b76a2:	21ac      	movs	r1, #172	; 0xac
   b76a4:	f7fc bd0d 	b.w	b40c2 <_ZdlPvj>

000b76a8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b76a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b76ac:	f04f 0800 	mov.w	r8, #0
   b76b0:	b086      	sub	sp, #24
   b76b2:	461c      	mov	r4, r3
   b76b4:	f8c0 8004 	str.w	r8, [r0, #4]
   b76b8:	4605      	mov	r5, r0
   b76ba:	460e      	mov	r6, r1
   b76bc:	4617      	mov	r7, r2
    struct timeval tv = {};
   b76be:	4641      	mov	r1, r8
   b76c0:	2210      	movs	r2, #16
   b76c2:	a802      	add	r0, sp, #8
   b76c4:	f000 fe5e 	bl	b8384 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b76c8:	1c63      	adds	r3, r4, #1
   b76ca:	d009      	beq.n	b76e0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b76cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b76d0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b76d4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b76d8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b76dc:	435c      	muls	r4, r3
   b76de:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b76e0:	6968      	ldr	r0, [r5, #20]
   b76e2:	2310      	movs	r3, #16
   b76e4:	9300      	str	r3, [sp, #0]
   b76e6:	6800      	ldr	r0, [r0, #0]
   b76e8:	ab02      	add	r3, sp, #8
   b76ea:	f241 0205 	movw	r2, #4101	; 0x1005
   b76ee:	f640 71ff 	movw	r1, #4095	; 0xfff
   b76f2:	f7ff fa05 	bl	b6b00 <sock_setsockopt>
    if (ret < 0) {
   b76f6:	2800      	cmp	r0, #0
   b76f8:	da07      	bge.n	b770a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b76fa:	f7ff fbad 	bl	b6e58 <__errno>
   b76fe:	6803      	ldr	r3, [r0, #0]
   b7700:	606b      	str	r3, [r5, #4]
        return 0;
   b7702:	2000      	movs	r0, #0
}
   b7704:	b006      	add	sp, #24
   b7706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b770a:	6968      	ldr	r0, [r5, #20]
   b770c:	2300      	movs	r3, #0
   b770e:	6800      	ldr	r0, [r0, #0]
   b7710:	463a      	mov	r2, r7
   b7712:	4631      	mov	r1, r6
   b7714:	f7ff fa14 	bl	b6b40 <sock_send>
    if (ret < 0) {
   b7718:	1e03      	subs	r3, r0, #0
   b771a:	dbee      	blt.n	b76fa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b771c:	4618      	mov	r0, r3
   b771e:	e7f1      	b.n	b7704 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7720 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7720:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7722:	6984      	ldr	r4, [r0, #24]
   b7724:	4b0a      	ldr	r3, [pc, #40]	; (b7750 <_ZN9TCPClientD1Ev+0x30>)
   b7726:	6003      	str	r3, [r0, #0]
   b7728:	4605      	mov	r5, r0
   b772a:	b17c      	cbz	r4, b774c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b772c:	6863      	ldr	r3, [r4, #4]
   b772e:	3b01      	subs	r3, #1
   b7730:	6063      	str	r3, [r4, #4]
   b7732:	b95b      	cbnz	r3, b774c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7734:	6823      	ldr	r3, [r4, #0]
   b7736:	4620      	mov	r0, r4
   b7738:	689b      	ldr	r3, [r3, #8]
   b773a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b773c:	68a3      	ldr	r3, [r4, #8]
   b773e:	3b01      	subs	r3, #1
   b7740:	60a3      	str	r3, [r4, #8]
   b7742:	b91b      	cbnz	r3, b774c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7744:	6823      	ldr	r3, [r4, #0]
   b7746:	4620      	mov	r0, r4
   b7748:	68db      	ldr	r3, [r3, #12]
   b774a:	4798      	blx	r3
   b774c:	4628      	mov	r0, r5
   b774e:	bd38      	pop	{r3, r4, r5, pc}
   b7750:	000b8918 	.word	0x000b8918

000b7754 <_ZN9TCPClientD0Ev>:
   b7754:	b510      	push	{r4, lr}
   b7756:	4604      	mov	r4, r0
   b7758:	f7ff ffe2 	bl	b7720 <_ZN9TCPClientD1Ev>
   b775c:	4620      	mov	r0, r4
   b775e:	211c      	movs	r1, #28
   b7760:	f7fc fcaf 	bl	b40c2 <_ZdlPvj>
   b7764:	4620      	mov	r0, r4
   b7766:	bd10      	pop	{r4, pc}

000b7768 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7768:	b530      	push	{r4, r5, lr}
   b776a:	b087      	sub	sp, #28
   b776c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b776e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7770:	4668      	mov	r0, sp
   b7772:	f7ff fc9b 	bl	b70ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7778:	3404      	adds	r4, #4
   b777a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b777c:	682b      	ldr	r3, [r5, #0]
   b777e:	7023      	strb	r3, [r4, #0]
    }
   b7780:	b007      	add	sp, #28
   b7782:	bd30      	pop	{r4, r5, pc}

000b7784 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7784:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7786:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7788:	4b05      	ldr	r3, [pc, #20]	; (b77a0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b778a:	4604      	mov	r4, r0
   b778c:	358c      	adds	r5, #140	; 0x8c
   b778e:	f844 3b04 	str.w	r3, [r4], #4
   b7792:	4606      	mov	r6, r0
   b7794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7798:	682b      	ldr	r3, [r5, #0]
   b779a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b779c:	4630      	mov	r0, r6
   b779e:	bd70      	pop	{r4, r5, r6, pc}
   b77a0:	000b8888 	.word	0x000b8888

000b77a4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b77a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b77a8:	4698      	mov	r8, r3
    stop();
   b77aa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b77ac:	b093      	sub	sp, #76	; 0x4c
   b77ae:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b77b0:	2400      	movs	r4, #0
    stop();
   b77b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b77b4:	4606      	mov	r6, r0
   b77b6:	4617      	mov	r7, r2
    stop();
   b77b8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b77ba:	4628      	mov	r0, r5
   b77bc:	466b      	mov	r3, sp
   b77be:	4622      	mov	r2, r4
   b77c0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b77c2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b77c4:	f7ff f994 	bl	b6af0 <netdb_getaddrinfo>
   b77c8:	4605      	mov	r5, r0
   b77ca:	2800      	cmp	r0, #0
   b77cc:	d163      	bne.n	b7896 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b77ce:	9b00      	ldr	r3, [sp, #0]
   b77d0:	2b00      	cmp	r3, #0
   b77d2:	d04b      	beq.n	b786c <_ZN9TCPClient7connectEPKctm+0xc8>
   b77d4:	695b      	ldr	r3, [r3, #20]
   b77d6:	2b00      	cmp	r3, #0
   b77d8:	d048      	beq.n	b786c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b77da:	a806      	add	r0, sp, #24
   b77dc:	f7ff fc22 	bl	b7024 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b77e0:	9b00      	ldr	r3, [sp, #0]
   b77e2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b77e4:	7863      	ldrb	r3, [r4, #1]
   b77e6:	2b02      	cmp	r3, #2
   b77e8:	d104      	bne.n	b77f4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b77ea:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b77ec:	a806      	add	r0, sp, #24
   b77ee:	f7ff ffbb 	bl	b7768 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b77f2:	e026      	b.n	b7842 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b77f4:	2b0a      	cmp	r3, #10
   b77f6:	d124      	bne.n	b7842 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b77f8:	2211      	movs	r2, #17
   b77fa:	4629      	mov	r1, r5
   b77fc:	a801      	add	r0, sp, #4
   b77fe:	f000 fdc1 	bl	b8384 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7802:	68a3      	ldr	r3, [r4, #8]
   b7804:	2b00      	cmp	r3, #0
   b7806:	d038      	beq.n	b787a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7808:	f104 0308 	add.w	r3, r4, #8
   b780c:	f10d 0c04 	add.w	ip, sp, #4
   b7810:	3418      	adds	r4, #24
   b7812:	6818      	ldr	r0, [r3, #0]
   b7814:	6859      	ldr	r1, [r3, #4]
   b7816:	4662      	mov	r2, ip
   b7818:	c203      	stmia	r2!, {r0, r1}
   b781a:	3308      	adds	r3, #8
   b781c:	42a3      	cmp	r3, r4
   b781e:	4694      	mov	ip, r2
   b7820:	d1f7      	bne.n	b7812 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7822:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7824:	a901      	add	r1, sp, #4
   b7826:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7828:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b782c:	f7ff fc08 	bl	b7040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7830:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7834:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7838:	ac07      	add	r4, sp, #28
   b783a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b783c:	f8dc 3000 	ldr.w	r3, [ip]
   b7840:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7842:	a806      	add	r0, sp, #24
   b7844:	f7ff fc0e 	bl	b7064 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7848:	b180      	cbz	r0, b786c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b784a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b784c:	ad07      	add	r5, sp, #28
   b784e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7852:	4b12      	ldr	r3, [pc, #72]	; (b789c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7854:	930c      	str	r3, [sp, #48]	; 0x30
   b7856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7858:	ac0d      	add	r4, sp, #52	; 0x34
   b785a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b785c:	682b      	ldr	r3, [r5, #0]
   b785e:	7023      	strb	r3, [r4, #0]
   b7860:	463a      	mov	r2, r7
   b7862:	4643      	mov	r3, r8
   b7864:	a90c      	add	r1, sp, #48	; 0x30
   b7866:	4630      	mov	r0, r6
   b7868:	47c8      	blx	r9
   b786a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b786c:	9800      	ldr	r0, [sp, #0]
   b786e:	f7ff f937 	bl	b6ae0 <netdb_freeaddrinfo>
}
   b7872:	4628      	mov	r0, r5
   b7874:	b013      	add	sp, #76	; 0x4c
   b7876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b787a:	68e3      	ldr	r3, [r4, #12]
   b787c:	2b00      	cmp	r3, #0
   b787e:	d1c3      	bne.n	b7808 <_ZN9TCPClient7connectEPKctm+0x64>
   b7880:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7884:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7888:	f7ff f91a 	bl	b6ac0 <inet_htonl>
   b788c:	4581      	cmp	r9, r0
   b788e:	d1bb      	bne.n	b7808 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7890:	f104 0114 	add.w	r1, r4, #20
   b7894:	e7aa      	b.n	b77ec <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7896:	4625      	mov	r5, r4
   b7898:	e7e8      	b.n	b786c <_ZN9TCPClient7connectEPKctm+0xc8>
   b789a:	bf00      	nop
   b789c:	000b8888 	.word	0x000b8888

000b78a0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b78a0:	b538      	push	{r3, r4, r5, lr}
   b78a2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b78a4:	681a      	ldr	r2, [r3, #0]
   b78a6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b78a8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b78aa:	da10      	bge.n	b78ce <_ZN9TCPClient9connectedEv+0x2e>
   b78ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78b4:	429a      	cmp	r2, r3
   b78b6:	d10a      	bne.n	b78ce <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b78b8:	6803      	ldr	r3, [r0, #0]
   b78ba:	691b      	ldr	r3, [r3, #16]
   b78bc:	4798      	blx	r3
        if (!rv) {
   b78be:	4604      	mov	r4, r0
   b78c0:	b928      	cbnz	r0, b78ce <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b78c2:	682b      	ldr	r3, [r5, #0]
   b78c4:	4628      	mov	r0, r5
   b78c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b78c8:	4798      	blx	r3
        rv = available();
   b78ca:	4620      	mov	r0, r4
}
   b78cc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b78ce:	2001      	movs	r0, #1
   b78d0:	e7fc      	b.n	b78cc <_ZN9TCPClient9connectedEv+0x2c>

000b78d2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b78d2:	b510      	push	{r4, lr}
   b78d4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b78da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b78de:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b78e0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78e2:	d005      	beq.n	b78f0 <_ZN9TCPClient4peekEv+0x1e>
   b78e4:	6963      	ldr	r3, [r4, #20]
   b78e6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b78ea:	4413      	add	r3, r2
   b78ec:	7918      	ldrb	r0, [r3, #4]
}
   b78ee:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b78f0:	6803      	ldr	r3, [r0, #0]
   b78f2:	691b      	ldr	r3, [r3, #16]
   b78f4:	4798      	blx	r3
   b78f6:	2800      	cmp	r0, #0
   b78f8:	d1f4      	bne.n	b78e4 <_ZN9TCPClient4peekEv+0x12>
   b78fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b78fe:	e7f6      	b.n	b78ee <_ZN9TCPClient4peekEv+0x1c>

000b7900 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7902:	6943      	ldr	r3, [r0, #20]
   b7904:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7906:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b790a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b790e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7910:	4605      	mov	r5, r0
   b7912:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7914:	d016      	beq.n	b7944 <_ZN9TCPClient4readEPhj+0x44>
   b7916:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7918:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b791c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7920:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7922:	42bc      	cmp	r4, r7
   b7924:	bf28      	it	cs
   b7926:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7928:	3304      	adds	r3, #4
   b792a:	4622      	mov	r2, r4
   b792c:	4419      	add	r1, r3
   b792e:	4630      	mov	r0, r6
   b7930:	f000 fd1a 	bl	b8368 <memcpy>
   b7934:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7936:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b793a:	4423      	add	r3, r4
   b793c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7940:	4620      	mov	r0, r4
   b7942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7944:	6803      	ldr	r3, [r0, #0]
   b7946:	691b      	ldr	r3, [r3, #16]
   b7948:	4798      	blx	r3
   b794a:	2800      	cmp	r0, #0
   b794c:	d1e3      	bne.n	b7916 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b794e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7952:	e7f5      	b.n	b7940 <_ZN9TCPClient4readEPhj+0x40>

000b7954 <_ZN9TCPClient12flush_bufferEv>:
   b7954:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7956:	2300      	movs	r3, #0
   b7958:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b795c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b795e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7962:	4770      	bx	lr

000b7964 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7968:	461f      	mov	r7, r3
    stop();
   b796a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b796c:	460c      	mov	r4, r1
    stop();
   b796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7970:	b08a      	sub	sp, #40	; 0x28
   b7972:	4605      	mov	r5, r0
   b7974:	4616      	mov	r6, r2
    stop();
   b7976:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7978:	7d23      	ldrb	r3, [r4, #20]
   b797a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b797e:	2b04      	cmp	r3, #4
   b7980:	bf0c      	ite	eq
   b7982:	2002      	moveq	r0, #2
   b7984:	200a      	movne	r0, #10
   b7986:	2206      	movs	r2, #6
   b7988:	2101      	movs	r1, #1
   b798a:	f7ff f8e1 	bl	b6b50 <sock_socket>
   b798e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7992:	696b      	ldr	r3, [r5, #20]
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	2b00      	cmp	r3, #0
   b7998:	da08      	bge.n	b79ac <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b799a:	682b      	ldr	r3, [r5, #0]
   b799c:	4628      	mov	r0, r5
   b799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b79a0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b79a2:	4798      	blx	r3
}
   b79a4:	4620      	mov	r0, r4
   b79a6:	b00a      	add	sp, #40	; 0x28
   b79a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b79ac:	4628      	mov	r0, r5
   b79ae:	f7ff ffd1 	bl	b7954 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b79b2:	b1b7      	cbz	r7, b79e2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b79b4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b79b6:	a903      	add	r1, sp, #12
   b79b8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b79ba:	9303      	str	r3, [sp, #12]
   b79bc:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b79c0:	f7ff f86e 	bl	b6aa0 <if_index_to_name>
   b79c4:	2800      	cmp	r0, #0
   b79c6:	d1e8      	bne.n	b799a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b79c8:	6968      	ldr	r0, [r5, #20]
   b79ca:	2306      	movs	r3, #6
   b79cc:	9300      	str	r3, [sp, #0]
   b79ce:	6800      	ldr	r0, [r0, #0]
   b79d0:	ab03      	add	r3, sp, #12
   b79d2:	f241 020b 	movw	r2, #4107	; 0x100b
   b79d6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b79da:	f7ff f891 	bl	b6b00 <sock_setsockopt>
   b79de:	2800      	cmp	r0, #0
   b79e0:	d1db      	bne.n	b799a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b79e2:	221c      	movs	r2, #28
   b79e4:	2100      	movs	r1, #0
   b79e6:	a803      	add	r0, sp, #12
   b79e8:	f000 fccc 	bl	b8384 <memset>
    if (ip.version() == 4) {
   b79ec:	7d23      	ldrb	r3, [r4, #20]
   b79ee:	2b04      	cmp	r3, #4
   b79f0:	d11d      	bne.n	b7a2e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b79f2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b79f6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b79f8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b79fc:	f7ff f868 	bl	b6ad0 <inet_htons>
   b7a00:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7a04:	6860      	ldr	r0, [r4, #4]
   b7a06:	f7ff f85b 	bl	b6ac0 <inet_htonl>
   b7a0a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7a0c:	696b      	ldr	r3, [r5, #20]
   b7a0e:	221c      	movs	r2, #28
   b7a10:	6818      	ldr	r0, [r3, #0]
   b7a12:	a903      	add	r1, sp, #12
   b7a14:	f7ff f884 	bl	b6b20 <sock_connect>
   b7a18:	2800      	cmp	r0, #0
   b7a1a:	d1be      	bne.n	b799a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7a1c:	3404      	adds	r4, #4
   b7a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a20:	696d      	ldr	r5, [r5, #20]
   b7a22:	358c      	adds	r5, #140	; 0x8c
   b7a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a26:	6823      	ldr	r3, [r4, #0]
   b7a28:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7a2a:	2401      	movs	r4, #1
   b7a2c:	e7ba      	b.n	b79a4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7a2e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7a32:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7a34:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7a38:	f7ff f84a 	bl	b6ad0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7a3c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7a3e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7a42:	1d23      	adds	r3, r4, #4
   b7a44:	f104 0714 	add.w	r7, r4, #20
   b7a48:	6818      	ldr	r0, [r3, #0]
   b7a4a:	6859      	ldr	r1, [r3, #4]
   b7a4c:	4632      	mov	r2, r6
   b7a4e:	c203      	stmia	r2!, {r0, r1}
   b7a50:	3308      	adds	r3, #8
   b7a52:	42bb      	cmp	r3, r7
   b7a54:	4616      	mov	r6, r2
   b7a56:	d1f7      	bne.n	b7a48 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7a58:	e7d8      	b.n	b7a0c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7a5c <_ZN9TCPClient9availableEv>:
{
   b7a5c:	b530      	push	{r4, r5, lr}
   b7a5e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7a60:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7a64:	b08b      	sub	sp, #44	; 0x2c
   b7a66:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7a68:	b12b      	cbz	r3, b7a76 <_ZN9TCPClient9availableEv+0x1a>
   b7a6a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7a6e:	429a      	cmp	r2, r3
   b7a70:	d101      	bne.n	b7a76 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7a72:	f7ff ff6f 	bl	b7954 <_ZN9TCPClient12flush_bufferEv>
   b7a76:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7a78:	6808      	ldr	r0, [r1, #0]
   b7a7a:	2800      	cmp	r0, #0
   b7a7c:	db18      	blt.n	b7ab0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7a7e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7a82:	2d7f      	cmp	r5, #127	; 0x7f
   b7a84:	d814      	bhi.n	b7ab0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7a86:	3104      	adds	r1, #4
   b7a88:	2308      	movs	r3, #8
   b7a8a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7a8e:	4429      	add	r1, r5
   b7a90:	f7ff f84e 	bl	b6b30 <sock_recv>
            if (ret > 0) {
   b7a94:	2800      	cmp	r0, #0
   b7a96:	dd13      	ble.n	b7ac0 <_ZN9TCPClient9availableEv+0x64>
   b7a98:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7a9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a9e:	b90a      	cbnz	r2, b7aa4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7aa0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7aa4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7aa6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7aaa:	4410      	add	r0, r2
   b7aac:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7ab0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7ab2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7ab6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7aba:	1ac0      	subs	r0, r0, r3
   b7abc:	b00b      	add	sp, #44	; 0x2c
   b7abe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7ac0:	f7ff f9ca 	bl	b6e58 <__errno>
   b7ac4:	6803      	ldr	r3, [r0, #0]
   b7ac6:	2b0b      	cmp	r3, #11
   b7ac8:	d0f2      	beq.n	b7ab0 <_ZN9TCPClient9availableEv+0x54>
   b7aca:	f7ff f9c5 	bl	b6e58 <__errno>
   b7ace:	6803      	ldr	r3, [r0, #0]
   b7ad0:	2b0b      	cmp	r3, #11
   b7ad2:	d0ed      	beq.n	b7ab0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7ad4:	2320      	movs	r3, #32
   b7ad6:	2500      	movs	r5, #0
   b7ad8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7adc:	f7ff f9bc 	bl	b6e58 <__errno>
   b7ae0:	6803      	ldr	r3, [r0, #0]
   b7ae2:	9301      	str	r3, [sp, #4]
   b7ae4:	4b08      	ldr	r3, [pc, #32]	; (b7b08 <_ZN9TCPClient9availableEv+0xac>)
   b7ae6:	4909      	ldr	r1, [pc, #36]	; (b7b0c <_ZN9TCPClient9availableEv+0xb0>)
   b7ae8:	9300      	str	r3, [sp, #0]
   b7aea:	aa02      	add	r2, sp, #8
   b7aec:	462b      	mov	r3, r5
   b7aee:	2032      	movs	r0, #50	; 0x32
   b7af0:	f7ff f8ee 	bl	b6cd0 <log_message>
                    sock_close(d_->sock);
   b7af4:	6963      	ldr	r3, [r4, #20]
   b7af6:	6818      	ldr	r0, [r3, #0]
   b7af8:	f7ff f80a 	bl	b6b10 <sock_close>
   b7afc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7b02:	601a      	str	r2, [r3, #0]
   b7b04:	e7d4      	b.n	b7ab0 <_ZN9TCPClient9availableEv+0x54>
   b7b06:	bf00      	nop
   b7b08:	000b88e3 	.word	0x000b88e3
   b7b0c:	000b88dc 	.word	0x000b88dc

000b7b10 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7b10:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7b12:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7b14:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7b16:	6818      	ldr	r0, [r3, #0]
   b7b18:	2800      	cmp	r0, #0
   b7b1a:	db01      	blt.n	b7b20 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7b1c:	f7fe fff8 	bl	b6b10 <sock_close>
   b7b20:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7b26:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7b28:	6960      	ldr	r0, [r4, #20]
   b7b2a:	2211      	movs	r2, #17
   b7b2c:	2100      	movs	r1, #0
   b7b2e:	308c      	adds	r0, #140	; 0x8c
   b7b30:	f000 fc28 	bl	b8384 <memset>
    flush_buffer();
   b7b34:	4620      	mov	r0, r4
}
   b7b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7b3a:	f7ff bf0b 	b.w	b7954 <_ZN9TCPClient12flush_bufferEv>

000b7b3e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7b3e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7b40:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7b42:	4604      	mov	r4, r0
          total(0) {
   b7b44:	6001      	str	r1, [r0, #0]
   b7b46:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7b4a:	3088      	adds	r0, #136	; 0x88
   b7b4c:	f7ff fa6a 	bl	b7024 <_ZN9IPAddressC1Ev>
}
   b7b50:	4620      	mov	r0, r4
   b7b52:	bd10      	pop	{r4, pc}

000b7b54 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b56:	2300      	movs	r3, #0
   b7b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7b5c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7b60:	4a0e      	ldr	r2, [pc, #56]	; (b7b9c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7b62:	6103      	str	r3, [r0, #16]
   b7b64:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7b66:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7b68:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7b6a:	20ac      	movs	r0, #172	; 0xac
   b7b6c:	9101      	str	r1, [sp, #4]
   b7b6e:	f7fc faa2 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b7b72:	1e05      	subs	r5, r0, #0
   b7b74:	f105 060c 	add.w	r6, r5, #12
   b7b78:	d008      	beq.n	b7b8c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7b7a:	2301      	movs	r3, #1
   b7b7c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7b80:	4b07      	ldr	r3, [pc, #28]	; (b7ba0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7b82:	9901      	ldr	r1, [sp, #4]
   b7b84:	602b      	str	r3, [r5, #0]
   b7b86:	4630      	mov	r0, r6
   b7b88:	f7ff ffd9 	bl	b7b3e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7b8c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7b8e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7b92:	f7ff fedf 	bl	b7954 <_ZN9TCPClient12flush_bufferEv>
}
   b7b96:	b002      	add	sp, #8
   b7b98:	bd70      	pop	{r4, r5, r6, pc}
   b7b9a:	bf00      	nop
   b7b9c:	000b8918 	.word	0x000b8918
   b7ba0:	000b88fc 	.word	0x000b88fc

000b7ba4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7ba4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7baa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7bac:	f7ff ffd2 	bl	b7b54 <_ZN9TCPClientC1Ei>
}
   b7bb0:	4620      	mov	r0, r4
   b7bb2:	bd10      	pop	{r4, pc}

000b7bb4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7bb4:	b510      	push	{r4, lr}
   b7bb6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7bb8:	6800      	ldr	r0, [r0, #0]
   b7bba:	2800      	cmp	r0, #0
   b7bbc:	db01      	blt.n	b7bc2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7bbe:	f7fe ffa7 	bl	b6b10 <sock_close>
    }
}
   b7bc2:	4620      	mov	r0, r4
   b7bc4:	bd10      	pop	{r4, pc}

000b7bc6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7bc6:	300c      	adds	r0, #12
   b7bc8:	f7ff bff4 	b.w	b7bb4 <_ZN9TCPClient4DataD1Ev>

000b7bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7bcc:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7bce:	681a      	ldr	r2, [r3, #0]
   b7bd0:	4b02      	ldr	r3, [pc, #8]	; (b7bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7bd2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7bd4:	4770      	bx	lr
   b7bd6:	bf00      	nop
   b7bd8:	2003e5c0 	.word	0x2003e5c0
   b7bdc:	2003e6fc 	.word	0x2003e6fc

000b7be0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7be0:	4770      	bx	lr

000b7be2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7be2:	7441      	strb	r1, [r0, #17]
}
   b7be4:	4770      	bx	lr

000b7be6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7be6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7be8:	7c00      	ldrb	r0, [r0, #16]
   b7bea:	f7ff f829 	bl	b6c40 <hal_usart_available_data_for_write>
}
   b7bee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7bf2:	bd08      	pop	{r3, pc}

000b7bf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7bf4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7bf6:	7c00      	ldrb	r0, [r0, #16]
   b7bf8:	f7fe fffa 	bl	b6bf0 <hal_usart_available>
}
   b7bfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7c00:	bd08      	pop	{r3, pc}

000b7c02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7c02:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7c04:	7c00      	ldrb	r0, [r0, #16]
   b7c06:	f7ff f803 	bl	b6c10 <hal_usart_peek>
}
   b7c0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c0e:	bd08      	pop	{r3, pc}

000b7c10 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7c10:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7c12:	7c00      	ldrb	r0, [r0, #16]
   b7c14:	f7fe fff4 	bl	b6c00 <hal_usart_read>
}
   b7c18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c1c:	bd08      	pop	{r3, pc}

000b7c1e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7c1e:	7c00      	ldrb	r0, [r0, #16]
   b7c20:	f7fe bffe 	b.w	b6c20 <hal_usart_flush>

000b7c24 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c26:	7c45      	ldrb	r5, [r0, #17]
{
   b7c28:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c2a:	b12d      	cbz	r5, b7c38 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7c2c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7c2e:	b003      	add	sp, #12
   b7c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7c34:	f7fe bfd4 	b.w	b6be0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7c38:	7c00      	ldrb	r0, [r0, #16]
   b7c3a:	9101      	str	r1, [sp, #4]
   b7c3c:	f7ff f800 	bl	b6c40 <hal_usart_available_data_for_write>
   b7c40:	2800      	cmp	r0, #0
   b7c42:	9901      	ldr	r1, [sp, #4]
   b7c44:	dcf2      	bgt.n	b7c2c <_ZN11USARTSerial5writeEh+0x8>
}
   b7c46:	4628      	mov	r0, r5
   b7c48:	b003      	add	sp, #12
   b7c4a:	bd30      	pop	{r4, r5, pc}

000b7c4c <_ZN11USARTSerialD0Ev>:
   b7c4c:	b510      	push	{r4, lr}
   b7c4e:	2114      	movs	r1, #20
   b7c50:	4604      	mov	r4, r0
   b7c52:	f7fc fa36 	bl	b40c2 <_ZdlPvj>
   b7c56:	4620      	mov	r0, r4
   b7c58:	bd10      	pop	{r4, pc}
	...

000b7c5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7c5c:	b510      	push	{r4, lr}
   b7c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7c62:	4604      	mov	r4, r0
   b7c64:	4608      	mov	r0, r1
   b7c66:	4611      	mov	r1, r2
   b7c68:	2200      	movs	r2, #0
   b7c6a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7c6e:	4b04      	ldr	r3, [pc, #16]	; (b7c80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7c70:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7c72:	2301      	movs	r3, #1
  _serial = serial;
   b7c74:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7c76:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7c78:	f7fe ffea 	bl	b6c50 <hal_usart_init_ex>
}
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	bd10      	pop	{r4, pc}
   b7c80:	000b8980 	.word	0x000b8980

000b7c84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7c84:	7441      	strb	r1, [r0, #17]
}
   b7c86:	4770      	bx	lr

000b7c88 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7c88:	4770      	bx	lr

000b7c8a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7c8a:	4770      	bx	lr

000b7c8c <_ZN9USBSerial4readEv>:
{
   b7c8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7c8e:	2100      	movs	r1, #0
   b7c90:	7c00      	ldrb	r0, [r0, #16]
   b7c92:	f7ff f805 	bl	b6ca0 <HAL_USB_USART_Receive_Data>
}
   b7c96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7c9a:	bd08      	pop	{r3, pc}

000b7c9c <_ZN9USBSerial4peekEv>:
{
   b7c9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7c9e:	2101      	movs	r1, #1
   b7ca0:	7c00      	ldrb	r0, [r0, #16]
   b7ca2:	f7fe fffd 	bl	b6ca0 <HAL_USB_USART_Receive_Data>
}
   b7ca6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7caa:	bd08      	pop	{r3, pc}

000b7cac <_ZN9USBSerial17availableForWriteEv>:
{
   b7cac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7cae:	7c00      	ldrb	r0, [r0, #16]
   b7cb0:	f7fe ffee 	bl	b6c90 <HAL_USB_USART_Available_Data_For_Write>
}
   b7cb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cb8:	bd08      	pop	{r3, pc}

000b7cba <_ZN9USBSerial9availableEv>:
{
   b7cba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7cbc:	7c00      	ldrb	r0, [r0, #16]
   b7cbe:	f7fe ffdf 	bl	b6c80 <HAL_USB_USART_Available_Data>
}
   b7cc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cc6:	bd08      	pop	{r3, pc}

000b7cc8 <_ZN9USBSerial5writeEh>:
{
   b7cc8:	b513      	push	{r0, r1, r4, lr}
   b7cca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7ccc:	7c00      	ldrb	r0, [r0, #16]
{
   b7cce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7cd0:	f7fe ffde 	bl	b6c90 <HAL_USB_USART_Available_Data_For_Write>
   b7cd4:	2800      	cmp	r0, #0
   b7cd6:	9901      	ldr	r1, [sp, #4]
   b7cd8:	dc01      	bgt.n	b7cde <_ZN9USBSerial5writeEh+0x16>
   b7cda:	7c60      	ldrb	r0, [r4, #17]
   b7cdc:	b120      	cbz	r0, b7ce8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7cde:	7c20      	ldrb	r0, [r4, #16]
   b7ce0:	f7fe ffe6 	bl	b6cb0 <HAL_USB_USART_Send_Data>
   b7ce4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7ce8:	b002      	add	sp, #8
   b7cea:	bd10      	pop	{r4, pc}

000b7cec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7cec:	7c00      	ldrb	r0, [r0, #16]
   b7cee:	f7fe bfe7 	b.w	b6cc0 <HAL_USB_USART_Flush_Data>

000b7cf2 <_ZN9USBSerialD0Ev>:
   b7cf2:	b510      	push	{r4, lr}
   b7cf4:	2114      	movs	r1, #20
   b7cf6:	4604      	mov	r4, r0
   b7cf8:	f7fc f9e3 	bl	b40c2 <_ZdlPvj>
   b7cfc:	4620      	mov	r0, r4
   b7cfe:	bd10      	pop	{r4, pc}

000b7d00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7d00:	b510      	push	{r4, lr}
   b7d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d06:	4604      	mov	r4, r0
   b7d08:	4608      	mov	r0, r1
   b7d0a:	2100      	movs	r1, #0
   b7d0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7d10:	4b04      	ldr	r3, [pc, #16]	; (b7d24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7d12:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7d14:	2301      	movs	r3, #1
  _serial = serial;
   b7d16:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7d18:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7d1a:	4611      	mov	r1, r2
   b7d1c:	f7fe ffa0 	bl	b6c60 <HAL_USB_USART_Init>
}
   b7d20:	4620      	mov	r0, r4
   b7d22:	bd10      	pop	{r4, pc}
   b7d24:	000b89b0 	.word	0x000b89b0

000b7d28 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7d28:	7c00      	ldrb	r0, [r0, #16]
   b7d2a:	2200      	movs	r2, #0
   b7d2c:	f7fe bfa0 	b.w	b6c70 <HAL_USB_USART_Begin>

000b7d30 <_Z19acquireSerialBufferv>:
{
   b7d30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7d32:	2214      	movs	r2, #20
{
   b7d34:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7d36:	2100      	movs	r1, #0
   b7d38:	f000 fb24 	bl	b8384 <memset>
}
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	bd10      	pop	{r4, pc}

000b7d40 <_Z16_fetch_usbserialv>:
{
   b7d40:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d42:	4c0f      	ldr	r4, [pc, #60]	; (b7d80 <_Z16_fetch_usbserialv+0x40>)
{
   b7d44:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7d46:	a803      	add	r0, sp, #12
   b7d48:	f7ff fff2 	bl	b7d30 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d4c:	7821      	ldrb	r1, [r4, #0]
   b7d4e:	f3bf 8f5b 	dmb	ish
   b7d52:	f011 0101 	ands.w	r1, r1, #1
   b7d56:	d10f      	bne.n	b7d78 <_Z16_fetch_usbserialv+0x38>
   b7d58:	4620      	mov	r0, r4
   b7d5a:	9101      	str	r1, [sp, #4]
   b7d5c:	f7fc f9b3 	bl	b40c6 <__cxa_guard_acquire>
   b7d60:	9901      	ldr	r1, [sp, #4]
   b7d62:	b148      	cbz	r0, b7d78 <_Z16_fetch_usbserialv+0x38>
   b7d64:	aa03      	add	r2, sp, #12
   b7d66:	4807      	ldr	r0, [pc, #28]	; (b7d84 <_Z16_fetch_usbserialv+0x44>)
   b7d68:	f7ff ffca 	bl	b7d00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	f7fc f9af 	bl	b40d0 <__cxa_guard_release>
   b7d72:	4805      	ldr	r0, [pc, #20]	; (b7d88 <_Z16_fetch_usbserialv+0x48>)
   b7d74:	f000 faf2 	bl	b835c <atexit>
	return _usbserial;
}
   b7d78:	4802      	ldr	r0, [pc, #8]	; (b7d84 <_Z16_fetch_usbserialv+0x44>)
   b7d7a:	b008      	add	sp, #32
   b7d7c:	bd10      	pop	{r4, pc}
   b7d7e:	bf00      	nop
   b7d80:	2003e700 	.word	0x2003e700
   b7d84:	2003e704 	.word	0x2003e704
   b7d88:	000b7c89 	.word	0x000b7c89

000b7d8c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7d8c:	2200      	movs	r2, #0
   b7d8e:	6840      	ldr	r0, [r0, #4]
   b7d90:	4611      	mov	r1, r2
   b7d92:	f7fe bff9 	b.w	b6d88 <network_ready>

000b7d96 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d96:	2200      	movs	r2, #0
   b7d98:	6840      	ldr	r0, [r0, #4]
   b7d9a:	4611      	mov	r1, r2
   b7d9c:	f7ff b814 	b.w	b6dc8 <network_listening>

000b7da0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7da0:	2200      	movs	r2, #0
   b7da2:	6840      	ldr	r0, [r0, #4]
   b7da4:	4611      	mov	r1, r2
   b7da6:	f7ff b81f 	b.w	b6de8 <network_get_listen_timeout>

000b7daa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7daa:	6840      	ldr	r0, [r0, #4]
   b7dac:	2200      	movs	r2, #0
   b7dae:	f7ff b813 	b.w	b6dd8 <network_set_listen_timeout>

000b7db2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7db2:	6840      	ldr	r0, [r0, #4]
   b7db4:	2200      	movs	r2, #0
   b7db6:	f081 0101 	eor.w	r1, r1, #1
   b7dba:	f7fe bffd 	b.w	b6db8 <network_listen>

000b7dbe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7dbe:	2300      	movs	r3, #0
   b7dc0:	6840      	ldr	r0, [r0, #4]
   b7dc2:	461a      	mov	r2, r3
   b7dc4:	4619      	mov	r1, r3
   b7dc6:	f7fe bfef 	b.w	b6da8 <network_off>

000b7dca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7dca:	2300      	movs	r3, #0
   b7dcc:	6840      	ldr	r0, [r0, #4]
   b7dce:	461a      	mov	r2, r3
   b7dd0:	4619      	mov	r1, r3
   b7dd2:	f7fe bfe1 	b.w	b6d98 <network_on>

000b7dd6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7dd6:	2200      	movs	r2, #0
   b7dd8:	6840      	ldr	r0, [r0, #4]
   b7dda:	4611      	mov	r1, r2
   b7ddc:	f7fe bfc4 	b.w	b6d68 <network_connecting>

000b7de0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7de0:	6840      	ldr	r0, [r0, #4]
   b7de2:	2200      	movs	r2, #0
   b7de4:	2102      	movs	r1, #2
   b7de6:	f7fe bfc7 	b.w	b6d78 <network_disconnect>

000b7dea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7dea:	2300      	movs	r3, #0
   b7dec:	6840      	ldr	r0, [r0, #4]
   b7dee:	461a      	mov	r2, r3
   b7df0:	f7fe bfb2 	b.w	b6d58 <network_connect>

000b7df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7df4:	4b02      	ldr	r3, [pc, #8]	; (b7e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7df6:	2204      	movs	r2, #4
   b7df8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7dfa:	4a02      	ldr	r2, [pc, #8]	; (b7e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7dfc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7dfe:	4770      	bx	lr
   b7e00:	2003e718 	.word	0x2003e718
   b7e04:	000b89e0 	.word	0x000b89e0

000b7e08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7e08:	4b01      	ldr	r3, [pc, #4]	; (b7e10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7e0a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7e0c:	4770      	bx	lr
   b7e0e:	bf00      	nop
   b7e10:	2003e5c4 	.word	0x2003e5c4

000b7e14 <serialEventRun>:
{
   b7e14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7e16:	4b0b      	ldr	r3, [pc, #44]	; (b7e44 <serialEventRun+0x30>)
   b7e18:	b143      	cbz	r3, b7e2c <serialEventRun+0x18>
   b7e1a:	f7ff ff91 	bl	b7d40 <_Z16_fetch_usbserialv>
   b7e1e:	6803      	ldr	r3, [r0, #0]
   b7e20:	691b      	ldr	r3, [r3, #16]
   b7e22:	4798      	blx	r3
   b7e24:	2800      	cmp	r0, #0
   b7e26:	dd01      	ble.n	b7e2c <serialEventRun+0x18>
        serialEvent();
   b7e28:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7e2c:	4b06      	ldr	r3, [pc, #24]	; (b7e48 <serialEventRun+0x34>)
   b7e2e:	b143      	cbz	r3, b7e42 <serialEventRun+0x2e>
   b7e30:	f000 f95c 	bl	b80ec <_Z22__fetch_global_Serial1v>
   b7e34:	6803      	ldr	r3, [r0, #0]
   b7e36:	691b      	ldr	r3, [r3, #16]
   b7e38:	4798      	blx	r3
   b7e3a:	2800      	cmp	r0, #0
   b7e3c:	dd01      	ble.n	b7e42 <serialEventRun+0x2e>
        serialEvent1();
   b7e3e:	f3af 8000 	nop.w
}
   b7e42:	bd08      	pop	{r3, pc}
	...

000b7e4c <_post_loop>:
{
   b7e4c:	b508      	push	{r3, lr}
	serialEventRun();
   b7e4e:	f7ff ffe1 	bl	b7e14 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7e52:	f7fe fdbd 	bl	b69d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7e56:	4b01      	ldr	r3, [pc, #4]	; (b7e5c <_post_loop+0x10>)
   b7e58:	6018      	str	r0, [r3, #0]
}
   b7e5a:	bd08      	pop	{r3, pc}
   b7e5c:	2003e728 	.word	0x2003e728

000b7e60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7e60:	4805      	ldr	r0, [pc, #20]	; (b7e78 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7e62:	4a06      	ldr	r2, [pc, #24]	; (b7e7c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7e64:	4906      	ldr	r1, [pc, #24]	; (b7e80 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7e66:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7e68:	1a12      	subs	r2, r2, r0
   b7e6a:	f000 fa7d 	bl	b8368 <memcpy>
    __backup_sram_signature = signature;
   b7e6e:	4b05      	ldr	r3, [pc, #20]	; (b7e84 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7e70:	4a05      	ldr	r2, [pc, #20]	; (b7e88 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7e72:	601a      	str	r2, [r3, #0]
}
   b7e74:	bd08      	pop	{r3, pc}
   b7e76:	bf00      	nop
   b7e78:	2003f400 	.word	0x2003f400
   b7e7c:	2003f404 	.word	0x2003f404
   b7e80:	000b8c38 	.word	0x000b8c38
   b7e84:	2003f400 	.word	0x2003f400
   b7e88:	9a271c1e 	.word	0x9a271c1e

000b7e8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7e8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7e8e:	2300      	movs	r3, #0
   b7e90:	9300      	str	r3, [sp, #0]
   b7e92:	461a      	mov	r2, r3
   b7e94:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7e98:	f7fe ff44 	bl	b6d24 <system_ctrl_set_result>
}
   b7e9c:	b003      	add	sp, #12
   b7e9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7ea4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7ea4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7ea6:	8843      	ldrh	r3, [r0, #2]
   b7ea8:	2b0a      	cmp	r3, #10
   b7eaa:	d008      	beq.n	b7ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7eac:	2b50      	cmp	r3, #80	; 0x50
   b7eae:	d10b      	bne.n	b7ec8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7eb0:	4b09      	ldr	r3, [pc, #36]	; (b7ed8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7eb2:	681b      	ldr	r3, [r3, #0]
   b7eb4:	b14b      	cbz	r3, b7eca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7eb6:	b003      	add	sp, #12
   b7eb8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7ebc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7ebe:	f7ff ffe5 	bl	b7e8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7ec2:	b003      	add	sp, #12
   b7ec4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ec8:	2300      	movs	r3, #0
   b7eca:	9300      	str	r3, [sp, #0]
   b7ecc:	461a      	mov	r2, r3
   b7ece:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7ed2:	f7fe ff27 	bl	b6d24 <system_ctrl_set_result>
}
   b7ed6:	e7f4      	b.n	b7ec2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7ed8:	2003e724 	.word	0x2003e724

000b7edc <module_user_init_hook>:
{
   b7edc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7ede:	4812      	ldr	r0, [pc, #72]	; (b7f28 <module_user_init_hook+0x4c>)
   b7ee0:	2100      	movs	r1, #0
   b7ee2:	f7fe ffc9 	bl	b6e78 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7ee6:	4b11      	ldr	r3, [pc, #68]	; (b7f2c <module_user_init_hook+0x50>)
   b7ee8:	681a      	ldr	r2, [r3, #0]
   b7eea:	4b11      	ldr	r3, [pc, #68]	; (b7f30 <module_user_init_hook+0x54>)
   b7eec:	429a      	cmp	r2, r3
   b7eee:	4b11      	ldr	r3, [pc, #68]	; (b7f34 <module_user_init_hook+0x58>)
   b7ef0:	bf0c      	ite	eq
   b7ef2:	2201      	moveq	r2, #1
   b7ef4:	2200      	movne	r2, #0
   b7ef6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7ef8:	d001      	beq.n	b7efe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7efa:	f7ff ffb1 	bl	b7e60 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7efe:	f7fe fd4f 	bl	b69a0 <HAL_RNG_GetRandomNumber>
   b7f02:	4604      	mov	r4, r0
    srand(seed);
   b7f04:	f000 fa46 	bl	b8394 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7f08:	4b0b      	ldr	r3, [pc, #44]	; (b7f38 <module_user_init_hook+0x5c>)
   b7f0a:	b113      	cbz	r3, b7f12 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7f0c:	4620      	mov	r0, r4
   b7f0e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7f12:	2100      	movs	r1, #0
   b7f14:	4808      	ldr	r0, [pc, #32]	; (b7f38 <module_user_init_hook+0x5c>)
   b7f16:	f7fe ff17 	bl	b6d48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7f1e:	4807      	ldr	r0, [pc, #28]	; (b7f3c <module_user_init_hook+0x60>)
   b7f20:	2100      	movs	r1, #0
   b7f22:	f7fe bef5 	b.w	b6d10 <system_ctrl_set_app_request_handler>
   b7f26:	bf00      	nop
   b7f28:	000b7e09 	.word	0x000b7e09
   b7f2c:	2003f400 	.word	0x2003f400
   b7f30:	9a271c1e 	.word	0x9a271c1e
   b7f34:	2003e720 	.word	0x2003e720
   b7f38:	00000000 	.word	0x00000000
   b7f3c:	000b7ea5 	.word	0x000b7ea5

000b7f40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7f40:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7f42:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7f44:	d902      	bls.n	b7f4c <pinAvailable+0xc>
    return false;
   b7f46:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7f48:	b002      	add	sp, #8
   b7f4a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7f4c:	f1a0 030b 	sub.w	r3, r0, #11
   b7f50:	2b02      	cmp	r3, #2
   b7f52:	d81a      	bhi.n	b7f8a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7f54:	4c17      	ldr	r4, [pc, #92]	; (b7fb4 <pinAvailable+0x74>)
   b7f56:	7821      	ldrb	r1, [r4, #0]
   b7f58:	f3bf 8f5b 	dmb	ish
   b7f5c:	f011 0101 	ands.w	r1, r1, #1
   b7f60:	d10b      	bne.n	b7f7a <pinAvailable+0x3a>
   b7f62:	4620      	mov	r0, r4
   b7f64:	9101      	str	r1, [sp, #4]
   b7f66:	f7fc f8ae 	bl	b40c6 <__cxa_guard_acquire>
   b7f6a:	9901      	ldr	r1, [sp, #4]
   b7f6c:	b128      	cbz	r0, b7f7a <pinAvailable+0x3a>
   b7f6e:	4812      	ldr	r0, [pc, #72]	; (b7fb8 <pinAvailable+0x78>)
   b7f70:	f7ff fa0c 	bl	b738c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7f74:	4620      	mov	r0, r4
   b7f76:	f7fc f8ab 	bl	b40d0 <__cxa_guard_release>
   b7f7a:	4b0f      	ldr	r3, [pc, #60]	; (b7fb8 <pinAvailable+0x78>)
   b7f7c:	7818      	ldrb	r0, [r3, #0]
   b7f7e:	f7fe fe07 	bl	b6b90 <hal_spi_is_enabled>
   b7f82:	2800      	cmp	r0, #0
   b7f84:	d1df      	bne.n	b7f46 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7f86:	2001      	movs	r0, #1
   b7f88:	e7de      	b.n	b7f48 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7f8a:	2801      	cmp	r0, #1
   b7f8c:	d809      	bhi.n	b7fa2 <pinAvailable+0x62>
   b7f8e:	f000 f86d 	bl	b806c <_Z19__fetch_global_Wirev>
   b7f92:	2100      	movs	r1, #0
   b7f94:	7c00      	ldrb	r0, [r0, #16]
   b7f96:	f7fe fd73 	bl	b6a80 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7f9a:	f080 0001 	eor.w	r0, r0, #1
   b7f9e:	b2c0      	uxtb	r0, r0
   b7fa0:	e7d2      	b.n	b7f48 <pinAvailable+0x8>
   b7fa2:	3809      	subs	r0, #9
   b7fa4:	2801      	cmp	r0, #1
   b7fa6:	d8ee      	bhi.n	b7f86 <pinAvailable+0x46>
   b7fa8:	f000 f8a0 	bl	b80ec <_Z22__fetch_global_Serial1v>
   b7fac:	7c00      	ldrb	r0, [r0, #16]
   b7fae:	f7fe fe3f 	bl	b6c30 <hal_usart_is_enabled>
   b7fb2:	e7f2      	b.n	b7f9a <pinAvailable+0x5a>
   b7fb4:	2003e62c 	.word	0x2003e62c
   b7fb8:	2003e630 	.word	0x2003e630

000b7fbc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7fbc:	2823      	cmp	r0, #35	; 0x23
{
   b7fbe:	b538      	push	{r3, r4, r5, lr}
   b7fc0:	4604      	mov	r4, r0
   b7fc2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7fc4:	d80a      	bhi.n	b7fdc <pinMode+0x20>
   b7fc6:	29ff      	cmp	r1, #255	; 0xff
   b7fc8:	d008      	beq.n	b7fdc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7fca:	f7ff ffb9 	bl	b7f40 <pinAvailable>
   b7fce:	b128      	cbz	r0, b7fdc <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7fd0:	4629      	mov	r1, r5
   b7fd2:	4620      	mov	r0, r4
}
   b7fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7fd8:	f7fe bd0a 	b.w	b69f0 <hal_gpio_mode>
}
   b7fdc:	bd38      	pop	{r3, r4, r5, pc}

000b7fde <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7fde:	b538      	push	{r3, r4, r5, lr}
   b7fe0:	4604      	mov	r4, r0
   b7fe2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7fe4:	f7fe fd0c 	bl	b6a00 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7fe8:	28ff      	cmp	r0, #255	; 0xff
   b7fea:	d010      	beq.n	b800e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7fec:	2806      	cmp	r0, #6
   b7fee:	d804      	bhi.n	b7ffa <digitalWrite+0x1c>
   b7ff0:	234d      	movs	r3, #77	; 0x4d
   b7ff2:	fa23 f000 	lsr.w	r0, r3, r0
   b7ff6:	07c3      	lsls	r3, r0, #31
   b7ff8:	d409      	bmi.n	b800e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7ffa:	4620      	mov	r0, r4
   b7ffc:	f7ff ffa0 	bl	b7f40 <pinAvailable>
   b8000:	b128      	cbz	r0, b800e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8002:	4629      	mov	r1, r5
   b8004:	4620      	mov	r0, r4
}
   b8006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b800a:	f7fe bd01 	b.w	b6a10 <hal_gpio_write>
}
   b800e:	bd38      	pop	{r3, r4, r5, pc}

000b8010 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8010:	b510      	push	{r4, lr}
   b8012:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8014:	f7fe fcf4 	bl	b6a00 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8018:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b801a:	b2db      	uxtb	r3, r3
   b801c:	2b01      	cmp	r3, #1
   b801e:	d908      	bls.n	b8032 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8020:	4620      	mov	r0, r4
   b8022:	f7ff ff8d 	bl	b7f40 <pinAvailable>
   b8026:	b120      	cbz	r0, b8032 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8028:	4620      	mov	r0, r4
}
   b802a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b802e:	f7fe bcf7 	b.w	b6a20 <hal_gpio_read>
}
   b8032:	2000      	movs	r0, #0
   b8034:	bd10      	pop	{r4, pc}

000b8036 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8036:	4770      	bx	lr

000b8038 <_Z17acquireWireBufferv>:
{
   b8038:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b803a:	4b0a      	ldr	r3, [pc, #40]	; (b8064 <_Z17acquireWireBufferv+0x2c>)
   b803c:	6003      	str	r3, [r0, #0]
   b803e:	2301      	movs	r3, #1
{
   b8040:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8042:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8044:	4908      	ldr	r1, [pc, #32]	; (b8068 <_Z17acquireWireBufferv+0x30>)
   b8046:	2020      	movs	r0, #32
   b8048:	f000 f874 	bl	b8134 <_ZnajRKSt9nothrow_t>
	};
   b804c:	2520      	movs	r5, #32
   b804e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8050:	4905      	ldr	r1, [pc, #20]	; (b8068 <_Z17acquireWireBufferv+0x30>)
	};
   b8052:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8054:	4628      	mov	r0, r5
   b8056:	f000 f86d 	bl	b8134 <_ZnajRKSt9nothrow_t>
	};
   b805a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b805e:	4620      	mov	r0, r4
   b8060:	bd38      	pop	{r3, r4, r5, pc}
   b8062:	bf00      	nop
   b8064:	00010018 	.word	0x00010018
   b8068:	000b8a14 	.word	0x000b8a14

000b806c <_Z19__fetch_global_Wirev>:
{
   b806c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b806e:	4d0e      	ldr	r5, [pc, #56]	; (b80a8 <_Z19__fetch_global_Wirev+0x3c>)
   b8070:	7829      	ldrb	r1, [r5, #0]
   b8072:	f3bf 8f5b 	dmb	ish
   b8076:	f011 0401 	ands.w	r4, r1, #1
{
   b807a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b807c:	d111      	bne.n	b80a2 <_Z19__fetch_global_Wirev+0x36>
   b807e:	4628      	mov	r0, r5
   b8080:	f7fc f821 	bl	b40c6 <__cxa_guard_acquire>
   b8084:	b168      	cbz	r0, b80a2 <_Z19__fetch_global_Wirev+0x36>
   b8086:	4668      	mov	r0, sp
   b8088:	f7ff ffd6 	bl	b8038 <_Z17acquireWireBufferv>
   b808c:	466a      	mov	r2, sp
   b808e:	4621      	mov	r1, r4
   b8090:	4806      	ldr	r0, [pc, #24]	; (b80ac <_Z19__fetch_global_Wirev+0x40>)
   b8092:	f7fe ff6f 	bl	b6f74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8096:	4628      	mov	r0, r5
   b8098:	f7fc f81a 	bl	b40d0 <__cxa_guard_release>
   b809c:	4804      	ldr	r0, [pc, #16]	; (b80b0 <_Z19__fetch_global_Wirev+0x44>)
   b809e:	f000 f95d 	bl	b835c <atexit>
	return wire;
}
   b80a2:	4802      	ldr	r0, [pc, #8]	; (b80ac <_Z19__fetch_global_Wirev+0x40>)
   b80a4:	b007      	add	sp, #28
   b80a6:	bd30      	pop	{r4, r5, pc}
   b80a8:	2003e72c 	.word	0x2003e72c
   b80ac:	2003e730 	.word	0x2003e730
   b80b0:	000b8037 	.word	0x000b8037

000b80b4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80b4:	4770      	bx	lr
	...

000b80b8 <_Z20acquireSerial1Bufferv>:
{
   b80b8:	b538      	push	{r3, r4, r5, lr}
   b80ba:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b80bc:	2514      	movs	r5, #20
   b80be:	462a      	mov	r2, r5
   b80c0:	2100      	movs	r1, #0
   b80c2:	f000 f95f 	bl	b8384 <memset>
   b80c6:	8025      	strh	r5, [r4, #0]
   b80c8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80ca:	4907      	ldr	r1, [pc, #28]	; (b80e8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b80cc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80ce:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b80d0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80d2:	f000 f82f 	bl	b8134 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80d6:	4904      	ldr	r1, [pc, #16]	; (b80e8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b80d8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b80da:	4628      	mov	r0, r5
   b80dc:	f000 f82a 	bl	b8134 <_ZnajRKSt9nothrow_t>
    };
   b80e0:	60e0      	str	r0, [r4, #12]
}
   b80e2:	4620      	mov	r0, r4
   b80e4:	bd38      	pop	{r3, r4, r5, pc}
   b80e6:	bf00      	nop
   b80e8:	000b8a14 	.word	0x000b8a14

000b80ec <_Z22__fetch_global_Serial1v>:
{
   b80ec:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80ee:	4d0e      	ldr	r5, [pc, #56]	; (b8128 <_Z22__fetch_global_Serial1v+0x3c>)
   b80f0:	7829      	ldrb	r1, [r5, #0]
   b80f2:	f3bf 8f5b 	dmb	ish
   b80f6:	f011 0401 	ands.w	r4, r1, #1
{
   b80fa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80fc:	d111      	bne.n	b8122 <_Z22__fetch_global_Serial1v+0x36>
   b80fe:	4628      	mov	r0, r5
   b8100:	f7fb ffe1 	bl	b40c6 <__cxa_guard_acquire>
   b8104:	b168      	cbz	r0, b8122 <_Z22__fetch_global_Serial1v+0x36>
   b8106:	a801      	add	r0, sp, #4
   b8108:	f7ff ffd6 	bl	b80b8 <_Z20acquireSerial1Bufferv>
   b810c:	aa01      	add	r2, sp, #4
   b810e:	4621      	mov	r1, r4
   b8110:	4806      	ldr	r0, [pc, #24]	; (b812c <_Z22__fetch_global_Serial1v+0x40>)
   b8112:	f7ff fda3 	bl	b7c5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8116:	4628      	mov	r0, r5
   b8118:	f7fb ffda 	bl	b40d0 <__cxa_guard_release>
   b811c:	4804      	ldr	r0, [pc, #16]	; (b8130 <_Z22__fetch_global_Serial1v+0x44>)
   b811e:	f000 f91d 	bl	b835c <atexit>
    return serial1;
}
   b8122:	4802      	ldr	r0, [pc, #8]	; (b812c <_Z22__fetch_global_Serial1v+0x40>)
   b8124:	b007      	add	sp, #28
   b8126:	bd30      	pop	{r4, r5, pc}
   b8128:	2003e744 	.word	0x2003e744
   b812c:	2003e748 	.word	0x2003e748
   b8130:	000b80b5 	.word	0x000b80b5

000b8134 <_ZnajRKSt9nothrow_t>:
   b8134:	f7fb bfc1 	b.w	b40ba <_Znaj>

000b8138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8138:	4901      	ldr	r1, [pc, #4]	; (b8140 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b813a:	f000 b8f9 	b.w	b8330 <_ZNKSt9type_infoeqERKS_>
   b813e:	bf00      	nop
   b8140:	000b8a30 	.word	0x000b8a30

000b8144 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8146:	2400      	movs	r4, #0
   b8148:	2310      	movs	r3, #16
   b814a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b814e:	6803      	ldr	r3, [r0, #0]
   b8150:	4615      	mov	r5, r2
   b8152:	699e      	ldr	r6, [r3, #24]
   b8154:	6812      	ldr	r2, [r2, #0]
   b8156:	466b      	mov	r3, sp
   b8158:	e9cd 4400 	strd	r4, r4, [sp]
   b815c:	47b0      	blx	r6
   b815e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8162:	f003 0306 	and.w	r3, r3, #6
   b8166:	2b06      	cmp	r3, #6
   b8168:	bf03      	ittte	eq
   b816a:	9b00      	ldreq	r3, [sp, #0]
   b816c:	602b      	streq	r3, [r5, #0]
   b816e:	2001      	moveq	r0, #1
   b8170:	4620      	movne	r0, r4
   b8172:	b004      	add	sp, #16
   b8174:	bd70      	pop	{r4, r5, r6, pc}

000b8176 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8176:	9800      	ldr	r0, [sp, #0]
   b8178:	4290      	cmp	r0, r2
   b817a:	bf14      	ite	ne
   b817c:	2001      	movne	r0, #1
   b817e:	2006      	moveq	r0, #6
   b8180:	4770      	bx	lr
	...

000b8184 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8184:	b510      	push	{r4, lr}
   b8186:	4b03      	ldr	r3, [pc, #12]	; (b8194 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8188:	6003      	str	r3, [r0, #0]
   b818a:	4604      	mov	r4, r0
   b818c:	f000 f8cd 	bl	b832a <_ZNSt9type_infoD1Ev>
   b8190:	4620      	mov	r0, r4
   b8192:	bd10      	pop	{r4, pc}
   b8194:	000b8a70 	.word	0x000b8a70

000b8198 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8198:	b510      	push	{r4, lr}
   b819a:	4604      	mov	r4, r0
   b819c:	f7ff fff2 	bl	b8184 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b81a0:	4620      	mov	r0, r4
   b81a2:	2108      	movs	r1, #8
   b81a4:	f7fb ff8d 	bl	b40c2 <_ZdlPvj>
   b81a8:	4620      	mov	r0, r4
   b81aa:	bd10      	pop	{r4, pc}

000b81ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b81ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81b0:	461f      	mov	r7, r3
   b81b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b81b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b81ba:	4598      	cmp	r8, r3
   b81bc:	4606      	mov	r6, r0
   b81be:	4615      	mov	r5, r2
   b81c0:	d107      	bne.n	b81d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b81c2:	9907      	ldr	r1, [sp, #28]
   b81c4:	f000 f8b4 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b81c8:	b118      	cbz	r0, b81d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b81ca:	7165      	strb	r5, [r4, #5]
   b81cc:	2000      	movs	r0, #0
   b81ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b81d2:	4639      	mov	r1, r7
   b81d4:	4630      	mov	r0, r6
   b81d6:	f000 f8ab 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b81da:	2800      	cmp	r0, #0
   b81dc:	d0f6      	beq.n	b81cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b81de:	2301      	movs	r3, #1
   b81e0:	f8c4 8000 	str.w	r8, [r4]
   b81e4:	7125      	strb	r5, [r4, #4]
   b81e6:	71a3      	strb	r3, [r4, #6]
   b81e8:	e7f0      	b.n	b81cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b81ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b81ea:	b538      	push	{r3, r4, r5, lr}
   b81ec:	4615      	mov	r5, r2
   b81ee:	461c      	mov	r4, r3
   b81f0:	f000 f89e 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b81f4:	b120      	cbz	r0, b8200 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b81f6:	2308      	movs	r3, #8
   b81f8:	60e3      	str	r3, [r4, #12]
   b81fa:	2306      	movs	r3, #6
   b81fc:	6025      	str	r5, [r4, #0]
   b81fe:	7123      	strb	r3, [r4, #4]
   b8200:	bd38      	pop	{r3, r4, r5, pc}

000b8202 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8202:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8204:	4605      	mov	r5, r0
   b8206:	460c      	mov	r4, r1
   b8208:	9201      	str	r2, [sp, #4]
   b820a:	461e      	mov	r6, r3
   b820c:	f000 f890 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b8210:	b950      	cbnz	r0, b8228 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8212:	2e03      	cmp	r6, #3
   b8214:	d808      	bhi.n	b8228 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8216:	6823      	ldr	r3, [r4, #0]
   b8218:	9a01      	ldr	r2, [sp, #4]
   b821a:	695b      	ldr	r3, [r3, #20]
   b821c:	4629      	mov	r1, r5
   b821e:	4620      	mov	r0, r4
   b8220:	b002      	add	sp, #8
   b8222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8226:	4718      	bx	r3
   b8228:	b002      	add	sp, #8
   b822a:	bd70      	pop	{r4, r5, r6, pc}

000b822c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b822c:	b510      	push	{r4, lr}
   b822e:	4b03      	ldr	r3, [pc, #12]	; (b823c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8230:	6003      	str	r3, [r0, #0]
   b8232:	4604      	mov	r4, r0
   b8234:	f7ff ffa6 	bl	b8184 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8238:	4620      	mov	r0, r4
   b823a:	bd10      	pop	{r4, pc}
   b823c:	000b8ad0 	.word	0x000b8ad0

000b8240 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8240:	b510      	push	{r4, lr}
   b8242:	4604      	mov	r4, r0
   b8244:	f7ff fff2 	bl	b822c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8248:	4620      	mov	r0, r4
   b824a:	210c      	movs	r1, #12
   b824c:	f7fb ff39 	bl	b40c2 <_ZdlPvj>
   b8250:	4620      	mov	r0, r4
   b8252:	bd10      	pop	{r4, pc}

000b8254 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8256:	9f08      	ldr	r7, [sp, #32]
   b8258:	4297      	cmp	r7, r2
   b825a:	4605      	mov	r5, r0
   b825c:	460e      	mov	r6, r1
   b825e:	4614      	mov	r4, r2
   b8260:	d00a      	beq.n	b8278 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8262:	68a8      	ldr	r0, [r5, #8]
   b8264:	6802      	ldr	r2, [r0, #0]
   b8266:	9708      	str	r7, [sp, #32]
   b8268:	6a15      	ldr	r5, [r2, #32]
   b826a:	4631      	mov	r1, r6
   b826c:	4622      	mov	r2, r4
   b826e:	46ac      	mov	ip, r5
   b8270:	b003      	add	sp, #12
   b8272:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8276:	4760      	bx	ip
   b8278:	4619      	mov	r1, r3
   b827a:	9301      	str	r3, [sp, #4]
   b827c:	f000 f858 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b8280:	9b01      	ldr	r3, [sp, #4]
   b8282:	2800      	cmp	r0, #0
   b8284:	d0ed      	beq.n	b8262 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8286:	2006      	movs	r0, #6
   b8288:	b003      	add	sp, #12
   b828a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b828c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b828c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8290:	460d      	mov	r5, r1
   b8292:	4619      	mov	r1, r3
   b8294:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8298:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b829c:	4681      	mov	r9, r0
   b829e:	4617      	mov	r7, r2
   b82a0:	4698      	mov	r8, r3
   b82a2:	f000 f845 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b82a6:	b190      	cbz	r0, b82ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b82a8:	2d00      	cmp	r5, #0
   b82aa:	6034      	str	r4, [r6, #0]
   b82ac:	7137      	strb	r7, [r6, #4]
   b82ae:	db09      	blt.n	b82c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b82b0:	1961      	adds	r1, r4, r5
   b82b2:	458a      	cmp	sl, r1
   b82b4:	bf0c      	ite	eq
   b82b6:	2106      	moveq	r1, #6
   b82b8:	2101      	movne	r1, #1
   b82ba:	71b1      	strb	r1, [r6, #6]
   b82bc:	2000      	movs	r0, #0
   b82be:	b001      	add	sp, #4
   b82c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b82c4:	3502      	adds	r5, #2
   b82c6:	d1f9      	bne.n	b82bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b82c8:	2301      	movs	r3, #1
   b82ca:	71b3      	strb	r3, [r6, #6]
   b82cc:	e7f6      	b.n	b82bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b82ce:	4554      	cmp	r4, sl
   b82d0:	d106      	bne.n	b82e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b82d2:	4659      	mov	r1, fp
   b82d4:	4648      	mov	r0, r9
   b82d6:	f000 f82b 	bl	b8330 <_ZNKSt9type_infoeqERKS_>
   b82da:	b108      	cbz	r0, b82e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b82dc:	7177      	strb	r7, [r6, #5]
   b82de:	e7ed      	b.n	b82bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b82e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b82e4:	6803      	ldr	r3, [r0, #0]
   b82e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b82ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b82ee:	69dc      	ldr	r4, [r3, #28]
   b82f0:	463a      	mov	r2, r7
   b82f2:	4643      	mov	r3, r8
   b82f4:	4629      	mov	r1, r5
   b82f6:	46a4      	mov	ip, r4
   b82f8:	b001      	add	sp, #4
   b82fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b82fe:	4760      	bx	ip

000b8300 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8304:	4607      	mov	r7, r0
   b8306:	460c      	mov	r4, r1
   b8308:	4615      	mov	r5, r2
   b830a:	461e      	mov	r6, r3
   b830c:	f7ff ff6d 	bl	b81ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8310:	b948      	cbnz	r0, b8326 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8312:	68b8      	ldr	r0, [r7, #8]
   b8314:	6803      	ldr	r3, [r0, #0]
   b8316:	699f      	ldr	r7, [r3, #24]
   b8318:	462a      	mov	r2, r5
   b831a:	4633      	mov	r3, r6
   b831c:	4621      	mov	r1, r4
   b831e:	46bc      	mov	ip, r7
   b8320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8324:	4760      	bx	ip
   b8326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b832a <_ZNSt9type_infoD1Ev>:
   b832a:	4770      	bx	lr

000b832c <_ZNKSt9type_info14__is_pointer_pEv>:
   b832c:	2000      	movs	r0, #0
   b832e:	4770      	bx	lr

000b8330 <_ZNKSt9type_infoeqERKS_>:
   b8330:	4281      	cmp	r1, r0
   b8332:	b508      	push	{r3, lr}
   b8334:	d00e      	beq.n	b8354 <_ZNKSt9type_infoeqERKS_+0x24>
   b8336:	6840      	ldr	r0, [r0, #4]
   b8338:	7803      	ldrb	r3, [r0, #0]
   b833a:	2b2a      	cmp	r3, #42	; 0x2a
   b833c:	d00c      	beq.n	b8358 <_ZNKSt9type_infoeqERKS_+0x28>
   b833e:	6849      	ldr	r1, [r1, #4]
   b8340:	780b      	ldrb	r3, [r1, #0]
   b8342:	2b2a      	cmp	r3, #42	; 0x2a
   b8344:	bf08      	it	eq
   b8346:	3101      	addeq	r1, #1
   b8348:	f7fb fe68 	bl	b401c <strcmp>
   b834c:	fab0 f080 	clz	r0, r0
   b8350:	0940      	lsrs	r0, r0, #5
   b8352:	bd08      	pop	{r3, pc}
   b8354:	2001      	movs	r0, #1
   b8356:	e7fc      	b.n	b8352 <_ZNKSt9type_infoeqERKS_+0x22>
   b8358:	2000      	movs	r0, #0
   b835a:	e7fa      	b.n	b8352 <_ZNKSt9type_infoeqERKS_+0x22>

000b835c <atexit>:
   b835c:	2300      	movs	r3, #0
   b835e:	4601      	mov	r1, r0
   b8360:	461a      	mov	r2, r3
   b8362:	4618      	mov	r0, r3
   b8364:	f000 b844 	b.w	b83f0 <__register_exitproc>

000b8368 <memcpy>:
   b8368:	440a      	add	r2, r1
   b836a:	4291      	cmp	r1, r2
   b836c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8370:	d100      	bne.n	b8374 <memcpy+0xc>
   b8372:	4770      	bx	lr
   b8374:	b510      	push	{r4, lr}
   b8376:	f811 4b01 	ldrb.w	r4, [r1], #1
   b837a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b837e:	4291      	cmp	r1, r2
   b8380:	d1f9      	bne.n	b8376 <memcpy+0xe>
   b8382:	bd10      	pop	{r4, pc}

000b8384 <memset>:
   b8384:	4402      	add	r2, r0
   b8386:	4603      	mov	r3, r0
   b8388:	4293      	cmp	r3, r2
   b838a:	d100      	bne.n	b838e <memset+0xa>
   b838c:	4770      	bx	lr
   b838e:	f803 1b01 	strb.w	r1, [r3], #1
   b8392:	e7f9      	b.n	b8388 <memset+0x4>

000b8394 <srand>:
   b8394:	b538      	push	{r3, r4, r5, lr}
   b8396:	4b10      	ldr	r3, [pc, #64]	; (b83d8 <srand+0x44>)
   b8398:	681d      	ldr	r5, [r3, #0]
   b839a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b839c:	4604      	mov	r4, r0
   b839e:	b9b3      	cbnz	r3, b83ce <srand+0x3a>
   b83a0:	2018      	movs	r0, #24
   b83a2:	f7fe fd39 	bl	b6e18 <malloc>
   b83a6:	4602      	mov	r2, r0
   b83a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b83aa:	b920      	cbnz	r0, b83b6 <srand+0x22>
   b83ac:	4b0b      	ldr	r3, [pc, #44]	; (b83dc <srand+0x48>)
   b83ae:	480c      	ldr	r0, [pc, #48]	; (b83e0 <srand+0x4c>)
   b83b0:	2142      	movs	r1, #66	; 0x42
   b83b2:	f7fe fd59 	bl	b6e68 <__assert_func>
   b83b6:	490b      	ldr	r1, [pc, #44]	; (b83e4 <srand+0x50>)
   b83b8:	4b0b      	ldr	r3, [pc, #44]	; (b83e8 <srand+0x54>)
   b83ba:	e9c0 1300 	strd	r1, r3, [r0]
   b83be:	4b0b      	ldr	r3, [pc, #44]	; (b83ec <srand+0x58>)
   b83c0:	6083      	str	r3, [r0, #8]
   b83c2:	230b      	movs	r3, #11
   b83c4:	8183      	strh	r3, [r0, #12]
   b83c6:	2100      	movs	r1, #0
   b83c8:	2001      	movs	r0, #1
   b83ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b83ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b83d0:	2200      	movs	r2, #0
   b83d2:	611c      	str	r4, [r3, #16]
   b83d4:	615a      	str	r2, [r3, #20]
   b83d6:	bd38      	pop	{r3, r4, r5, pc}
   b83d8:	2003e5c4 	.word	0x2003e5c4
   b83dc:	000b8b09 	.word	0x000b8b09
   b83e0:	000b8b20 	.word	0x000b8b20
   b83e4:	abcd330e 	.word	0xabcd330e
   b83e8:	e66d1234 	.word	0xe66d1234
   b83ec:	0005deec 	.word	0x0005deec

000b83f0 <__register_exitproc>:
   b83f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b83f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b84b0 <__register_exitproc+0xc0>
   b83f8:	4606      	mov	r6, r0
   b83fa:	f8d8 0000 	ldr.w	r0, [r8]
   b83fe:	461f      	mov	r7, r3
   b8400:	460d      	mov	r5, r1
   b8402:	4691      	mov	r9, r2
   b8404:	f000 f856 	bl	b84b4 <__retarget_lock_acquire_recursive>
   b8408:	4b25      	ldr	r3, [pc, #148]	; (b84a0 <__register_exitproc+0xb0>)
   b840a:	681c      	ldr	r4, [r3, #0]
   b840c:	b934      	cbnz	r4, b841c <__register_exitproc+0x2c>
   b840e:	4c25      	ldr	r4, [pc, #148]	; (b84a4 <__register_exitproc+0xb4>)
   b8410:	601c      	str	r4, [r3, #0]
   b8412:	4b25      	ldr	r3, [pc, #148]	; (b84a8 <__register_exitproc+0xb8>)
   b8414:	b113      	cbz	r3, b841c <__register_exitproc+0x2c>
   b8416:	681b      	ldr	r3, [r3, #0]
   b8418:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b841c:	6863      	ldr	r3, [r4, #4]
   b841e:	2b1f      	cmp	r3, #31
   b8420:	dd07      	ble.n	b8432 <__register_exitproc+0x42>
   b8422:	f8d8 0000 	ldr.w	r0, [r8]
   b8426:	f000 f847 	bl	b84b8 <__retarget_lock_release_recursive>
   b842a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b842e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8432:	b34e      	cbz	r6, b8488 <__register_exitproc+0x98>
   b8434:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8438:	b988      	cbnz	r0, b845e <__register_exitproc+0x6e>
   b843a:	4b1c      	ldr	r3, [pc, #112]	; (b84ac <__register_exitproc+0xbc>)
   b843c:	b923      	cbnz	r3, b8448 <__register_exitproc+0x58>
   b843e:	f8d8 0000 	ldr.w	r0, [r8]
   b8442:	f000 f838 	bl	b84b6 <__retarget_lock_release>
   b8446:	e7f0      	b.n	b842a <__register_exitproc+0x3a>
   b8448:	f44f 7084 	mov.w	r0, #264	; 0x108
   b844c:	f7fe fce4 	bl	b6e18 <malloc>
   b8450:	2800      	cmp	r0, #0
   b8452:	d0f4      	beq.n	b843e <__register_exitproc+0x4e>
   b8454:	2300      	movs	r3, #0
   b8456:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b845a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b845e:	6863      	ldr	r3, [r4, #4]
   b8460:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8464:	2201      	movs	r2, #1
   b8466:	409a      	lsls	r2, r3
   b8468:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b846c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8470:	4313      	orrs	r3, r2
   b8472:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8476:	2e02      	cmp	r6, #2
   b8478:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b847c:	bf02      	ittt	eq
   b847e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8482:	4313      	orreq	r3, r2
   b8484:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8488:	6863      	ldr	r3, [r4, #4]
   b848a:	f8d8 0000 	ldr.w	r0, [r8]
   b848e:	1c5a      	adds	r2, r3, #1
   b8490:	3302      	adds	r3, #2
   b8492:	6062      	str	r2, [r4, #4]
   b8494:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8498:	f000 f80e 	bl	b84b8 <__retarget_lock_release_recursive>
   b849c:	2000      	movs	r0, #0
   b849e:	e7c6      	b.n	b842e <__register_exitproc+0x3e>
   b84a0:	2003e7e8 	.word	0x2003e7e8
   b84a4:	2003e75c 	.word	0x2003e75c
   b84a8:	00000000 	.word	0x00000000
   b84ac:	000b6e19 	.word	0x000b6e19
   b84b0:	2003e628 	.word	0x2003e628

000b84b4 <__retarget_lock_acquire_recursive>:
   b84b4:	4770      	bx	lr

000b84b6 <__retarget_lock_release>:
   b84b6:	4770      	bx	lr

000b84b8 <__retarget_lock_release_recursive>:
   b84b8:	4770      	bx	lr

000b84ba <link_code_end>:
	...

000b84bc <link_const_data_start>:
   b84bc:	514d0400 	.word	0x514d0400
   b84c0:	00045454 	.word	0x00045454
   b84c4:	49514d06 	.word	0x49514d06
   b84c8:	03706473 	.word	0x03706473

000b84cc <dynalib_user>:
   b84cc:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b84dc:	00000000 43003020 20647261 73657250     .... 0.Card Pres
   b84ec:	00746e65 64726143 44495520 2a2a003a     ent.Card UID:.**
   b84fc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   b850c:	2a2a2a2a 2a2a2a2a 002a2a2a 4352464d     ***********.MFRC
   b851c:	20323235 69676944 206c6174 666c6573     522 Digital self
   b852c:	73657420 2d2d0074 2d2d2d2d 2d2d2d2d      test.----------
   b853c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   b854c:	002d2d2d 796c6e4f 6f6e6b20 76206e77     ---.Only known v
   b855c:	69737265 20736e6f 70707573 6574726f     ersions supporte
   b856c:	65500064 726f6672 676e696d 73657420     d.Performing tes
   b857c:	2e2e2e74 73655200 3a746c75 4b4f0020     t....Result: .OK
   b858c:	46454400 20544345 5520726f 4f4e4b4e     .DEFECT or UNKNO
   b859c:	4c004e57 74686769 00213120 73706143     WN.Light 1!.Caps
   b85ac:	656e6f74 65646f4e 00314c00 6867694c     toneNode.L1.Ligh
   b85bc:	21322074 00324c00 6867694c 21332074     t 2!.L2.Light 3!
   b85cc:	00334c00 6867694c 21342074 00344c00     .L3.Light 4!.L4.
   b85dc:	2e62616c 77656874 632e6c63 43006d6f     lab.thewcl.com.C
   b85ec:	656e6e6f 64657463 66656400 746c7561     onnected.default
   b85fc:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
   b860c:	6e697474 64207367 75616665 003e746c     ttings default>.
   b861c:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
   b862c:	73252075 444f4d20 3e752545 00000000     u %s MODE%u>....

000b863c <_ZTVN8particle11SPISettingsE>:
	...
   b8644:	000b5131 000b5105 000b5107 6d726946     1Q...Q...Q..Firm
   b8654:	65726177 72655620 6e6f6973 7830203a     ware Version: 0x
   b8664:	203d2000 6f6c6328 0029656e 76203d20     . = (clone). = v
   b8674:	00302e30 76203d20 00302e31 76203d20     0.0. = v1.0. = v
   b8684:	00302e32 63203d20 746e756f 65667265     2.0. = counterfe
   b8694:	63207469 00706968 28203d20 6e6b6e75     it chip. = (unkn
   b86a4:	296e776f 52415700 474e494e 6f43203a     own).WARNING: Co
   b86b4:	6e756d6d 74616369 206e6f69 6c696166     mmunication fail
   b86c4:	2c657275 20736920 20656874 4352464d     ure, is the MFRC
   b86d4:	20323235 706f7270 796c7265 6e6f6320     522 properly con
   b86e4:	7463656e 003f6465                       nected?.

000b86ec <_ZL26FM17522_firmware_reference>:
   b86ec:	8c78d600 180caae2 7f7ab82a 0bcf6ad3     ..x.....*.z..j..
   b86fc:	4b6337b1 c791ae69 77ae97c3 9bd737f4     .7cKi......w.7..
   b870c:	113cf57c d7c3158f 2a005bc1 9ede75d0     |.<......[.*.u..
   b871c:	3eab6451 abb515e9 82989a56 622aea26     Qd.>....V...&.*b

000b872c <_ZL30MFRC522_firmware_referenceV0_0>:
   b872c:	0f988700 1907ff49 493022bf caad6359     ....I...."0IYc..
   b873c:	034ee37f 50494e5c 61379a47 2ec6e2e7     ..N.\NIPG.7a....
   b874c:	04ed5a75 784b023d 3b58ff32 9400e97c     uZ..=.Kx2.X;|...
   b875c:	5b594ab4 df29c9fd 9e989635 8d32304f     .JY[..).5...O02.

000b876c <_ZL30MFRC522_firmware_referenceV1_0>:
   b876c:	d537c600 5c57b732 4d7cd8c2 73c770d9     ..7.2.W\..|M.p.s
   b877c:	aad2e610 5a3ea15e 6130af14 2edb70c9     ....^.>Z..0a.p..
   b878c:	b5722264 ecf465bd 72d3bc22 41aacd35     d"r..e.."..r5..A
   b879c:	53f3a71f 027ede14 5eb50fd9 79291d25     ...S..~....^%.)y

000b87ac <_ZL30MFRC522_firmware_referenceV2_0>:
   b87ac:	ba66eb00 9523bf57 3d0de3d0 de5c8927     ..f.W.#....='.\.
   b87bc:	00a73b9d 82895b21 02eb3a51 4900a50c     .;..![..Q:.....I
   b87cc:	b34d847c 811bd2cc d576485d a9216171     |.M.....]Hv.qa!.
   b87dc:	38839686 6d5b9dcf 3eba15dc 2f3b957d     ...8..[m...>}.;/

000b87ec <_ZTV7MFRC522>:
	...
   b87f4:	000b6209 000b61c9 000b5a41              .b...a..AZ..

000b8800 <CSWTCH.88>:
   b8800:	0000012c 00000018 000001f4 0000012c     ,...........,...
   b8810:	00000050                                P...

000b8814 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b881c <_ZTVN5spark13EthernetClassE>:
	...
   b8824:	000b6eff 000b6ef5 000b6eeb 000b6ee1     .n...n...n...n..
   b8834:	000b6ed5 000b6ec9 000b711d 000b7125     .n...n...q..%q..
   b8844:	000b6ebd 000b6eb5 000b6eab 000b6ea1     .n...n...n...n..
   b8854:	000b7155                                Uq..

000b8858 <_ZTV7TwoWire>:
	...
   b8860:	000b6f1d 000b6f67 000b6f3f 000b6f1f     .o..go..?o...o..
   b8870:	000b6f47 000b6f4f 000b6f57 000b6f5f     Go..Oo..Wo.._o..

000b8880 <_ZTV9IPAddress>:
	...
   b8888:	000b6fc1 000b6fb1 000b6fb3 00707061     .o...o...o..app.

000b8898 <_ZTVN5spark12NetworkClassE>:
	...
   b88a0:	000b70dd 000b70e7 000b70f1 000b70fb     .p...p...p...p..
   b88b0:	000b7105 000b7111 000b711d 000b7125     .q...q...q..%q..
   b88c0:	000b712d 000b7139 000b7141 000b714b     -q..9q..Aq..Kq..
   b88d0:	000b7155                                Uq..

000b88d4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b88d4:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   b88e4:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000b88f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b88fc:	000b7671 000b7695 000b7bc7 000b76a3     qv...v...{...v..
   b890c:	000b7675                                uv..

000b8910 <_ZTV9TCPClient>:
	...
   b8918:	000b7721 000b7755 000b75ed 000b7607     !w..Uw...u...v..
   b8928:	000b7a5d 000b7631 000b78d3 000b7665     ]z..1v...x..ev..
   b8938:	000b7965 000b77a5 000b7901 000b7b11     ey...w...y...{..
   b8948:	000b78a1 000b7667 000b7619 000b76a9     .x..gv...v...v..
   b8958:	000b7785 252d5925 64252d6d 3a482554     .w..%Y-%m-%dT%H:
   b8968:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b8978 <_ZTV11USARTSerial>:
	...
   b8980:	000b7be1 000b7c4d 000b7c25 000b7241     .{..M|..%|..Ar..
   b8990:	000b7bf5 000b7c11 000b7c03 000b7c1f     .{...|...|...|..
   b89a0:	000b7be3 000b7be7                       .{...{..

000b89a8 <_ZTV9USBSerial>:
	...
   b89b0:	000b7c8b 000b7cf3 000b7cc9 000b7241     .|...|...|..Ar..
   b89c0:	000b7cbb 000b7c8d 000b7c9d 000b7ced     .|...|...|...|..
   b89d0:	000b7cad 000b7c85                       .|...|..

000b89d8 <_ZTVN5spark9WiFiClassE>:
	...
   b89e0:	000b7deb 000b7de1 000b7dd7 000b7d8d     .}...}...}...}..
   b89f0:	000b7dcb 000b7dbf 000b711d 000b7125     .}...}...q..%q..
   b8a00:	000b7db3 000b7dab 000b7da1 000b7d97     .}...}...}...}..
   b8a10:	000b7155                                Uq..

000b8a14 <_ZSt7nothrow>:
	...

000b8a15 <_ZTSSt19_Sp_make_shared_tag>:
   b8a15:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b8a25:	5f646572 00676174                        red_tag....

000b8a30 <_ZTISt19_Sp_make_shared_tag>:
   b8a30:	000b8a70 000b8a15                       p.......

000b8a38 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8a38:	000b8ad0 000b8a44 000b8af4              ....D.......

000b8a44 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8a44:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b8a54:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b8a64:	00000045                                E...

000b8a68 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8a68:	00000000 000b8a38 000b8185 000b8199     ....8...........
   b8a78:	000b832d 000b832d 000b8203 000b8145     -...-.......E...
   b8a88:	000b81eb 000b81ad 000b8177              ........w...

000b8a94 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8a94:	000b8ad0 000b8aa0 000b8a38              ........8...

000b8aa0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8aa0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b8ab0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b8ac0:	456f666e 00000000                       nfoE....

000b8ac8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8ac8:	00000000 000b8a94 000b822d 000b8241     ........-...A...
   b8ad8:	000b832d 000b832d 000b8203 000b8145     -...-.......E...
   b8ae8:	000b8301 000b828d 000b8255              ........U...

000b8af4 <_ZTISt9type_info>:
   b8af4:	000b8a70 000b8afc                       p.......

000b8afc <_ZTSSt9type_info>:
   b8afc:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b8b0c:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b8b1c:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b8b2c:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b8b3c:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b8b4c:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b8b5c:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b8b6c:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b8b79 <link_const_data_end>:
   b8b79:	00          	.byte	0x00
	...

000b8b7c <link_constructors_location>:
   b8b7c:	000b5041 	.word	0x000b5041
   b8b80:	000b6941 	.word	0x000b6941
   b8b84:	000b6e91 	.word	0x000b6e91
   b8b88:	000b6f09 	.word	0x000b6f09
   b8b8c:	000b70cd 	.word	0x000b70cd
   b8b90:	000b722d 	.word	0x000b722d
   b8b94:	000b7375 	.word	0x000b7375
   b8b98:	000b75c9 	.word	0x000b75c9
   b8b9c:	000b7bcd 	.word	0x000b7bcd
   b8ba0:	000b7df5 	.word	0x000b7df5
